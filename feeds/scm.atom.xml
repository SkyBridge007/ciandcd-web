<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>www.ciandcd.com - scm</title><link href="http://ciandcd.github.io/ciandcd-web/" rel="alternate"></link><link href="http://ciandcd.github.io/ciandcd-web/feeds/scm.atom.xml" rel="self"></link><id>http://ciandcd.github.io/ciandcd-web/</id><updated>2017-05-08T19:13:32+08:00</updated><entry><title>A closer look at Europe · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/a-closer-look-at-europe-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/a-closer-look-at-europe-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2023-a-closer-look-at-europe"&gt;https://github.com/blog/2023-a-closer-look-at-europe&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Last week we opened our first &lt;a href="https://github.com/blog/2017-announcing-github-japan"&gt;international office in Japan&lt;/a&gt;. This week we thought we'd take a closer look at Europe, which happens to be the largest demographic of GitHub users around the world, representing 36% of site traffic.&lt;/p&gt;

&lt;p&gt;Around 32 million people visit GitHub each month, and most of this traffic comes from outside of the United States (74% in fact!).
The most active countries in Europe are Germany, the United Kingdom, and France, but if we look at users per capita we see a different story -- Sweden, Finland, and the Netherlands lead the way. London, Paris and Stockholm top the list of European cities most active on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/25/8152704/83b76acc-12d5-11e5-851c-3fa139ee3137.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/25/8152704/83b76acc-12d5-11e5-851c-3fa139ee3137.png" alt="Growth of most active European countries on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goals of building better software are universal, and several European organizations are setting the example.
Companies like &lt;a href="https://enterprise.github.com/stories/sap"&gt;SAP&lt;/a&gt; and XS4ALL are driving innovation with software, while &lt;a href="https://alphagov.github.io/"&gt;The UK Government Digital Services&lt;/a&gt; and &lt;a href="https://government.github.com/community/"&gt;dozens of other European government agencies and services&lt;/a&gt; are developing new ways to serve citizens.&lt;/p&gt;

&lt;p&gt;Today, around 10% of GitHub employees are based in Europe, with a dozen new faces in the last year alone -- many of whom are focused solely on helping our European customers build great software.
A few of us are here in the UK for &lt;a href="http://londontechnologyweek.co.uk/"&gt;London Tech Week&lt;/a&gt; and &lt;a href="https://enterconf.com/"&gt;EnterConf&lt;/a&gt; in Belfast. There will be plenty more meetups ahead if we don't see you there.&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>A new GitLab Logo</title><link href="http://ciandcd.github.io/ciandcd-web/a-new-gitlab-logo.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/a-new-gitlab-logo.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/05/18/a-new-gitlab-logo/"&gt;https://www.gitlab.com/2015/05/18/a-new-gitlab-logo/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;A new GitLab Logo&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We hear you:&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Gitlab seems like a cool service, but my god that logo is scary&lt;/p&gt;&amp;#8212; Matt Bachmann (@MattBachmann) &lt;a href="https://twitter.com/MattBachmann/status/575671070268768256"&gt;March 11, 2015&lt;/a&gt;&lt;/blockquote&gt;


 


&lt;p&gt;We have a scary, angry looking raccoon dog logo.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;this creepy human/racoon hybrid that is the &lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt; logo is starting to really freak me out &lt;a href="http://t.co/HJarlbRNOo"&gt;pic.twitter.com/HJarlbRNOo&lt;/a&gt;&lt;/p&gt;&amp;#8212; hatewell (@hatwell) &lt;a href="https://twitter.com/hatwell/status/556028082709348352"&gt;January 16, 2015&lt;/a&gt;&lt;/blockquote&gt;


 


&lt;p&gt;We figured we could use a better representation of GitLab.&lt;/p&gt;

 


&lt;p&gt;&lt;strong&gt;Update May 20th:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After careful consideration we have decided that this is our new logo:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/new_logo/A.jpg" alt="new GitLab Logo option A"&gt;&lt;/p&gt;

&lt;p&gt;We like the way it looks in GitLab:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/new_logo/l2.png" alt="The new logo in GitLab"&gt;
&lt;img src="/images/new_logo/l3.png" alt="The new logo in GitLab, different color scheme"&gt;&lt;/p&gt;

&lt;p&gt;And compared to the old logo:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/new_logo/l1.png" alt="New vs. old GitLab logo"&gt;&lt;/p&gt;



&lt;p&gt;The options we didn&amp;#8217;t pick:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/new_logo/B.jpg" alt="new GitLab Logo option B"&gt;
&lt;img src="/images/new_logo/C.jpg" alt="new GitLab Logo option C"&gt;
&lt;img src="/images/new_logo/D.jpg" alt="new GitLab Logo option D"&gt;&lt;/p&gt;

&lt;p&gt;If you have a better suggestion than one of the ones above, a certain preference
or opinion, we&amp;#8217;d love to hear it.&lt;/p&gt;

&lt;p&gt;The final choice of our new logo rests with &lt;a href="https://twitter.com/dzaporozhets"&gt;Dmitriy&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>An updated header, just for you · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/an-updated-header-just-for-you-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/an-updated-header-just-for-you-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2022-an-updated-header-just-for-you"&gt;https://github.com/blog/2022-an-updated-header-just-for-you&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Navigating what's most important to you on GitHub.com just got a little easier with our updated site header.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/98681/8116294/212a0ff0-1036-11e5-9450-b08d1cb7999c.jpg" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/98681/8116294/212a0ff0-1036-11e5-9450-b08d1cb7999c.jpg" alt="New GitHub header"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new header gives you faster access to &lt;a href="https://github.com/blog/1901-managing-issues-and-pull-requests-across-repositories"&gt;your pull requests and issues dashboards&lt;/a&gt; from anywhere on the site. If you're unfamiliar with them, these dashboards list all of your open pull requests and issues&amp;#8212;as well as those you've been mentioned in or are assigned to&amp;#8212;in one place. Use them to stay up to date on what needs to be done across your projects.&lt;/p&gt;

&lt;p&gt;Lastly, clicking your avatar now opens a new dropdown menu with links to your profile, account settings, and more. As a small bonus, we've also included a new Your stars link for easy access to your starred repositories.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>Announcing Atom 1.0 · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/announcing-atom-10-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/announcing-atom-10-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2031-announcing-atom-1-0"&gt;https://github.com/blog/2031-announcing-atom-1-0&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/378023/8232151/5be2347e-1608-11e5-8e5c-157da28c9ce7.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/378023/8232151/5be2347e-1608-11e5-8e5c-157da28c9ce7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub is pleased to announce that version 1.0 of the Atom text editor is now available from &lt;a href="https://atom.io"&gt;atom.io&lt;/a&gt;. Read the full behind the scenes story over on the &lt;a href="http://blog.atom.io/2015/06/25/atom-1-0.html"&gt;Atom blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The entire Atom team is attending &lt;a href="http://codeconf.com"&gt;CodeConf&lt;/a&gt; this week and will be presenting a session all about Atom 1.0 featuring &lt;a href="https://github.com/defunkt"&gt;Chris Wanstrath&lt;/a&gt;, &lt;a href="https://github.com/benogle"&gt;Ben Ogle&lt;/a&gt;, and &lt;a href="https://github.com/thedaniel"&gt;Daniel Hengeveld&lt;/a&gt;. Watch along tomorrow, June 26th, at 11AM EDT: &lt;a href="https://live-stream.github.com"&gt;https://live-stream.github.com&lt;/a&gt;&lt;/p&gt;


  &lt;/div&gt;</content></entry><entry><title>Announcing GitHub Japan · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/announcing-github-japan-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/announcing-github-japan-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2017-announcing-github-japan"&gt;https://github.com/blog/2017-announcing-github-japan&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;GitHub &amp;lt;3s Japan, and today we&amp;#8217;re excited to announce the formation of GitHub Japan G.K., a subsidiary of GitHub, Inc. Our new office in Tokyo is our first official office outside of the United States. &lt;/p&gt;

&lt;h3&gt;The Japanese developer community&lt;/h3&gt;

&lt;p&gt;GitHub couldn&amp;#8217;t exist without the Japanese open source community &amp;#8212; after all, our site is built on &lt;a href="https://github.com/rails/rails"&gt;Rails&lt;/a&gt;, which is built on &lt;a href="https://github.com/ruby/ruby"&gt;Ruby&lt;/a&gt;, an open source project &lt;a href="https://www.ruby-lang.org/en/about/"&gt;started in Japan&lt;/a&gt;. Japan has historically been one of the most active countries on GitHub, ranking in the top 10 countries visiting github.com since GitHub was founded in 2008. The thriving software community in Japan keeps growing; in 2014, activity on github.com from Japan increased more than 60 percent from the previous year. &lt;/p&gt;

&lt;h3&gt;GitHub Enterprise in Japan&lt;/h3&gt;

&lt;p&gt;In addition to an active local open source community, Japanese businesses including &lt;a href="http://www.hitachi-systems.com/eng/"&gt;Hitachi Systems&lt;/a&gt;, &lt;a href="https://enterprise.github.com/stories/cyberagent"&gt;CyberAgent&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=j1-G14EJRQ8"&gt;GREE&lt;/a&gt; are collaborating and building the best software with GitHub Enterprise. To that end, we&amp;#8217;re also announcing that we'll be partnering locally to provide Japanese language technical support for GitHub Enterprise users, as well as the ability to pay in Japanese Yen in Japan. &lt;/p&gt;

&lt;h3&gt;Stay up to date&lt;/h3&gt;

&lt;p&gt;Keep tabs on everything happening in our Tokyo office by following &lt;a href="https://twitter.com/githubjapan"&gt;@GitHubJapan&lt;/a&gt; on Twitter and checking out &lt;a href="http://github.co.jp/"&gt;github.co.jp&lt;/a&gt;. We&amp;#8217;d also love to see you at our &lt;a href="http://ptix.co/1cIsp83"&gt;meetup in Osaka on June 6&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Yoroshiku-Onegaiitashimasu!&lt;/p&gt;

&lt;h1&gt;&amp;#21021;&amp;#12417;&amp;#12414;&amp;#12375;&amp;#12390;GitHub Japan&amp;#12391;&amp;#12377;&amp;#65281;&lt;/h1&gt;

&lt;p&gt;GitHub &amp;lt;3s Japan, &amp;#26412;&amp;#26085;&amp;#12289;&amp;#31169;&amp;#36948;&amp;#12399;GitHub, Inc.&amp;#12398;&amp;#23376;&amp;#20250;&amp;#31038;&amp;#12391;&amp;#12354;&amp;#12427;&amp;#12289;GitHub Japan&amp;#21512;&amp;#21516;&amp;#20250;&amp;#31038;&amp;#12398;&amp;#35373;&amp;#31435;&amp;#12398;&amp;#30330;&amp;#34920;&amp;#12364;&amp;#12391;&amp;#12365;&amp;#12427;&amp;#20107;&amp;#12434;&amp;#12392;&amp;#12390;&amp;#12418;&amp;#20809;&amp;#26628;&amp;#12395;&amp;#24605;&amp;#12387;&amp;#12390;&amp;#12362;&amp;#12426;&amp;#12414;&amp;#12377; &amp;#12290;&amp;#26481;&amp;#20140;&amp;#12395;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12375;&amp;#12383;&amp;#26032;&amp;#12375;&amp;#12356;&amp;#12458;&amp;#12501;&amp;#12451;&amp;#12473;&amp;#12399;&amp;#12289;&amp;#31859;&amp;#22269;&amp;#22806;&amp;#12391;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12377;&amp;#12427;&amp;#21021;&amp;#12398;&amp;#12458;&amp;#12501;&amp;#12451;&amp;#12473;&amp;#12395;&amp;#12394;&amp;#12426;&amp;#12414;&amp;#12377;&amp;#12290;&lt;/p&gt;

&lt;h3&gt;&amp;#12316;&amp;#26085;&amp;#26412;&amp;#12398;&amp;#12487;&amp;#12505;&amp;#12525;&amp;#12483;&amp;#12497;&amp;#12540;&amp;#12539;&amp;#12467;&amp;#12511;&amp;#12517;&amp;#12491;&amp;#12486;&amp;#12451;&amp;#12395;&amp;#12416;&amp;#12369;&amp;#12390;&amp;#12316;&lt;/h3&gt;

&lt;p&gt;GitHub&amp;#12399;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12391;&amp;#29983;&amp;#12414;&amp;#12428;&amp;#12383;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12477;&amp;#12540;&amp;#12473;&amp;#12539;&amp;#12503;&amp;#12525;&amp;#12472;&amp;#12455;&amp;#12463;&amp;#12488;&amp;#12398;Ruby&amp;#12391;&amp;#20316;&amp;#12425;&amp;#12428;&amp;#12383;Rails&amp;#12392;&amp;#12356;&amp;#12358;&amp;#12501;&amp;#12524;&amp;#12540;&amp;#12512;&amp;#12527;&amp;#12540;&amp;#12463;&amp;#12395;&amp;#12424;&amp;#12387;&amp;#12390;&amp;#38283;&amp;#30330;&amp;#12373;&amp;#12428;&amp;#12390;&amp;#12362;&amp;#12426;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12398;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12477;&amp;#12540;&amp;#12473;&amp;#12539;&amp;#12467;&amp;#12511;&amp;#12517;&amp;#12491;&amp;#12486;&amp;#12451;&amp;#12540;&amp;#12394;&amp;#12375;&amp;#12391;&amp;#12399;GitHub&amp;#12399;&amp;#23384;&amp;#22312;&amp;#12375;&amp;#12360;&amp;#12394;&amp;#12356;&amp;#12392;&amp;#35328;&amp;#12387;&amp;#12390;&amp;#12399;&amp;#36942;&amp;#35328;&amp;#12391;&amp;#12399;&amp;#12394;&amp;#12356;&amp;#31243;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12392;GitHub&amp;#12399;&amp;#28145;&amp;#12356;&amp;#12388;&amp;#12394;&amp;#12364;&amp;#12426;&amp;#12364;&amp;#12354;&amp;#12426;&amp;#12414;&amp;#12377;&amp;#12290;
&amp;#12414;&amp;#12383;&amp;#12289;2008&amp;#24180;&amp;#12398;GitHub&amp;#35373;&amp;#31435;&amp;#24403;&amp;#21021;&amp;#12363;&amp;#12425;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12363;&amp;#12425;github.com&amp;#12408;&amp;#12398;&amp;#12450;&amp;#12463;&amp;#12475;&amp;#12473;&amp;#25968;&amp;#12399;&amp;#19978;&amp;#20301;10&amp;#12534;&amp;#22269;&amp;#12395;&amp;#20837;&amp;#12426;&amp;#32154;&amp;#12369;&amp;#12390;&amp;#12365;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12390;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12398;&amp;#12518;&amp;#12540;&amp;#12470;&amp;#12540;&amp;#12399;&amp;#29694;&amp;#22312;&amp;#12418;&amp;#22679;&amp;#21152;&amp;#12375;&amp;#32154;&amp;#12369;&amp;#12390;&amp;#12362;&amp;#12426;&amp;#12289;2014&amp;#24180;&amp;#12398;&amp;#26085;&amp;#26412;&amp;#12518;&amp;#12540;&amp;#12470;&amp;#12540;&amp;#12398;GitHub&amp;#19978;&amp;#12391;&amp;#12398;&amp;#12450;&amp;#12463;&amp;#12486;&amp;#12451;&amp;#12499;&amp;#12486;&amp;#12451;&amp;#12399;&amp;#12289;&amp;#21069;&amp;#24180;&amp;#27604;60&amp;#65285;&amp;#12418;&amp;#22679;&amp;#21152;&amp;#12375;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&lt;/p&gt;

&lt;h3&gt;&amp;#65374;&amp;#12300;GitHub Enterprise&amp;#12301;&amp;#12398;&amp;#26085;&amp;#26412;&amp;#23637;&amp;#38283;&amp;#65374;&lt;/h3&gt;

&lt;p&gt;GitHub&amp;#12399;&amp;#24195;&amp;#12367;&amp;#38283;&amp;#12363;&amp;#12428;&amp;#12383;&amp;#38283;&amp;#30330;&amp;#12434;&amp;#25903;&amp;#25588;&amp;#12377;&amp;#12427;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12477;&amp;#12540;&amp;#12473;&amp;#12539;&amp;#12503;&amp;#12521;&amp;#12483;&amp;#12488;&amp;#12501;&amp;#12457;&amp;#12540;&amp;#12512;&amp;#20197;&amp;#22806;&amp;#12395;&amp;#12418;&amp;#12289;&amp;#20840;&amp;#19990;&amp;#30028;&amp;#12391;&amp;#20225;&amp;#26989;&amp;#21521;&amp;#12369;&amp;#12395;&amp;#12300;GitHub Enterprise&amp;#12301;&amp;#12434;&amp;#25552;&amp;#20379;&amp;#12375;&amp;#12390;&amp;#21442;&amp;#12426;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12371;&amp;#12428;&amp;#12414;&amp;#12391;&amp;#12300;GitHub Enterprise&amp;#12301;&amp;#12399;&amp;#12289;&amp;#33521;&amp;#35486;&amp;#12391;&amp;#12398;&amp;#12469;&amp;#12509;&amp;#12540;&amp;#12488;&amp;#12398;&amp;#12415;&amp;#12384;&amp;#12387;&amp;#12383;&amp;#12395;&amp;#12418;&amp;#12363;&amp;#12363;&amp;#12431;&amp;#12425;&amp;#12378;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#22269;&amp;#20869;&amp;#12391;&amp;#12399;&amp;#12289;&lt;a href="http://www.hitachi-systems.com/"&gt;&amp;#26666;&amp;#24335;&amp;#20250;&amp;#31038;&amp;#26085;&amp;#31435;&amp;#12471;&amp;#12473;&amp;#12486;&amp;#12512;&amp;#12474;&lt;/a&gt;&amp;#12289;&lt;a href="http://www.yahoo.co.jp/"&gt;&amp;#12516;&amp;#12501;&amp;#12540;&amp;#26666;&amp;#24335;&amp;#20250;&amp;#31038;&lt;/a&gt;&amp;#12289;&lt;a href="https://enterprise.github.com/stories/cyberagent"&gt;&amp;#26666;&amp;#24335;&amp;#20250;&amp;#31038;&amp;#12469;&amp;#12452;&amp;#12496;&amp;#12540;&amp;#12456;&amp;#12540;&amp;#12472;&amp;#12455;&amp;#12531;&amp;#12488;&lt;/a&gt;&amp;#12420;&lt;a href="https://www.youtube.com/watch?v=j1-G14EJRQ8"&gt;&amp;#12464;&amp;#12522;&amp;#12540;&amp;#26666;&amp;#24335;&amp;#20250;&amp;#31038;&lt;/a&gt; &amp;#12394;&amp;#12393;&amp;#12398;&amp;#22823;&amp;#25163;&amp;#20225;&amp;#26989;&amp;#12434;&amp;#12399;&amp;#12376;&amp;#12417;&amp;#12392;&amp;#12375;&amp;#12390;&amp;#12289;&amp;#22810;&amp;#12367;&amp;#12398;&amp;#20808;&amp;#36914;&amp;#30340;&amp;#12394;&amp;#20225;&amp;#26989;&amp;#12395;&amp;#12372;&amp;#27963;&amp;#29992;&amp;#38914;&amp;#12356;&amp;#12390;&amp;#21442;&amp;#12426;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12390;&amp;#20170;&amp;#22238;&amp;#12289;&amp;#12373;&amp;#12425;&amp;#12395;&amp;#36805;&amp;#36895;&amp;#12391;&amp;#12365;&amp;#12417;&amp;#32048;&amp;#12363;&amp;#12356;&amp;#12469;&amp;#12540;&amp;#12499;&amp;#12473;&amp;#12420;&amp;#12469;&amp;#12509;&amp;#12540;&amp;#12488;&amp;#12434;&amp;#25552;&amp;#20379;&amp;#12377;&amp;#12427;&amp;#12383;&amp;#12417;&amp;#12289;GitHub&amp;#12399;&amp;#22823;&amp;#25163;&amp;#20195;&amp;#29702;&amp;#24215;&amp;#12392;&amp;#26989;&amp;#21209;&amp;#25552;&amp;#25658;&amp;#12434;&amp;#34892;&amp;#12356;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#35486;&amp;#12395;&amp;#12424;&amp;#12427;&amp;#12300;GitHub Enterprise&amp;#12301;&amp;#12398;&amp;#27861;&amp;#20154;&amp;#21521;&amp;#12369;&amp;#23566;&amp;#20837;&amp;#12469;&amp;#12509;&amp;#12540;&amp;#12488;&amp;#12418;&amp;#38283;&amp;#22987;&amp;#12375;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12371;&amp;#12398;&amp;#36009;&amp;#22770;&amp;#12497;&amp;#12540;&amp;#12488;&amp;#12490;&amp;#12540;&amp;#25552;&amp;#25658;&amp;#12395;&amp;#12424;&amp;#12426;&amp;#12289;&amp;#20870;&amp;#24314;&amp;#12390;&amp;#27770;&amp;#28168;&amp;#12420;&amp;#26085;&amp;#26412;&amp;#35486;&amp;#12398;&amp;#12486;&amp;#12463;&amp;#12491;&amp;#12459;&amp;#12523;&amp;#12469;&amp;#12509;&amp;#12540;&amp;#12488;&amp;#12418;&amp;#21487;&amp;#33021;&amp;#12395;&amp;#12394;&amp;#12426;&amp;#12414;&amp;#12377;&amp;#12290;&lt;/p&gt;

&lt;h3&gt;GitHub &amp;#12398;&amp;#26368;&amp;#26032;&amp;#12398;&amp;#24773;&amp;#22577;&amp;#12434;&amp;#24471;&amp;#12424;&amp;#12358;&lt;/h3&gt;

&lt;p&gt;&amp;#26481;&amp;#20140;&amp;#12458;&amp;#12501;&amp;#12451;&amp;#12473;&amp;#12391;&amp;#20309;&amp;#12364;&amp;#36215;&amp;#12371;&amp;#12387;&amp;#12390;&amp;#12356;&amp;#12427;&amp;#12363;&amp;#30693;&amp;#12427;&amp;#28858;&amp;#12395;&amp;#12399;Twitter&amp;#12391;  &lt;a href="https://twitter.com/githubjapan"&gt;@GitHubJapan&lt;/a&gt;&amp;#160;&amp;#12434;&amp;#12501;&amp;#12457;&amp;#12525;&amp;#12540;&amp;#12377;&amp;#12427;&amp;#12363;&amp;#12289; &lt;a href="http://github.co.jp/"&gt;github.co.jp&lt;/a&gt;&amp;#12395;&amp;#12450;&amp;#12463;&amp;#12475;&amp;#12473;&amp;#12375;&amp;#12390;&amp;#12367;&amp;#12384;&amp;#12373;&amp;#12356;&amp;#12397;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12390;&lt;a href="http://ptix.co/1cIsp83"&gt;&amp;#22823;&amp;#38442;&amp;#12391;&amp;#38283;&amp;#20652;&amp;#12373;&amp;#12428;&amp;#12427;user meetup&lt;/a&gt; &amp;#12395;&amp;#12418;&amp;#26159;&amp;#38750;&amp;#12362;&amp;#36234;&amp;#12375;&amp;#12367;&amp;#12384;&amp;#12373;&amp;#12356;&amp;#65281; &amp;#12362;&amp;#24453;&amp;#12385;&amp;#12375;&amp;#12390;&amp;#12362;&amp;#12426;&amp;#12414;&amp;#12377;&amp;#65281;.&lt;/p&gt;

&lt;p&gt;&amp;#12424;&amp;#12429;&amp;#12375;&amp;#12367;&amp;#12362;&amp;#39000;&amp;#12356;&amp;#33268;&amp;#12375;&amp;#12414;&amp;#12377;&amp;#65281;&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>Atom at CodeConf 2015 · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/atom-at-codeconf-2015-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/atom-at-codeconf-2015-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2018-atom-at-codeconf-2015"&gt;https://github.com/blog/2018-atom-at-codeconf-2015&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/4154342/7970619/2b15c3e4-09f4-11e5-89e0-1affcfcf80ba.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/4154342/7970619/2b15c3e4-09f4-11e5-89e0-1affcfcf80ba.png" alt="atom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://codeconf.com"&gt;CodeConf&lt;/a&gt; is coming June 25 &amp;amp; 26 to Nashville and will feature the best that the open source community has to offer.&lt;/p&gt;

&lt;p&gt;We're excited to share that there will be several talks about the &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; ecosystem presented for your enjoyment and edification, kicked off by GitHub CEO &lt;a href="https://github.com/defunkt"&gt;Chris Wanstrath&lt;/a&gt;. Speakers will include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bolinfest"&gt;@bolinfest&lt;/a&gt; talking about &lt;a href="http://nuclide.io"&gt;Nuclide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lee-dohm"&gt;@lee-dohm&lt;/a&gt; talking about the Atom community&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paulcbetts"&gt;@paulcbetts&lt;/a&gt; talking about &lt;a href="https://slack.com"&gt;Slack&lt;/a&gt; and &lt;a href="http://electron.atom.io"&gt;Electron&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also be hosting an Atom workshop led by &lt;a href="https://github.com/nathansobo"&gt;Nathan Sobo&lt;/a&gt;, and a lounge where you will be able to meet with the core team and hack on Atom together.  &lt;/p&gt;

&lt;p&gt;Grab your &lt;a href="http://www.ticketbase.com/events/codeconf-2015"&gt;CodeConf and workshop tickets now&lt;/a&gt; and we'll see you there in Nashville! &lt;/p&gt;


  &lt;/div&gt;</content></entry><entry><title>Changes to Enterprise Edition subscription pricing</title><link href="http://ciandcd.github.io/ciandcd-web/changes-to-enterprise-edition-subscription-pricing.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/changes-to-enterprise-edition-subscription-pricing.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/12/price_changes/"&gt;https://www.gitlab.com/2015/06/12/price_changes/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Changes to Enterprise Edition subscription pricing&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;Today we are announcing two changes to GitLab Enterprise Edition subscription pricing.
The changes are intended to better reflect the value of each offering and
ensure our subscription options cater to the needs of different organizations.&lt;/p&gt;

&lt;p&gt;In short, our basic subscription is now $19,10 more expensive, but in 10-user packs.
Our Plus subscription is now $100 more affordable. Standard and terms remain unchanged.&lt;/p&gt;

 


&lt;p&gt;As of today (June 12, 2015) the following will take affect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic Subscriptions will cost $390 per year for a 10-user pack ($39 per user / per year).
Current Basic Subscribers will be offered a 25% discount on this new pricing at their next renewal.
However, new pricing will apply to subsequent renewals and any additional user packs.
Basic subscriptions are now available in 10-user packs, making it slightly more
affordable for small teams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plus Subscriptions will cost $14,900 for a 100-user pack ($149 per user / per year).
Current Plus subscribers will receive a prorated refund on the price differece.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are no changes in the software features or service level of Basic or Plus subscriptions,
which you can view on our &lt;a href="https://about.gitlab.com/pricing/"&gt;website here&lt;/a&gt;.
Standard Subscription pricing will also remain unchanged at $4,900 per year for
each 100-user pack ($49 per user / per year).&lt;/p&gt;

&lt;p&gt;All current quotes will be honored until their expiration (60 days from issue date)
but the new pricing will apply to any subsequent orders, including renewals.&lt;/p&gt;

&lt;p&gt;Our goal is to keep GitLab the most affordable enterprise grade development platform available.
These changes should not have any significant effect on our ability to achieve that.
We felt our Basic plan was underpriced and Plus plan was overpriced.
These changes reduce the price difference between them.&lt;/p&gt;

&lt;p&gt;If you have questions about the changes or about pricing in general,
please contact our sales team at &lt;a href="mailto:sales@gitlab.com."&gt;sales@gitlab.com.&lt;/a&gt;&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Did you install GitLab from source? Check your Git version</title><link href="http://ciandcd.github.io/ciandcd-web/did-you-install-gitlab-from-source-check-your-git-version.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/did-you-install-gitlab-from-source-check-your-git-version.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/12/did-you-install-gitlab-from-source-recently-check-your-git-version/"&gt;https://www.gitlab.com/2015/06/12/did-you-install-gitlab-from-source-recently-check-your-git-version/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Did you install GitLab from source? Check your Git version&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;Although the preferred way to install GitLab is to use our &lt;a https: www.gitlab.com downloads&gt;omnibus
packages&lt;/a&gt;, you can also install GitLab Community Edition or
Enterprise Edition &amp;#8216;from source&amp;#8217;. If you used this installation method, and if
you compiled Git from source in the process then please check whether your Git
version defends against Git vulnerability CVE-2014-9390. This issue does not
apply to our Omnibus packages (DEB or RPM).&lt;/p&gt;

 


&lt;p&gt;Although &lt;a https: www.gitlab.com 2014 12 19 gitlab-not-affected-by-cve-2014-9390-git-vulnerability /&gt;GitLab itself is not affected by
CVE-2014-9390&lt;/a&gt;,
a GitLab server may be used to deliver &amp;#8216;poisoned&amp;#8217; Git repositories to users on
vulnerable systems. Upgrading Git on your GitLab server stops users from
pushing poisoned repositories to your GitLab server.&lt;/p&gt;

&lt;p&gt;Due to an oversight, the &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/installation.md"&gt;guide for installing GitLab from
source&lt;/a&gt;
still contained instructions telling administrators to install Git 2.1.2 if the
version of Git provided by their Linux distribution was too old. Git 2.1.2 does
not defend against CVE-2014-9390.&lt;/p&gt;

&lt;p&gt;If your GitLab server uses &lt;code&gt;/usr/local/bin/git&lt;/code&gt; please check your Git version
using the instructions in this &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/7.11-to-7.12.md#0-double-check-your-git-version"&gt;upgrade
guide&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Feature Highlight: Approve Merge Request</title><link href="http://ciandcd.github.io/ciandcd-web/feature-highlight-approve-merge-request.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/feature-highlight-approve-merge-request.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/16/feature-highlight-approve-merge-request/"&gt;https://www.gitlab.com/2015/06/16/feature-highlight-approve-merge-request/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Feature Highlight: Approve Merge Request&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;With less than a week until GitLab 7.12, we&amp;#8217;ve got a nice preview for you today:
Merge Request Approvals in GitLab EE.&lt;/p&gt;

&lt;p&gt;Usually you accept a merge request the moment it is ready and reviewed.
But in some cases you want to make sure that every merge request is reviewed
and signed off by several people before merging it.
With GitLab Enterprise Edition 7.12, you can enforce such a workflow
that requires multiple reviewers with the new Merge Request Approval feature.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/feature_approval/mr.png" alt="approve_merge_request"&gt;&lt;/p&gt;

 


&lt;p&gt;To enable approvals, go to project settings page and set the
&amp;#8220;Approvals required&amp;#8221; field to a numeric value. For example, if you set it to &lt;code&gt;3&lt;/code&gt;
each merge request has to receive 3 approvals from different people
before it can be merged through the user interface.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/feature_approval/settings.png" alt="approve_setting"&gt;&lt;/p&gt;

&lt;p&gt;After setting the approval, you will see an &lt;code&gt;Approve&lt;/code&gt; button on merge requests,
rather than an &lt;code&gt;Accept&lt;/code&gt; button. Once the merge request has enough approvals,
you will be able to merge it as usual.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;d love to hear what you think of this new feature in the comments below.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Filter Pull Requests by Status · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/filter-pull-requests-by-status-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/filter-pull-requests-by-status-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2014-filter-pull-requests-by-status"&gt;https://github.com/blog/2014-filter-pull-requests-by-status&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;When we shipped &lt;a href="https://github.com/blog/1866-the-new-github-issues"&gt;the new GitHub Issues&lt;/a&gt;, we made it easy to &lt;a href="https://help.github.com/articles/searching-issues/"&gt;scope lists of Issues and Pull Requests&lt;/a&gt; with filters like author, date, mentions, and team mentions. With the new &lt;code&gt;status:&lt;/code&gt; filter you can now filter the Pull Requests in your repositories by &lt;a href="https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref"&gt;combined status&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/483/7819956/1422929e-039a-11e5-98d5-f273b9fe4472.gif" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/483/7819956/1422929e-039a-11e5-98d5-f273b9fe4472.gif" alt="example gif of filtering by status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're taking advantage of the &lt;a href="https://developer.github.com/v3/repos/statuses/"&gt;Status API&lt;/a&gt;, or using an integration that does, try out the new filters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;status:success&lt;/code&gt; Only pull requests with all successful statuses&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status:failure&lt;/code&gt; Only pull requests that have statuses in the &lt;code&gt;failure&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; state&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status:pending&lt;/code&gt; Only pull requests with no statuses or at least one status in the &lt;code&gt;pending&lt;/code&gt; state&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;</content></entry><entry><title>Finding the ‘Needle in a Haystack’ with Helix Threat Detection</title><link href="http://ciandcd.github.io/ciandcd-web/finding-the-needle-in-a-haystack-with-helix-threat-detection.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/finding-the-needle-in-a-haystack-with-helix-threat-detection.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150617/finding-%E2%80%98needle-haystack%E2%80%99-helix-threat-detection"&gt;http://www.perforce.com/blog/150617/finding-%E2%80%98needle-haystack%E2%80%99-helix-threat-detection&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Software development projects in bigger companies typically involve large teams collaborating across multiple locations. A large corporation may employ tens of thousands of developers working on thousands of projects over a span of many years.&amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/needle-in-haystack-blog.jpg"&gt;&lt;/p&gt;
&lt;p&gt;For many companies, developer access to older software projects and files may continue long after the project has been completed, sometimes because of lax processes and stagnant access control policies. Yet, these projects can represent valuable IP worth tens of millions of dollars. In light of the ramifications of a competitor getting ahold of these files, what can companies do to better protect their crown jewels from theft?&lt;/p&gt;
&lt;p&gt;The answer might be found in the source code management (SCM) or version control tools companies use to drive their development workflows. SCM tools typically track access to key projects and files via audit logs. However, the sheer volume of these logs can overwhelm security teams. A month of log data might yield millions of different interactions with files and projects, making it virtually impossibe to find important clues.&lt;/p&gt;
&lt;p&gt;Done the right way, however, this approach can bring the real threats to the surface. A recent Fortune article entitled&amp;#160;&lt;a href="http://www.forbes.com/sites/benkepes/2015/03/27/using-log-data-and-machine-learning-to-weed-out-the-bad-guys/"&gt;Using Log Data and Machine Learning to Weed out the Bad&amp;#160;Guys&lt;/a&gt;&amp;#160;shares how a large company&amp;#160;applied our Helix Threat Detection capabilities to quickly identify data theft. Likening this approach to &amp;#8216;finding a needle in a haystack,&amp;#8217; the article describes how effective it can be to apply&amp;#160;behavioral analytics to the audit logs in our Helix Versioning Engine.&amp;#160;&lt;/p&gt;
&lt;h4&gt;Leveraging Machine Learning to Establish a Baseline&lt;/h4&gt;
&lt;p&gt;Conventional security tools (e.g., SIEMs) are often rule-based and require time-consuming manual setting of thresholds and iterative tuning of multiple parameters in order to identify anomalous behavior. Yet manually setting alerts to trigger when developers access an arbitrary number of files may be problematic for large projects and can inundate security teams with too many false positives.&lt;/p&gt;
&lt;p&gt;A better approach is to use machine-learning algorithms and risk-based-behavior-analytics models to audit logs to first establish a baseline understanding of normal behavior. It&amp;#8217;s possible to create cluster models that group similar users based on their past activities. Continuous self-learning more accurately identifies high-risk events, like someone accessing a project he or she doesn't normally work on, putting a spotlight on threats to an organization&amp;#8217;s most sensitive assets.&lt;/p&gt;
&lt;h4&gt;Identifying High-Risk Behaviors&lt;/h4&gt;
&lt;p&gt;Once you've establised what's normal behavior, the next step is to apply advanced mathematical models that generate a behavioral risk score. This score represents multiple factors, including the importance of an asset or file, the method of access, the activity (e.g., volume or type), and the user. These behavioral analytics models can then be used to find anomalies by:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Comparing access patterns, data usage patterns and data movement patterns against historic behavior&lt;/li&gt;
&lt;li&gt;Determining similar user patterns across the environment and comparing behavioral patterns between users and groups of users&lt;/li&gt;
&lt;li&gt;Detecting dissimilar patterns among members of the same project group or job role&lt;/li&gt;
&lt;li&gt;Comparing individuals against the entire user group&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To learn more about the behavioral analytics models used in Helix Threat Detection, download the white paper&amp;#160;&lt;a href="http://info.perforce.com/whitepaper-helix-threat-detection.html"&gt;Helix Threat Detection: IP Security and Risk Analytics.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To learn more download our white paper:&lt;br&gt;A Unified Approach to Securing and Protecting IP.&lt;/p&gt;
&lt;a href="http://info.perforce.com/whitepaper-secure-protect-ip-ty.html"&gt;READ NOW&lt;/a&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Focus on your changes in GitHub for Windows · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/focus-on-your-changes-in-github-for-windows-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/focus-on-your-changes-in-github-for-windows-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2015-focus-on-your-changes-in-github-for-windows"&gt;https://github.com/blog/2015-focus-on-your-changes-in-github-for-windows&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;GitHub for Windows now makes it even easier to see everything local to your machine, whether it's uncommitted changes or commits you haven't synced yet.&lt;/p&gt;

&lt;p&gt;One of the things you'll notice when creating commits is the new, compact list of changed files in your working directory. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/634063/7920112/0f2085a0-089d-11e5-804b-d42eff5b5987.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/634063/7920112/0f2085a0-089d-11e5-804b-d42eff5b5987.png" alt="Dedicated view of your local changes"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;GitHub for Windows shows the number of files that a commit changed and lets you drill down to see what changed in a given file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/634063/7920127/295d7c3e-089d-11e5-9209-8592a431a208.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/634063/7920127/295d7c3e-089d-11e5-9209-8592a431a208.png" alt="Commit lists now show number of files and lets you select individual files to view changes for"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The updated branch selector now groups your recently used branches so that you can jump straight back in to what you were doing before that pesky hotfix distracted you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/634063/7920242/011e3d8e-089e-11e5-972c-c9c5ca5ff386.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/634063/7920242/011e3d8e-089e-11e5-972c-c9c5ca5ff386.png" alt="New branch selector lets you see recently checked out branches"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We've given branch creation a dedicated place in the toolbar. As a bonus, you can pick which branch to base the new one off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/634063/7920243/0122381c-089e-11e5-9d52-d82b168d49f4.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/634063/7920243/0122381c-089e-11e5-9d52-d82b168d49f4.png" alt="The new create branch popover lets you pick which base branch to use for your new branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you can collapse the repository list to reclaim some screen space.&lt;/p&gt;

&lt;p&gt;If you have GitHub for Windows installed it will automatically update to the latest version. If you don't have it installed, download GitHub for Windows from &lt;a href="https://windows.github.com"&gt;windows.github.com&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>GitLab 7.10.4 released</title><link href="http://ciandcd.github.io/ciandcd-web/gitlab-7104-released.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/gitlab-7104-released.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/05/11/gitlab-7-dot-10-dot-4-released/"&gt;https://www.gitlab.com/2015/05/11/gitlab-7-dot-10-dot-4-released/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab 7.10.4 released&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;Last week we had to pull our 7.10.2 release as in a small number of installations
the migrations would fail because of a uniqueness constraint on tags. We
did not release GitLab 7.10.3, as we improved a migration after creating
the 7.10.3 version tag and wanted to include that in our patch release.&lt;/p&gt;

&lt;p&gt;Today we release GitLab 7.10.4 which solves the issues with the migrations
and contains all fixes also present in 7.10.2. If you&amp;#8217;ve already successfully
upgraded to 7.10.2, you do not need to update at this time.&lt;/p&gt;

&lt;p&gt;The fixes in this patch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix migrations broken in 7.10.2&lt;/li&gt;
&lt;li&gt;Add missing indices to tags for some installations&lt;/li&gt;
&lt;li&gt;Make tags for GitLab installations running on MySQL case sensitive&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And the following were fixed with 7.10.2, also included here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bug when using the Gitorious importer&lt;/li&gt;
&lt;li&gt;A bug that prevented adding group members through the admin screen&lt;/li&gt;
&lt;li&gt;Broken links on the merge request page leading to CI services&lt;/li&gt;
&lt;li&gt;A 500 error when trying to search in the wiki&lt;/li&gt;
&lt;li&gt;A 500 error when trying to add new tags to a project&lt;/li&gt;
&lt;li&gt;A bug where commit data would not appear in some subdirectories due to escaped slashes&lt;/li&gt;
&lt;li&gt;A bug where branches with escaped characters in their names would not always work
in the compare view&lt;/li&gt;
&lt;/ul&gt;


 


&lt;h2&gt;Upgrade barometer&lt;/h2&gt;

&lt;p&gt;There is a migration that loops through all tags.
This can take a while for larger installations.&lt;/p&gt;

&lt;p&gt;The upgrade can be performed online.&lt;/p&gt;

&lt;p&gt;Theoretically, there is a small chance that if a tag is created during
the &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/db/migrate/20150425164649_add_taggings_counter_cache_to_tags.acts_as_taggable_on_engine.rb"&gt;migration&lt;/a&gt;
of that specific tag, the tag counter gets a value that is
slightly higher or lower than its actual value. We do not believe this
is reason to schedule downtime and recommend performing the upgrade online.&lt;/p&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;p&gt;To update, check out our &lt;a href="https://about.gitlab.com/update"&gt;update page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Enterprise Edition&lt;/h2&gt;

&lt;p&gt;Omnibus packages for GitLab Enterprise Edition 7.10.4 are available for subscribers &lt;a href="https://gitlab.com/subscribers/gitlab-ee/blob/master/doc/install/packages.md"&gt;here&lt;/a&gt;. For installations from source, use &lt;a href="https://gitlab.com/subscribers/gitlab-ee/blob/master/doc/update/patch_versions.md"&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interested in GitLab Enterprise Edition?
For an overview of feature exclusive to GitLab Enterprise Edition please have a look at the &lt;a href="http://about.gitlab.com/features/#enterprise"&gt;features exclusive to GitLab EE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access to GitLab Enterprise Edition is included with a &lt;a href="http://www.gitlab.com/subscription/"&gt;subscription&lt;/a&gt;.
No time to upgrade GitLab yourself?
A subscription also entitles to our upgrade and installation services.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>GitLab 7.10.5 released</title><link href="http://ciandcd.github.io/ciandcd-web/gitlab-7105-released.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/gitlab-7105-released.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/05/27/gitlab-7-dot-10-dot-5-released/"&gt;https://www.gitlab.com/2015/05/27/gitlab-7-dot-10-dot-5-released/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab 7.10.5 released&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;In GitLab 7.11 we have &lt;a href="https://about.gitlab.com/2015/05/22/gitlab-7-11-released/"&gt;introduced&lt;/a&gt;
the requirement of a license key for users of GitLab Enterprise Edition.&lt;/p&gt;

&lt;p&gt;This can cause a moment of downtime when upgrading, as you will need to upload
the license key before being able to push to the GitLab instance.&lt;/p&gt;

&lt;p&gt;With this patch release we&amp;#8217;re adding a license upload functionality that allows
you to upload your license in GitLab 7.10.5, preventing downtime when upgrading
to GitLab 7.11 Enterprise Edition.&lt;/p&gt;

&lt;p&gt;This patch release also includes a fix for GitLab Annex and patches a MySQL
vulnerability in GitLab CI.&lt;/p&gt;

&lt;p&gt;If you are not using GitLab Enterprise Edition,
you can skip this patch and go straight to &lt;a href="https://about.gitlab.com/2015/05/22/gitlab-7-11-released/"&gt;GitLab 7.11&lt;/a&gt;.&lt;/p&gt;

 


&lt;h2&gt;Upgrade barometer&lt;/h2&gt;

&lt;p&gt;This is a minor update, without any migrations.
No downtime is necessary.&lt;/p&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;p&gt;To update, check out our &lt;a href="https://about.gitlab.com/update"&gt;update page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As Enterprise Edition user, if you want to update to 7.10.5 rather than straight to 7.11,
download and install the Omnibus package
&lt;a href="https://gitlab.com/subscribers/gitlab-ee/blob/master/doc/install/packages.md"&gt;at the old download location, here.&lt;/a&gt;.
For installations from source, use &lt;a href="https://gitlab.com/subscribers/gitlab-ee/blob/master/doc/update/patch_versions.md"&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Enterprise Edition&lt;/h2&gt;

&lt;p&gt;Interested in GitLab Enterprise Edition?
For an overview of feature exclusive to GitLab Enterprise Edition please have a look at the &lt;a href="http://about.gitlab.com/features/#enterprise"&gt;features exclusive to GitLab EE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access to GitLab Enterprise Edition is included with a &lt;a href="http://www.gitlab.com/pricing"&gt;subscription&lt;/a&gt;.
No time to upgrade GitLab yourself?
A subscription also entitles to our upgrade and installation services.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>GitLab 7.11 released with Two-factor Authentication and a publicly viewable Enterprise Edition</title><link href="http://ciandcd.github.io/ciandcd-web/gitlab-711-released-with-two-factor-authentication-and-a-publicly-viewable-enterprise-edition.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/gitlab-711-released-with-two-factor-authentication-and-a-publicly-viewable-enterprise-edition.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/05/22/gitlab-7-11-released/"&gt;https://www.gitlab.com/2015/05/22/gitlab-7-11-released/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;It&amp;#8217;s the 22nd of the month, so we have a new GitLab release ready!
GitLab 7.11 brings more improvements to the look and feel of GitLab,
two-factor authentication, a version check and more!&lt;/p&gt;

&lt;p&gt;Of course we&amp;#8217;re also releasing GitLab CI 7.11, with a new backup and restore
utility, improvements in the UI and other new features.&lt;/p&gt;

&lt;p&gt;This month&amp;#8217;s MVP is &lt;a href="http://jamesnewton.com/"&gt;James Newton&lt;/a&gt; (newton on IRC)!
James is very active on our &lt;code&gt;#gitlab&lt;/code&gt; IRC channel, often helping people out
with issues or helping people getting started with GitLab. We&amp;#8217;re very
happy to have James supporting the community and believe that is deserving
of a MVP award!
Thanks James!&lt;/p&gt;

 


&lt;h2&gt;Better looking sidebar&lt;/h2&gt;

&lt;p&gt;We changed the look of the sidebar to reflect its function better and make it look
more pretty:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/sidebar.png" alt="The new sidebar in GitLab 7.11"&gt;&lt;/p&gt;

&lt;h2&gt;Clean project dashboard&lt;/h2&gt;

&lt;p&gt;The project dashboard was a good example of design by committee, one GitLab
contributor noted. We broomed through it and cleaned it up:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/project.png" alt="Project Dashboard in GitLab 7.11"&gt;&lt;/p&gt;

&lt;h2&gt;Two-factor authentication&lt;/h2&gt;

&lt;p&gt;Keep your code more secure and start using two-factor authentication (2FA)!
GitLab has built-in 2FA in both CE and EE now and makes use of the convenient
Google Authenticator.&lt;/p&gt;

&lt;p&gt;All you have to do is go to your Profile &amp;gt; Account and scan the QR code using
Google&amp;#8217;s app.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/2fa.png" alt="two-factor authentication"&gt;&lt;/p&gt;

&lt;p&gt;From now on, on login you&amp;#8217;ll be required to provide the code the app gives you
for GitLab. Two-factor authentication only works with the web-UI for now.&lt;/p&gt;

&lt;h2&gt;User roles in comments&lt;/h2&gt;

&lt;p&gt;Now you know who&amp;#8217;s who in your favorite project. On comments you will see
the role of the person in that project:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/roles.png" alt="not an actual conversation"&gt;&lt;/p&gt;

&lt;h2&gt;Task lists everywhere&lt;/h2&gt;

&lt;p&gt;Want a task list in the comments? Now you can!&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/task.png" alt="Task list in comments"&gt;&lt;/p&gt;

&lt;h2&gt;Version Check&lt;/h2&gt;

&lt;p&gt;GitLab releases a new version every single month on the 22nd, so we understand
that people are not always up to date. We wanted to give you some help with
this, so from now on you can quickly see which version of GitLab you have running
by visiting the Help or Admin page. It will show if you are up to date and
if there is a security release you should have installed.&lt;/p&gt;

&lt;p&gt;Read more about the version check in our &lt;a href="https://about.gitlab.com/2015/05/07/version-check/"&gt;blog post about it.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can turn off the version check under Admin &amp;gt; Settings.&lt;/p&gt;

&lt;h2&gt;License keys for Enterprise Edition&lt;/h2&gt;

&lt;p&gt;GitLab Enterprise Edition used to live in a private repository, which was fine up
until now. However, with the addition of our package server, we want
to make it easier to start using GitLab Enterprise Edition.&lt;/p&gt;

&lt;p&gt;Rather than locking up the package repository of GitLab EE, we decided to
open up all the code and &lt;a href="https://packages.gitlab.com/gitlab/gitlab-ee"&gt;packages&lt;/a&gt; and start using license keys. The code
is still proprietary, but now is &lt;a href="https://gitlab.com/gitlab-org/gitlab-ee/"&gt;publicly viewable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This has several advantages. The installation of GitLab EE becomes as easy as
installing GitLab CE. You no longer needs access to specific repositories,
rather you can download it using the same methods as CE (including AWS/Azure templates, Docker images, etc).&lt;/p&gt;

&lt;p&gt;In addition, the code for Enterprise Edition is now becoming open to inspect
for everyone. This will make it easier to send enhancements and makes it easier
to do a trial of Enterprise Edition.&lt;/p&gt;

&lt;p&gt;Getting organizations to purchase a subscription after their trial expires or
at renewal time sometimes took a substantial effort from us.
We don&amp;#8217;t want to raise prices for customers that renew without prompting because
we need to invest more time in unresponsive customers.
Therefore we decided to introduce license keys that prompt customers automatically.
We regret the inconvenience that license keys introduce
but we think it is the best solution to keep prices low.&lt;/p&gt;

&lt;h2&gt;True-up model for subscriptions&lt;/h2&gt;

&lt;p&gt;The worst thing about license keys is that they can be very inflexible.
Most GitLab installations quickly grow in popularity within the organization.
Having to purchase a new license key every time this happens is very inefficient.
Also, we noticed that the majority of our customers didn&amp;#8217;t have a compliant subscription, for us this indicates that having to renew the subscription multiple times a year is very inconvenient.&lt;/p&gt;

&lt;p&gt;Therefore we will switch to a true-up model that allows you to grow now and pay later.
When you get a new license you should get it for your current number of active users.
For users that are added during the year you pay half price when you renew.&lt;/p&gt;

&lt;p&gt;So if you have 100 active users today you get a 100 user subscription.
Suppose that when you renew a year from now you have 300 active users.
You pay for a 300 user subscription and pay half a year for the 200 users that you added during the year.&lt;/p&gt;

&lt;h3&gt;Getting the license key&lt;/h3&gt;

&lt;p&gt;If you are currently a GitLab customer, you should have received your license
key already at the email you registered with your payment. You can also email
&lt;code&gt;sales at gitlab dot com&lt;/code&gt; to request it at any time.&lt;/p&gt;

&lt;p&gt;New subscribers will receive their license key automatically.&lt;/p&gt;

&lt;h3&gt;Installing the license key&lt;/h3&gt;

&lt;p&gt;To install the license, vist &lt;code&gt;/admin/license&lt;/code&gt; in your GitLab instance as an
admin. Here you can upload your &lt;code&gt;.gitlab-license&lt;/code&gt; file, which will instantly
unlock GitLab Enterprise Edition.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/license.png" alt="Installing your license"&gt;&lt;/p&gt;

&lt;p&gt;You can also download and review your current license here.&lt;/p&gt;

&lt;p&gt;Please note that we will release GitLab 7.10.5 soon, that will allow you to
upload the license key to your GitLab instance before upgrading, to avoid
unnecessary downtime.&lt;/p&gt;

&lt;h2&gt;Two-Factor Authentication for LDAP / Active Directory (EE-only)&lt;/h2&gt;

&lt;p&gt;Want to use two-factor authentication together with your LDAP or Active Directory
integration? With GitLab Enterprise Edition you can.&lt;/p&gt;

&lt;h2&gt;New GitLab CI Features&lt;/h2&gt;

&lt;p&gt;With the release of GitLab 7.11, we also updated GitLab CI to 7.11.
Some changes worth mentioning are an improved runners page,
public accessible build and commit pages for public projects
, a new backup/restore utility that will backup your CI database and
HipChat notifications!&lt;/p&gt;

&lt;h2&gt;Other awesome changes in GitLab CE&lt;/h2&gt;

&lt;p&gt;We can never cover all the new stuff in each GitLab release, but these
are worth to have a quick look at as well:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick quote-reply&lt;/strong&gt; You can now reply with a quotation by simply selecting text in an issue
or merge request and pressing &lt;code&gt;r&lt;/code&gt;. It will set the focus to the editing window
and have the quoted text already in it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atom feeds for all!&lt;/strong&gt; There is now an atom feed for each project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Settings in admin UI&lt;/strong&gt; We moved default project and snippet visibility settings
to the admin web interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improved UI for mobile&lt;/strong&gt; GitLab is now better viewable on mobile!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WIP your MRs!&lt;/strong&gt; If you add &lt;code&gt;WIP&lt;/code&gt; or &lt;code&gt;[WIP]&lt;/code&gt; (work in progress) to the start of the title of a merge request,
it will be protected from merging now.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/wip.png" alt="WIP blocking the merge request of this blog post!"&gt;&lt;/p&gt;

&lt;p&gt;This release has more improvements, including security fixes, please check out &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/CHANGELOG"&gt;the Changelog&lt;/a&gt; to see the all named changes.&lt;/p&gt;

&lt;h2&gt;Upgrade barometer&lt;/h2&gt;

&lt;p&gt;Coming from 7.10, the migrations in 7.11 are pretty fast (under 1 minute), but one of them is tricky:
we rename any existing users with names ending in a period (&amp;#8216;.&amp;#8217;).
This migration updates both the database and the filesystem and previous versions
of this migration have proven to be fragile.&lt;/p&gt;

&lt;p&gt;If you have no user namespaces with paths ending in &amp;#8216;.&amp;#8217; in your database and if you trust your users not to
create any until after you upgrade to GitLab 7.11 you can perform this upgrade online.
If not, we recommend to take downtime (this is what we did for gitlab.com).
You can find the current number of affected database records with the following command:&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt; sudo gitlab-rails runner "puts Namespace.where(type: nil).where(%q{path LIKE '%.'}).count"&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;




&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;If you are setting up a new GitLab installation please see the &lt;a href="https://www.gitlab.com/installation/"&gt;installing GitLab page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;p&gt;Check out our &lt;a href="https://about.gitlab.com/update/"&gt;update page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please note that cookbook-omnibus-gitlab, our Chef cookbook that installs/manages GitLab omnibus packages,
does not yet support packages.gitlab.com. See &lt;a href="https://gitlab.com/gitlab-org/cookbook-omnibus-gitlab/issues/8"&gt;this issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Enterprise Edition&lt;/h2&gt;

&lt;p&gt;The mentioned EE-only features and things like LDAP group support can be found in GitLab Enterprise Edition.
For a complete overview please have a look at the &lt;a href="http://www.gitlab.com/gitlab-ee/"&gt;feature list of GitLab EE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access to GitLab Enterprise Edition is included with a &lt;a href="http://www.gitlab.com/pricing/"&gt;subscription&lt;/a&gt;.
No time to upgrade GitLab yourself?
A subscription also entitles you to our upgrade and installation services.&lt;/p&gt;



                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>GitLab 7.11.4 released</title><link href="http://ciandcd.github.io/ciandcd-web/gitlab-7114-released.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/gitlab-7114-released.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/05/28/gitlab-7-dot-11-dot-4-released/"&gt;https://www.gitlab.com/2015/05/28/gitlab-7-dot-11-dot-4-released/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab 7.11.4 released&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We&amp;#8217;ve released GitLab 7.11.4 for GitLab CE, EE and CI.&lt;/p&gt;

&lt;p&gt;It includes the following fixes for CE and EE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix rendering of list bullets&lt;/li&gt;
&lt;li&gt;Force a &lt;code&gt;rel="nofollow"&lt;/code&gt; attribute on all external links in markdown&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For GitLab Enterprise Edition this patch release also fixes a bug in
git-annex. This fix was also included in the (unannounced) 7.11.3 patch.&lt;/p&gt;

 


&lt;h2&gt;Upgrade barometer&lt;/h2&gt;

&lt;p&gt;This is a minor update, without any migrations.
No downtime is necessary.&lt;/p&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;p&gt;To update, check out our &lt;a href="https://about.gitlab.com/update"&gt;update page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Enterprise Edition&lt;/h2&gt;

&lt;p&gt;Interested in GitLab Enterprise Edition?
For an overview of feature exclusive to GitLab Enterprise Edition please have a look at the &lt;a href="http://about.gitlab.com/features/#enterprise"&gt;features exclusive to GitLab EE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access to GitLab Enterprise Edition is included with a &lt;a href="http://www.gitlab.com/pricing"&gt;subscription&lt;/a&gt;.
No time to upgrade GitLab yourself?
A subscription also entitles to our upgrade and installation services.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>GitLab, Gitorious, and Free Software</title><link href="http://ciandcd.github.io/ciandcd-web/gitlab-gitorious-and-free-software.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/gitlab-gitorious-and-free-software.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/05/20/gitlab-gitorious-free-software/"&gt;https://www.gitlab.com/2015/05/20/gitlab-gitorious-free-software/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab, Gitorious, and Free Software&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;This is a guest post by &lt;a href="http://mikegerwitz.com/"&gt;Mike Gerwitz&lt;/a&gt;, a &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;free software&lt;/a&gt; hacker and
 activist, and author of &lt;a href="https://gnu.org/software/easejs"&gt;GNU ease.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In early March of this year, it was announced that
&lt;a href="https://about.gitlab.com/2015/03/03/gitlab-acquires-gitorious/"&gt;GitLab would acquire Gitorious&lt;/a&gt; and shut down &lt;code&gt;gitorious.org&lt;/code&gt; by 1
June, 2015.  &lt;a href="https://news.ycombinator.com/item?id=9138419"&gt;Reactions from the community&lt;/a&gt; were mixed, and
understandably so: while GitLab itself is a formidable alternative to wholly
proprietary services, its acquisition of Gitorious strikes a chord with the
free software community that gathered around Gitorious in the name of
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;software freedom&lt;/a&gt;.&lt;/p&gt;

 


&lt;p&gt;After hearing that announcement,
&lt;a href="http://mikegerwitz.com/"&gt;as a free software hacker and activist myself&lt;/a&gt;, I was naturally
uneasy.  Discussions of alternatives to Gitorious and GitLab ensued on the
&lt;a href="https://lists.gnu.org/mailman/listinfo/libreplanet-discuss"&gt;&lt;code&gt;libreplanet-discuss&lt;/code&gt;&lt;/a&gt; mailing list.  Sytse Sijbrandij (GitLab
B.V. CEO) happened to be present on that list;
&lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-03/msg00075.html"&gt;I approached him very sternly&lt;/a&gt; with a number of concerns, just as I
would with anyone that I feel does not understand certain aspects of the
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;free software philosophy&lt;/a&gt;.  To my surprise, this was not the case at
all.&lt;/p&gt;

&lt;p&gt;Sytse has spent a lot of time accepting and considering community input for
both the Gitorious acquisition and GitLab itself.  He has also worked with
me to address some of the issues that I had raised.  And while these issues
won&amp;#8217;t address everyone&amp;#8217;s concerns, they do strengthen GitLab&amp;#8217;s commitment to
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;software freedom&lt;/a&gt;, and are commendable.&lt;/p&gt;

&lt;p&gt;I wish to share some of these details here; but to do so, I first have to
provide some background to explain what the issues are, and why they are
important.&lt;/p&gt;

&lt;h2&gt;Free Software Ideology&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gitorious.org/"&gt;Gitorious&lt;/a&gt; was (and still is) one of the most popular Git repository
hosts, and largely dominated until the introduction of GitHub.  But even as
users flocked to &lt;a href="http://mikegerwitz.com/about/githubbub"&gt;GitHub&amp;#8217;s proprietary services&lt;/a&gt;, users who value freedom
continued to support Gitorious, both on &lt;code&gt;gitorious.org&lt;/code&gt; and by installing
their own instances on their own servers.  Since Gitorious is
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;free software&lt;/a&gt;, users are free to study, modify, and share it with
others.  But &lt;a href="https://www.gnu.org/philosophy/who-does-that-server-really-serve.html"&gt;software freedom does not apply to Services as a
Software Substitute (SaaSS)&lt;/a&gt; or remote services&amp;#8212;you cannot apply the
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;four freedoms&lt;/a&gt; to something that you do not yourself possess&amp;#8212;so why do
users still insist on using &lt;code&gt;gitorious.org&lt;/code&gt; despite this?&lt;/p&gt;

&lt;p&gt;The matter boils down to supporting a philosophy:  The
&lt;a href="https://www.gnu.org/licenses/gpl.html"&gt;GNU General Public License (GPL)&lt;/a&gt; is a license that turns copyright on
its head: rather than using copyright to restrict what users can do with a
program, the GPL instead &lt;a href="https://www.gnu.org/licenses/quick-guide-gplv3.html"&gt;ensures users' freedoms&lt;/a&gt; to study, modify, and
share it.  But that isn&amp;#8217;t itself enough: to ensure that the software always
remains free (as in freedom), the GPL ensures that all derivatives are
also licensed under similar terms.  This is known as &lt;a href="https://www.gnu.org/philosophy/pragmatic.html"&gt;copyleft&lt;/a&gt;, and it
is vital to the free software movement.&lt;/p&gt;

&lt;p&gt;Gitorious is licensed under the
&lt;a href="https://www.gnu.org/licenses/agpl.html"&gt;GNU Affero General Public License Version 3 (AGPLv3)&lt;/a&gt;&amp;#8212;this takes the
&lt;a href="https://www.gnu.org/licenses/gpl.html"&gt;GPL&lt;/a&gt; and adds an additional requirement: if a modified version of the
program is run on a sever, users communicating with the program on that
server must have access to the modified program&amp;#8217;s source code.  This ensures
that &lt;a href="https://www.gnu.org/licenses/why-affero-gpl.html"&gt;modifications to the program are available to all users&lt;/a&gt;; they
would otherwise be hidden in private behind the server, with others unable
to incorporate, study, or share them.  The AGPLv3 is an ideal license for
Gitorious, since most of its users will only ever interact with it over a
network.&lt;/p&gt;

&lt;p&gt;GitLab is also free software: its &lt;a href="https://www.gnu.org/licenses/license-list.html#Expat"&gt;Expat license&lt;/a&gt; (commonly referred to
ambiguously as the &amp;#8220;MIT license&amp;#8221;) permits all of the same freedoms that
are granted under the the GNU GPL.  But it does so in a way that is highly
permissive: it permits relicensing under any terms, free or not.  In other
words, one can fork GitLab and derive a proprietary version from it, making
changes that deny users &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;their freedoms&lt;/a&gt; and cannot be incorporated back
into the original work.&lt;/p&gt;

&lt;p&gt;This is the issue that the free software community surrounding Gitorious has
a problem with: any changes contributed to GitLab could in turn benefit a
proprietary derivative.  This situation isn&amp;#8217;t unique to GitLab: it applies
to all non-copyleft (&amp;#8220;permissive&amp;#8221;) &lt;a href="https://www.gnu.org/licenses/license-list.html"&gt;free software licenses&lt;/a&gt;.  And this
issue is realized by GitLab itself in the form of its GitLab Enterprise
Edition (GitLab EE): a proprietary derivative that adds additional
features atop of GitLab&amp;#8217;s free Community Edition (CE).  For this reason,
many free software advocates are uncomfortable contributing to GitLab, and
feel that they should instead support other projects; this, in turn, means
not supporting GitLab by using and drawing attention to their hosting
services.&lt;/p&gt;

&lt;p&gt;The copyleft vs. permissive licensing debate is one of the free software
movement&amp;#8217;s most heated.  I do not wish to get into such a debate here.  One
thing is clear: GitLab Community Edition (GitLab CE) is free
software.  Richard Stallman (RMS) &lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-03/msg00095.html"&gt;responded directly to the thread on
&lt;code&gt;libreplanet-discuss&lt;/code&gt;&lt;/a&gt;, stating plainly:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; We have a simple way of looking at these two versions.  The free
 version is free software, so it is ethical.  The nonfree version is
 nonfree software, so it is not ethical.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does GitLab CE deserve attention from the free software community?  I
believe so.  Importantly, there is another strong consideration: displacing
proprietary services like GitHub and Bitbucket, which host a large number of
projects and users.  GitLab has a strong foothold, which is an excellent
place for a free software project to be in.&lt;/p&gt;

&lt;p&gt;If we are to work together as a community, we need to respect GitLab&amp;#8217;s
free licensing choices just as we expect GitLab to respect ours.  Providing
respect does not mean that you are conceding: I will never personally use a
non-copyleft license for my software; I&amp;#8217;m firmly rooted in my dedication to
the &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;free software philosophy&lt;/a&gt;, and I&amp;#8217;m sure that many other readers are
too.  But using a non-copyleft license, although many of us consider it to
be a weaker alternative, &lt;a href="https://www.fsf.org/blogs/rms/selling-exceptions"&gt;is not wrong&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Free JavaScript&lt;/h2&gt;

&lt;p&gt;As I mentioned above,
&lt;a href="https://www.gnu.org/philosophy/who-does-that-server-really-serve.html"&gt;software freedom and network services are separate issues&lt;/a&gt;&amp;#8212;the four
freedoms do not apply to interacting with &lt;code&gt;gitlab.com&lt;/code&gt; purely over a network
connection, for example, because you are not running its software on your
computer.  However, there is an overlap: JavaScript code downloaded to be
executed in your web browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gnu.org/philosophy/javascript-trap.html"&gt;Non-free JavaScript&lt;/a&gt; is a particularly nasty concern: it is software
that is downloaded automatically from a server&amp;#8212;often without prompting
you&amp;#8212;and then immediately executed.  Software is now being executed on your
machine, and &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;your four freedoms&lt;/a&gt; are once again at risk.  This, then,
&lt;a href="https://www.gnu.org/software/easejs/whyfreejs.html"&gt;is the primary concern&lt;/a&gt; for any users visiting &lt;code&gt;gitlab.com&lt;/code&gt;: not only
would this affect users that use &lt;code&gt;gitlab.com&lt;/code&gt; as a host, but it would also
affect any user that visits the website.  That would be a problem, since
hosting your project there would be inviting users to run proprietary
JavaScript.&lt;/p&gt;

&lt;p&gt;As I was considering migrating my projects to GitLab, this was the
&lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-04/msg00019.html"&gt;first concern I brought up to Sytse&lt;/a&gt;.  This problem arises because
&lt;code&gt;gitlab.com&lt;/code&gt; uses a GitLab EE instance: if it had used only its Community
Edition (GitLab CE)&amp;#8212;which is free software&amp;#8212;then all served JavaScript
would have been free.  But any scripts served by GitLab EE that are not
identical to those served by GitLab CE are proprietary, and therefore
unethical.  This same concern applies to GitHub, Bitbucket, and other
proprietary hosts that serve JavaScript.&lt;/p&gt;

&lt;p&gt;Sytse surprised me by stating that he would be willing to
&lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-04/msg00020.html"&gt;freely license all JavaScript in GitLab EE&lt;/a&gt;, and by offering to give
anyone access to the GitLab EE source code who wants to help out.  I took
him up on that offer.  Initially, I had submitted a patch to merge all
GitLab EE JavaScript into GitLab CE, but Sytse came up with another,
superior suggestion, that ultimately provided even greater reach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&amp;#8217;m pleased to announce that Sytse and I were able to agree on a license
change (with absolutely no friction or hesitation on his part) that
liberates all JavaScript served to the client from GitLab EE instances.&lt;/strong&gt;
There are two concerns that I had wanted to address: JavaScript code
directly written for the client, and any code that produced JavaScript as
output.  In the former case, this includes JavaScript derived from other
sources: for example, GitLab uses CoffeeScript, which compiles into
JavaScript.  The latter case is important: if there is any code that
generates fragments of JavaScript&amp;#8212;e.g. dynamically at runtime&amp;#8212;then that
code must also be free, or users would not be able to modify and share the
resulting JavaScript that is actually being run on the client.  Sytse
accepted my change verbatim, while adding his own sentence after mine to
disambiguate.  At the time of writing this post, GitLab EE&amp;#8217;s source code
isn&amp;#8217;t yet publicly visible, so here is the relevant snippet from its
&lt;code&gt;LICENSE&lt;/code&gt; file:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The above copyright notices applies only to the part of this Software that
is not distributed as part of GitLab Community Edition (CE), and that is
not a file that produces client-side JavaScript, in whole or in part. Any
part of this Software distributed as part of GitLab CE or that is a file
that produces client-side JavaScript, in whole or in part, is copyrighted
under the MIT Expat license.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Further Discussion&lt;/h2&gt;

&lt;p&gt;My discussions with Sytse did not end there: there are other topics that
have not been able to be addressed before my writing of this post that would
do well to demonstrate commitment toward &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;software freedom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The license change liberating client-side JavaScript was an excellent
move.  To expand upon it, I wish to submit a patch that would make GitLab
&lt;a href="https://www.gnu.org/software/librejs/free-your-javascript.html"&gt;LibreJS compliant&lt;/a&gt;; this provides even greater guarantees, since it
would allow for users to continue to block other non-free JavaScript that
may be served by the GitLab instance, but not produced by it.  For example:
a website/host that uses GitLab may embed proprietary JavaScript, or modify
it without releasing the source code.  Another common issue is the user of
analytics software; &lt;code&gt;gitlab.com&lt;/code&gt; uses Google Analytics.&lt;/p&gt;

&lt;p&gt;If you would like to help with LibreJS compliance, please &lt;a href="http://mikegerwitz.com/"&gt;contact me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was brought into another discussion between Sytse and RMS that is
unrelated to the GitLab software itself, but still a positive demonstration
of a commitment to &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;software freedom&lt;/a&gt;&amp;#8212;the replacement of Disqus on the
&lt;code&gt;gitlab.com&lt;/code&gt; blog with a free alternative.  Sytse ended up making a
suggestion, saying he&amp;#8217;d be &amp;#8220;happy to switch to&amp;#8221; &lt;a href="https://github.com/phusion/juvia"&gt;Juvia&lt;/a&gt; if I&amp;#8217;d help with
the migration.  I&amp;#8217;m looking forward to this, as it is an important
discussion area (that I honestly didn&amp;#8217;t know existed until Sytse told me
about it, because I don&amp;#8217;t permit proprietary JavaScript!).  He was even kind
enough to compile a PDF of comments for one of our discussions, since he was
cognizant ahead of time that I would not want to use Disqus.  (Indeed, I
will be unable to read and participate in the comments to this guest post
unless I take the time to freely read and reply without running Disqus'
proprietary JavaScript.)&lt;/p&gt;

&lt;p&gt;Considering the genuine interest and concern expressed by Sytse in working
with myself and the free software community, I can only expect that GitLab
will continue to accept and apply community input.&lt;/p&gt;

&lt;h2&gt;Actions Speak Louder Than Words&lt;/h2&gt;

&lt;p&gt;It is not possible to address the copyleft issue without a change in
license, which GitLab is not interested in doing.  So the best way to
re-assure the community is through action.  &lt;a href="https://news.ycombinator.com/item?id=9141801"&gt;To quote Sytse&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think the only way to prove we&amp;#8217;re serious about open source is in our
actions, licenses or statements don&amp;#8217;t help.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are fundamental disagreements that will not be able to be
resolved between GitLab and the free software community&amp;#8212;like their
&lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-03/msg00076.html"&gt;&amp;#8220;open core&amp;#8221; business model&lt;/a&gt;.  But after working with Sytse and seeing
his interactions with myself, RMS, and many others in the free software
community, I find his actions to be very encouraging.&lt;/p&gt;

&lt;p&gt;Are you interested in helping other websites liberate their JavaScript?
 Consider &lt;a href="https://fsf.org/campaigns/freejs"&gt;joining the FSF&amp;#8217;s campaign&lt;/a&gt;, and
 &lt;a href="https://www.gnu.org/software/easejs/whyfreejs.html"&gt;please liberate your own&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This post is licensed under the
 &lt;a href="http://creativecommons.org/licenses/by-sa/3.0/"&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>GitLab.com and Logjam</title><link href="http://ciandcd.github.io/ciandcd-web/gitlabcom-and-logjam.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/gitlabcom-and-logjam.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/17/gitlab-com-and-logjam/"&gt;https://www.gitlab.com/2015/06/17/gitlab-com-and-logjam/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab.com and Logjam&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We&amp;#8217;ve previously announced &lt;a href="https://about.gitlab.com/2015/05/21/security-advisory-for-logjam-vulnerability/"&gt;security advisory for Logjam vulnerability&lt;/a&gt;. In that announcement we&amp;#8217;ve mentioned that GitLab.com is using 1024-bit DH groups to retain compatibility with older Java-based clients.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve updated the default/recommended SSL ciphers for all GitLab installations and implemented new ciphers on GitLab.com.&lt;/p&gt;

 


&lt;p&gt;After some reasearch and testing we&amp;#8217;ve decided to change the SSL cipher suite served by the web server/load balancer.&lt;/p&gt;

&lt;p&gt;This decision was made after weighing on the trade-offs between having the stronger DH params and denying access to Java 6 based clients.&lt;/p&gt;

&lt;h4&gt;Using 2048-bit DHE params&lt;/h4&gt;

&lt;p&gt;Generating the 2048-bit DHE params was advised to help against the Logjam vulnerability. While this is a way to go for most servers, with GitLab.com we have to keep in mind that we have users using older Java-based clients.
Adopting the stronger params suites would prevent those users using GitLab.com completely.
Although the number of these users is not high, denying them access does not seem like an option.&lt;/p&gt;

&lt;h4&gt;Removing DHE suites&lt;/h4&gt;

&lt;p&gt;DHE suites have a couple of issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://community.qualys.com/blogs/securitylabs/2013/06/25/ssl-labs-deploying-forward-secrecy"&gt;DHE is slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not all browsers support all the necessary suites&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One advantage of having DHE together with ECDHE suites is that this allows forward secrecy to all clients.&lt;/p&gt;

&lt;p&gt;We then turned to investigating how others are handling this issue and we found out that, for example, Google sites mostly &lt;a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.google.com"&gt;do not have DHE suites in their configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this in mind we&amp;#8217;ve tried removing the DHE suites and the result was as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All major browsers and clients retain forward secrecy using ECDHE&lt;/li&gt;
&lt;li&gt;SSL labs score went from B to A&lt;/li&gt;
&lt;li&gt;There is no forward secrecy for Android 2.3.7, Java 6 and OpenSSL 0.9.8&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After considering the trade-offs, we&amp;#8217;ve decided to remove the DHE suites from our cipher suite on GitLab.com.&lt;/p&gt;

&lt;p&gt;Forward secrecy is now denied for Android 2.3.7, Java 6 and OpenSSL 0.9.8 but we suspect that number of users affected will be extremely low.&lt;/p&gt;

&lt;p&gt;We have also updated the recommended configurations for omnibus-gitlab packages and GitLab installation from source.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>GitLab.com outage on 2015-05-29</title><link href="http://ciandcd.github.io/ciandcd-web/gitlabcom-outage-on-2015-05-29.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/gitlabcom-outage-on-2015-05-29.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/04/gitlab-dot-com-outage-on-2015-05-29/"&gt;https://www.gitlab.com/2015/06/04/gitlab-dot-com-outage-on-2015-05-29/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab.com outage on 2015-05-29&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;GitLab.com suffered an outage from  2015-05-29 01:00 to 2015-05-29 02:34 (times in UTC).
In this blog post we will discuss what happened, why it took so long to recover the service, and what we are doing to reduce the likelihood and impact of such incidents.&lt;/p&gt;

 


&lt;h1&gt;Background&lt;/h1&gt;

&lt;p&gt;GitLab.com is provided and maintained by the team of GitLab B.V., the company behind GitLab.
On 2015-05-02 we performed a major infrastructure upgrade, moving GitLab.com from a single server to a small cluster of servers, consisting of a load balancer (running HAproxy), three workers (NGINX/Unicorn/Sidekiq/gitlab-shell) and a backend server (PostgreSQL/Redis/NFS).
This new infrastructure configuration improved the responsiveness of GitLab.com, at the expense of having more moving parts.&lt;/p&gt;

&lt;p&gt;GitLab.com is backed up using Amazon EBS snapshots.
To protect against inconsistent snapshots our backup script &amp;#8216;freezes&amp;#8217; the filesystem on the backend server with &lt;code&gt;fsfreeze&lt;/code&gt; prior to making EBS snapshots, and &amp;#8216;unfreezes&amp;#8217; the filesystem immediately after.&lt;/p&gt;

&lt;h1&gt;Timeline&lt;/h1&gt;

&lt;p&gt;Italic comments below are written with the knowledge of hindsight&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1:00 The GitLab.com backup script is activated by Cron on the backend server.
For unknown reasons, the backup script hangs/crashes before or during the &amp;#8216;unfreeze&amp;#8217; of the filesystem holding all user data.&lt;/li&gt;
&lt;li&gt;1:07 Our on-call engineer is paged by &lt;a href="http://status.gitlab.com"&gt;Pingdom&lt;/a&gt;.
The on-call engineer tries to diagnose the issue on the worker servers but is unable to diagnose the problem.
The issue was on the backend server, not on the workers.&lt;/li&gt;
&lt;li&gt;1:30 The on-call engineer decides to call in more help.
The other team members with access and knowledge to resolve the issue are all in Europe at this time, where it is 3:30/4:30am.&lt;/li&gt;
&lt;li&gt;1:45 A second engineer in Europe has been woken up and takes the lead on the investigation of the outage.
More workers are rebooted because they appear to be stuck.
It becomes apparent that the workers cannot mount the NFS share which holds all Git repository data.&lt;/li&gt;
&lt;li&gt;1:51 One of the engineers notices that the load on the backend server is more than 150. A normal value would be less than 5.&lt;/li&gt;
&lt;li&gt;2:10 The engineers give up on running commands on the workers to bring the NFS share back, and start investigating the backend server.
The engineers discuss whether they should reboot the backend server but they are unsure if it is safe given that this setup is fairly new.&lt;/li&gt;
&lt;li&gt;2:21 The engineers reboot the backend server.
The reboot is taking a long time.
The AWS &amp;#8216;reboot&amp;#8217; command first tries a soft reboot, and only does a hard reboot after a 4-minute timeout.
The soft reboot probably hung when it tried to shut down services that were trying to write to the &amp;#8216;frozen&amp;#8217; disk.&lt;/li&gt;
&lt;li&gt;2:30 The backend server has rebooted and the engineers regain SSH access to it.
The worker servers are able to mount the NFS share now but GitLab.com is still not functioning because the Postgres database server is not responding.
One of the engineers restarts Postgres on the backend server.
It may have been that Postgres was still busy performing crash recovery.&lt;/li&gt;
&lt;li&gt;2:34 Gitlab.com is available again.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Root causes&lt;/h1&gt;

&lt;p&gt;Although we cannot explain what went wrong with the backup script it is hard to come to another conclusion that something did go wrong with it.&lt;/p&gt;

&lt;p&gt;The length of the outage was caused by insufficient training and documentation for our on-call engineers following the infrastructure upgrade rolled out on May 2nd.&lt;/p&gt;

&lt;h1&gt;Next steps&lt;/h1&gt;

&lt;p&gt;We have removed the freeze/unfreeze steps from our backup script.
Because this (theoretically) increases the risk of occasional corrupt backups we have added a second backup strategy for our SQL data.
In the future we would like to have automatical validation of our GitLab.com backups.&lt;/p&gt;

&lt;p&gt;The day before this incident we decided the training was our most important priority.
We have started to do regular operations drills in one-on-one sessions with all of our on-call engineers.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Helix DVCS - How to Initialize Like a Pro</title><link href="http://ciandcd.github.io/ciandcd-web/helix-dvcs-how-to-initialize-like-a-pro.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/helix-dvcs-how-to-initialize-like-a-pro.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150610/helix-dvcs-initialization-tips-tricks"&gt;http://www.perforce.com/blog/150610/helix-dvcs-initialization-tips-tricks&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/title-tip-tricks9.png"&gt;&lt;/p&gt;
&lt;p&gt;We are all very excited about the new distributed version control system (DVCS)&amp;#160;capabilities of Perforce Helix. Here are a few tips for getting started.&lt;/p&gt;
&lt;p&gt;Keep in mind that in order to use Helix DVCS, you need to have the 2015.1 version of both Helix client P4 and Helix server P4D installed. Some of the commands (e.g., &lt;strong&gt;init&lt;/strong&gt; and &lt;strong&gt;clone&lt;/strong&gt;) are implemented in P4, so you need the latest version of both executables.&lt;/p&gt;
&lt;p&gt;The first thing you need to do when you want to use a local Helix server (called a personal server) is to run &amp;#8220;p4 init&amp;#8221;.&amp;#160; This command will create the personal server for you (in a subdirectory called .p4root) and set up the P4CONFIG and P4IGNORE files, as well.&lt;/p&gt;
&lt;p&gt;&amp;#8220;p4 init&amp;#8221; also turns your current directory into the client workspace root for your new &lt;a&gt;personal server&lt;/a&gt;, which is useful if you already have some files and realize it might be a good thing to version them:&lt;/p&gt;
&lt;pre&gt;    p4 init
    p4 rec
    p4 submit -n "Initial checkin"
&lt;/pre&gt;&lt;p&gt;In the above, &amp;#8220;rec&amp;#8221; is a handy alias for &amp;#8220;reconcile&amp;#8221;&lt;a href="http://www.perforce.com/blog/150506/ten-time-savers-20151"&gt; to save you typing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you start a new project from scratch and want to place it in another directory instead, use the &amp;#8220;-d&amp;#8221; option like such:&lt;/p&gt;
&lt;pre&gt;    p4 &amp;#8211;d path-to-new-project init
&lt;/pre&gt;&lt;h2&gt;Case and Unicode&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s take a closer look at the output of the &amp;#8220;p4 init&amp;#8221; command:&lt;/p&gt;
&lt;pre&gt;    Matching server configuration from &amp;#8216;wayfarer-p4d:1666':
    case-sensitive (-C0), non-unicode (-n)
    Server sknop-dvcs-1429629213 saved.
&lt;/pre&gt;&lt;p&gt;One might ask: what is case-sensitive and Unicode about?&lt;/p&gt;
&lt;p&gt;Because the Helix versioning engine supports many platforms, both case sensitive and insensitive, you can choose how your personal server handles case. By default, the Helix versioning engine adopts the case policy of the platform you run it on: insensitive on Mac and Windows, sensitive on Linux and other Unix platforms.&lt;/p&gt;
&lt;p&gt;Also by default, the Helix versioning engine does no Unicode translation and simply accepts any encoding for file content and metadata. For cross-platform development it is better to put a shared server into Unicode mode.&lt;/p&gt;
&lt;p&gt;For a personal server you may not care at first what these settings are, but what if you want to push your changes to another server at a later stage? The settings of your personal server have to match the settings on the destination server or there could be chaos, as the destination server will refuse the push if the settings do not match.&lt;/p&gt;
&lt;p&gt;It is cumbersome to change case sensitivity and Unicode settings after the Helix versioning engine is populated, so it is important to get this right up front. &amp;#8220;p4 init&amp;#8221; will &amp;#8220;guess&amp;#8221; what the standard settings within your enterprise are by connecting to and inquiring with the Helix versioning engine specified by the P4PORT environment variable (or &amp;#8220;perforce:1666&amp;#8221; if that is not set).&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d rather inquire with a particular server when initializing a personal server, use the &amp;#8220;-p&amp;#8221; option:&lt;/p&gt;
&lt;pre&gt;    p4 init &amp;#8211;p myserver:1666
&lt;/pre&gt;&lt;p&gt;Alternately, you can also explicitly set case and Unicode support with the following options:&lt;/p&gt;
&lt;strong&gt;Option&lt;/strong&gt;
&lt;strong&gt;Meaning&lt;/strong&gt;
&lt;strong&gt;-C1&lt;/strong&gt;
&lt;p&gt;Case insensitive&lt;/p&gt;
&lt;strong&gt;-C0&lt;/strong&gt;
&lt;p&gt;Case sensitive&lt;/p&gt;
&lt;strong&gt;-n&lt;/strong&gt;
&lt;p&gt;No Unicode support&lt;/p&gt;
&lt;strong&gt;-xi&lt;/strong&gt;
&lt;p&gt;Unicode support&lt;/p&gt;
&lt;p&gt;Server and User NameNote well: if you have P4CHARSET defined in your environment and not set to &amp;#8220;none&amp;#8221;, a new personal server will automatically be initialized as a Unicode-enabled server.&lt;/p&gt;
&lt;p&gt;So what is the story with the server and user name?&lt;/p&gt;
&lt;p&gt;The name of your personal server and client workspace coincide. Although in principle you can have more than one workspace against your personal server, in practice there is rarely any need for it. Locally the name does not matter, but when you push your changes into another server, the changes are linked to your local workspace name. An automatically generated name like &amp;#8220;sknop-dvcs-1429629213&amp;#8221; is highly likely do be unique, but you are free to choose a different name if you so wish by using the &amp;#8220;-c&amp;#8221; option.&lt;/p&gt;
&lt;p&gt;The same is true for your user name: locally it does not matter and will typically coincide with either your OS user name and/or whatever P4USER is set to, but when pushing to another server the user name becomes important.&lt;/p&gt;
&lt;p&gt;Take the Perforce workshop for example: my local user name is always &amp;#8220;sknop&amp;#8221;, but for the workshop I use &amp;#8220;sven_erik_knop&amp;#8221;. If I create a local DVCS server under the user name &amp;#8220;sknop&amp;#8221;, submit my changes, set up a remote to the workshop, and push, I&amp;#8217;ll receive only an error message.&lt;/p&gt;
&lt;p&gt;Fortunately, the solution is very simple. I add another user to my local server and update my local protection table:&lt;/p&gt;
&lt;pre&gt;    p4 user &amp;#8211;f sven_erik_knop
    p4 protect
&lt;/pre&gt;&lt;p&gt;Now I can push my changes under the new user name (I might have to log into the target server first):&lt;/p&gt;
&lt;pre&gt;    p4 &amp;#8211;u sven_erik_knop push
&lt;/pre&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A simple &amp;#8220;p4 init&amp;#8221; will create you a new personal server to which you can submit changes, but if you want to push these changes to another server, it makes sense to pay attention to case sensitivity, Unicode support, and workspace and user name.&lt;/p&gt;
&lt;p&gt;Let me know if you are using our new DVCS features and how you are getting on. My Twitter handle is @p4sven.&lt;/p&gt;
&lt;p&gt;For a live technical overview of DVCS features in the Helix Versioning engine sign up for our &lt;a href="http://info.perforce.com/webinar-overview-helix-dvcs.html?utm_source=p4blog&amp;amp;utm_medium=social&amp;amp;utm_campaign=Global_2015Q2_EW_Helix_DVCS"&gt;DevTalk Webinar &lt;/a&gt;on June 26th.&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Helix Swarm 2015.1 Released</title><link href="http://ciandcd.github.io/ciandcd-web/helix-swarm-20151-released.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/helix-swarm-20151-released.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150608/helix-swarm-20151-released"&gt;http://www.perforce.com/blog/150608/helix-swarm-20151-released&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;a http: www.perforce.com collaboration&gt;Swarm&lt;/a&gt; is two years old this month!&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s rewarding to think that just two years ago, our collaboration engine was only just getting into the hands of our customers. Fast-forward to today, where Swarm plays a big part in the daily workflows of so many innovative companies. With much of the functionality now matured, we wanted to expand Swarm beyond just our English-speaking customers.&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/swarm-japan-bee.jpg"&gt;&lt;/p&gt;
&lt;p&gt;With the latest release of Helix Swarm, we&amp;#8217;ve translated the product into Japanese. It&amp;#8217;s available through our exclusive partner in Japan, the &lt;a href="http://www.toyo.co.jp"&gt;TOYO Corporation&lt;/a&gt;. TOYO provides expert consulting and support to our Japanese customers, and Swarm joins the &lt;a href="http://www.perforce.com/versioning-engine"&gt;Helix Versioning Engine&lt;/a&gt; and our popular visual client, &lt;a href="http://www.perforce.com/product/components/perforce-visual-client"&gt;P4V&lt;/a&gt;, in the suite of Perforce products available in Japanese.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Localization Support for Swarm &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Swarm team spent the last couple of months creating a localization framework and translating the product and documentation into Japanese. The next languages on our list are Korean and Simplified Chinese. If there&amp;#8217;s a language you&amp;#8217;d like us to add to our list of localizations, please send us your request via the &lt;a href="http://forums.perforce.com/index.php?/forum/29-swarm/"&gt;Perforce Swarm Forums&lt;/a&gt; or by emailing &lt;a href="mailto:support@perforce.com?subject=Request%20for%20Perforce%20Helix%20Swarm"&gt;support&lt;/a&gt; and we&amp;#8217;ll put it on our radar.&lt;/p&gt;
&lt;p&gt;Aside from the &lt;strong&gt;localization support&lt;/strong&gt;, other new functionalities include: &amp;#160; &amp;#160;&amp;#160;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Files and folders are downloadable as ZIP archives&lt;/li&gt;
&lt;li&gt;Swarm now limits the number of files to display in a committed change to a configurable default of 1000&lt;/li&gt;
&lt;li&gt;Configurable timeout sets thresholds for large commits&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;More details can be found in the &lt;a href="http://www.perforce.com/perforce/doc.current/manuals/swarm/whatsnew.html"&gt;What's new in 2015.1&lt;/a&gt; section of our user guide.&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>How GitLab uses Unicorn and unicorn-worker-killer</title><link href="http://ciandcd.github.io/ciandcd-web/how-gitlab-uses-unicorn-and-unicorn-worker-killer.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/how-gitlab-uses-unicorn-and-unicorn-worker-killer.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/05/how-gitlab-uses-unicorn-and-unicorn-worker-killer/"&gt;https://www.gitlab.com/2015/06/05/how-gitlab-uses-unicorn-and-unicorn-worker-killer/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;How GitLab uses Unicorn and unicorn-worker-killer&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We just wrote some new documentation on how Gitlab uses Unicorn and
unicorn-worker-killer, available on &lt;a href="http://doc.gitlab.com/ce/operations/unicorn.html"&gt;doc.gitlab.com&lt;/a&gt; but
also included below. We would love to hear from the community if you have other
questions so we can improve this documentation resource!&lt;/p&gt;

 


&lt;p&gt;Update 19:29 CEST: made link to doc.gitlab.com more specific.&lt;/p&gt;

&lt;h1&gt;Understanding Unicorn and unicorn-worker-killer&lt;/h1&gt;

&lt;h2&gt;Unicorn&lt;/h2&gt;

&lt;p&gt;GitLab uses &lt;a href="http://unicorn.bogomips.org/"&gt;Unicorn&lt;/a&gt;, a pre-forking Ruby web
server, to handle web requests (web browsers and Git HTTP clients). Unicorn is
a daemon written in Ruby and C that can load and run a Ruby on Rails
application; in our case the Rails application is GitLab Community Edition or
GitLab Enterprise Edition.&lt;/p&gt;

&lt;p&gt;Unicorn has a multi-process architecture to make better use of available CPU
cores (processes can run on different cores) and to have stronger fault
tolerance (most failures stay isolated in only one process and cannot take down
GitLab entirely). On startup, the Unicorn &amp;#8216;master&amp;#8217; process loads a clean Ruby
environment with the GitLab application code, and then spawns &amp;#8216;workers&amp;#8217; which
inherit this clean initial environment. The &amp;#8216;master&amp;#8217; never handles any
requests, that is left to the workers. The operating system network stack
queues incoming requests and distributes them among the workers.&lt;/p&gt;

&lt;p&gt;In a perfect world, the master would spawn its pool of workers once, and then
the workers handle incoming web requests one after another until the end of
time. In reality, worker processes can crash or time out: if the master notices
that a worker takes too long to handle a request it will terminate the worker
process with SIGKILL (&amp;#8216;kill -9&amp;#8217;). No matter how the worker process ended, the
master process will replace it with a new &amp;#8216;clean&amp;#8217; process again. Unicorn is
designed to be able to replace &amp;#8216;crashed&amp;#8217; workers without dropping user
requests.&lt;/p&gt;

&lt;p&gt;This is what a Unicorn worker timeout looks like in &lt;code&gt;unicorn_stderr.log&lt;/code&gt;. The
master process has PID 56227 below.&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;p class="line-number"&gt;2&lt;/p&gt;
&lt;p class="line-number"&gt;3&lt;/p&gt;
&lt;p class="line-number"&gt;4&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt;[2015-06-05T10:58:08.660325 #56227] ERROR -- : worker=10 PID:53009 timeout (61s &amp;gt; 60s), killing
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T10:58:08.699360 #56227] ERROR -- : reaped #&amp;lt;Process::Status: pid 53009 SIGKILL (signal 9)&amp;gt; worker=10
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T10:58:08.708141 #62538]  INFO -- : worker=10 spawned pid=62538
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T10:58:08.708824 #62538]  INFO -- : worker=10 ready&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Tunables&lt;/h3&gt;

&lt;p&gt;The main tunables for Unicorn are the number of worker processes and the
request timeout after which the Unicorn master terminates a worker process.
See the &lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/unicorn.md"&gt;omnibus-gitlab Unicorn settings
documentation&lt;/a&gt;
if you want to adjust these settings.&lt;/p&gt;

&lt;h2&gt;unicorn-worker-killer&lt;/h2&gt;

&lt;p&gt;GitLab has memory leaks. These memory leaks manifest themselves in long-running
processes, such as Unicorn workers. (The Unicorn master process is not known to
leak memory, probably because it does not handle user requests.)&lt;/p&gt;

&lt;p&gt;To make these memory leaks manageable, GitLab comes with the
&lt;a href="https://github.com/kzk/unicorn-worker-killer"&gt;unicorn-worker-killer gem&lt;/a&gt;. This
gem &lt;a href="http://en.wikipedia.org/wiki/Monkey_patch"&gt;monkey-patches&lt;/a&gt; the Unicorn
workers to do a memory self-check after every 16 requests. If the memory of the
Unicorn worker exceeds a pre-set limit then the worker process exits. The
Unicorn master then automatically replaces the worker process.&lt;/p&gt;

&lt;p&gt;This is a robust way to handle memory leaks: Unicorn is designed to handle
workers that &amp;#8216;crash&amp;#8217; so no user requests will be dropped. The
unicorn-worker-killer gem is designed to only terminate a worker process in
between requests, so no user requests are affected.&lt;/p&gt;

&lt;p&gt;This is what a Unicorn worker memory restart looks like in unicorn_stderr.log.
You see that worker 4 (PID 125918) is inspecting itself and decides to exit.
The threshold memory value was 254802235 bytes, about 250MB. With GitLab this
threshold is a random value between 200 and 250 MB.  The master process (PID
117565) then reaps the worker process and spawns a new &amp;#8216;worker 4&amp;#8217; with PID
127549.&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;p class="line-number"&gt;2&lt;/p&gt;
&lt;p class="line-number"&gt;3&lt;/p&gt;
&lt;p class="line-number"&gt;4&lt;/p&gt;
&lt;p class="line-number"&gt;5&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt;[2015-06-05T12:07:41.828374 #125918]  WARN -- : #&amp;lt;Unicorn::HttpServer:0x00000002734770&amp;gt;: worker (pid: 125918) exceeds memory limit (256413696 bytes &amp;gt; 254802235 bytes)
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T12:07:41.828472 #125918]  WARN -- : Unicorn::WorkerKiller send SIGQUIT (pid: 125918) alive: 23 sec (trial 1)
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T12:07:42.025916 #117565]  INFO -- : reaped #&amp;lt;Process::Status: pid 125918 exit 0&amp;gt; worker=4
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T12:07:42.034527 #127549]  INFO -- : worker=4 spawned pid=127549
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T12:07:42.035217 #127549]  INFO -- : worker=4 ready&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;One other thing that stands out in the log snippet above, taken from
Gitlab.com, is that &amp;#8216;worker 4&amp;#8217; was serving requests for only 23 seconds. This
is a normal value for our current GitLab.com setup and traffic.&lt;/p&gt;

&lt;p&gt;The high frequency of Unicorn memory restarts on some GitLab sites can be a
source of confusion for administrators. Usually they are a &lt;a href="http://en.wikipedia.org/wiki/Red_herring"&gt;red
herring&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>How to Archive a Review in Helix Swarm</title><link href="http://ciandcd.github.io/ciandcd-web/how-to-archive-a-review-in-helix-swarm.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/how-to-archive-a-review-in-helix-swarm.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150624/how-archive-review-helix-swarm"&gt;http://www.perforce.com/blog/150624/how-archive-review-helix-swarm&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/title-tip-tricks9.png"&gt;&lt;/p&gt;
&lt;p&gt;We get a lot of positive feedback about Helix Swarm, but some customers are not sure about all of the workflow steps, so here's a quick review.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;The code review in Helix Swarm can be in one of the following states:&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Needs Review -&amp;#160;&lt;/strong&gt;The review has started and the changes need to be reviewed.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Needs Revisions -&amp;#160;&lt;/strong&gt;The changes have been reviewed and the reviewer has indicated that further revisions are required.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Approved -&amp;#160;&lt;/strong&gt;The review has completed. The changes need to be committed.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Rejected -&amp;#160;&lt;/strong&gt;The review has completed. The changes are undesirable and should not be committed.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Archived -&lt;/strong&gt;The review has completed for now. However, it is neither rejected nor approved; it is simply put aside in case it is needed in the future.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Most of these states are self-explanatory with the exception of "Archived" state, which is where my fellow customers feel a bit lost.&lt;/p&gt;
&lt;p&gt;They wonder how they can archive and restore reviews for future consideration. Which can also mean that they inadvertently created a review for something they didn't intend to. That said, the review in question can be archived, restored, updated with new set of files and then routed through the workflow.&lt;/p&gt;
&lt;h4&gt;Let's look at how to "Archive" the review:&lt;/h4&gt;
&lt;p&gt;When you open a review in Swarm, there is a drop-down at the top right corner of the review.&amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/Needs-review-archive.png"&gt;&lt;/p&gt;
&lt;p&gt;Select the "Archive" option if you think the review needs to be deffered for future consideration.&lt;/p&gt;
&lt;p&gt;Once you set the state of the review to "Archive", the review disappears from the list of open reviews.&lt;/p&gt;
&lt;p&gt;Now, at a later stage, the project team decides that the review should be restored for immediate consideration.&lt;/p&gt;
&lt;h4&gt;Let's look at how to restore a previously archived review:&lt;/h4&gt;
&lt;p&gt;The previously archived review can be found under, "Closed" review tab. To narrow down your search further, the "Archived" review icon &lt;img alt="" src="/sites/default/files/ArchiveIcon.png"&gt;&amp;#160;can be clicked to list only archived reviews.&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/archived-reviews-search.png"&gt;&lt;/p&gt;
&lt;p&gt;Select the review you wish to schedule for consideration by clicking on the hyperlinked review ID.&amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/hyperlinked-review.png"&gt;&lt;/p&gt;
&lt;p&gt;Again, go to the drop-down at the top right corner of the review. Simply click "Needs Review" and the review will reappear in the list of Opened reviews.&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/arhived-needs-review.png"&gt;&lt;/p&gt;
&lt;p&gt;Are you using Helix Swarm? We invite you to try it for free&amp;#8211;it is included in Perforce Helix's free 20&amp;#8211;user edition. &lt;a href="http://info.perforce.com/free.html"&gt;Download now&lt;/a&gt; and tell us what you think!&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>How to undo (almost) anything with Git · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/how-to-undo-almost-anything-with-git-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/how-to-undo-almost-anything-with-git-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2019-how-to-undo-almost-anything-with-git"&gt;https://github.com/blog/2019-how-to-undo-almost-anything-with-git&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;One of the most useful features of any version control system is the ability to "undo" your mistakes. In Git, "undo" can mean many slightly different things.&lt;/p&gt;

&lt;p&gt;When you make a new commit, Git stores a snapshot of your repository at that specific moment in time; later, you can use Git to go back to an earlier version of your project.&lt;/p&gt;

&lt;p&gt;In this post, I'm going to take a look at some common scenarios where you might want to "undo" a change you've made and the best way to do it using Git.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="undo-a-public-change" class="anchor" href="#undo-a-public-change"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Undo a "public" change&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You just ran &lt;code&gt;git push&lt;/code&gt;, sending your changes to GitHub, now you realize there's a problem with one of those commits. You'd like to undo that commit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git revert &amp;lt;SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git revert&lt;/code&gt; will create a new commit that's the opposite (or inverse) of the given SHA. If the old commit is "matter", the new commit is "anti-matter"&amp;#8212;anything removed in the old commit will be added in the new commit and anything added in the old commit will be removed in the new commit. &lt;/p&gt;

&lt;p&gt;This is Git's safest, most basic "undo" scenario, because it doesn't alter history&amp;#8212;so you can now &lt;code&gt;git push&lt;/code&gt; the new "inverse" commit to undo your mistaken commit.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="fix-the-last-commit-message" class="anchor" href="#fix-the-last-commit-message"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Fix the last commit message&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You just typo'd the last commit message, you did &lt;code&gt;git commit -m "Fxies bug #42"&lt;/code&gt; but before &lt;code&gt;git push&lt;/code&gt; you realized that really should say "Fixes bug #42".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git commit --amend&lt;/code&gt; or &lt;code&gt;git commit --amend -m "Fixes bug #42"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git commit --amend&lt;/code&gt; will update and replace the most recent commit with a new commit that combines any staged changes with the contents of the previous commit. With nothing currently staged, this just rewrites the previous commit message.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="undo-local-changes" class="anchor" href="#undo-local-changes"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Undo "local" changes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; The cat walked across the keyboard and somehow saved the changes, then crashed the editor. You haven't committed those changes, though. You want to undo everything in that file&amp;#8212;just go back to the way it looked in the last commit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git checkout -- &amp;lt;bad filename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git checkout&lt;/code&gt; alters files in the working directory to a state previously known to Git. You could provide a branch name or specific SHA you want to go back to or, by default, Git will assume you want to checkout &lt;code&gt;HEAD&lt;/code&gt;, the last commit on the currently-checked-out branch.&lt;/p&gt;

&lt;p&gt;Keep in mind: any changes you "undo" this way are really gone. They were never committed, so Git can't help us recover them later. Be sure you know what you're throwing away here! (Maybe use &lt;code&gt;git diff&lt;/code&gt; to confirm.)&lt;/p&gt;

&lt;h2&gt;
&lt;a id="reset-local-changes" class="anchor" href="#reset-local-changes"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Reset "local" changes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You've made some commits locally (not yet pushed), but everything is terrible, you want to undo the last three commits&amp;#8212;like they never happened.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git reset &amp;lt;last good SHA&amp;gt;&lt;/code&gt; or &lt;code&gt;git reset --hard &amp;lt;last good SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git reset&lt;/code&gt; rewinds your repository's history all the way back to the specified SHA. It's as if those commits never happened. By default, &lt;code&gt;git reset&lt;/code&gt; preserves the working directory. The commits are gone, but the contents are still on disk. This is the safest option, but often, you'll want to "undo" the commits and the changes in one move&amp;#8212;that's what &lt;code&gt;--hard&lt;/code&gt; does.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="redo-after-undo-local" class="anchor" href="#redo-after-undo-local"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Redo after undo "local"&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You made some commits, did a &lt;code&gt;git reset --hard&lt;/code&gt; to "undo" those changes (see above), and then realized: you want those changes back!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git reflog&lt;/code&gt; and &lt;code&gt;git reset&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git reflog&lt;/code&gt; is an amazing resource for recovering project history. You can recover almost anything&amp;#8212;anything you've committed&amp;#8212;via the reflog.&lt;/p&gt;

&lt;p&gt;You're probably familiar with the &lt;code&gt;git log&lt;/code&gt; command, which shows a list of commits. &lt;code&gt;git reflog&lt;/code&gt; is similar, but instead shows a list of times when &lt;code&gt;HEAD&lt;/code&gt; changed.&lt;/p&gt;

&lt;p&gt;Some caveats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;HEAD&lt;/code&gt; changes only.&lt;code&gt;HEAD&lt;/code&gt; changes when you switch branches, make commits with &lt;code&gt;git commit&lt;/code&gt; and un-make commits with &lt;code&gt;git reset&lt;/code&gt;, but &lt;code&gt;HEAD&lt;/code&gt; does not change when you &lt;code&gt;git checkout -- &amp;lt;bad filename&amp;gt;&lt;/code&gt; (from an earlier scenario&amp;#8212;as mentioned before, those changes were never committed, so the reflog can't help us recover those.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git reflog&lt;/code&gt; doesn't last forever. Git will periodically clean up objects which are "unreachable." Don't expect to find months-old commits lying around in the reflog forever.&lt;/li&gt;
&lt;li&gt;Your &lt;code&gt;reflog&lt;/code&gt; is yours and yours alone. You can't use &lt;code&gt;git reflog&lt;/code&gt; to restore another developer's un-pushed commits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png" alt="reflog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So... how do you use the reflog to "redo" a previously "undone" commit or commits? It depends on what exactly you want to accomplish:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to restore the project's history as it was at that moment in time use &lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If you want to recreate one or more files in your working directory as they were at that moment in time, without altering history use &lt;code&gt;git checkout &amp;lt;SHA&amp;gt; -- &amp;lt;filename&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If you want to replay exactly one of those commits into your repository use &lt;code&gt;git cherry-pick &amp;lt;SHA&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;a id="once-more-with-branching" class="anchor" href="#once-more-with-branching"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Once more, with branching&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You made some commits, then realized you were checked out on &lt;code&gt;master&lt;/code&gt;. You wish you could make those commits on a feature branch instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git branch feature&lt;/code&gt;, &lt;code&gt;git reset --hard origin/master&lt;/code&gt;, and &lt;code&gt;git checkout feature&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; You may be used to creating new branches with &lt;code&gt;git checkout -b &amp;lt;name&amp;gt;&lt;/code&gt;&amp;#8212;it's a popular short-cut for creating a new branch and checking it out right away&amp;#8212;but you don't want to switch branches just yet. Here, &lt;code&gt;git branch feature&lt;/code&gt; creates a new branch called &lt;code&gt;feature&lt;/code&gt; pointing at your most recent commit, but leaves you checked out to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, &lt;code&gt;git reset --hard&lt;/code&gt; rewinds &lt;code&gt;master&lt;/code&gt; back to &lt;code&gt;origin/master&lt;/code&gt;, before any of your new commits. Don't worry, though, they are still available on &lt;code&gt;feature&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;git checkout&lt;/code&gt; switches to the new &lt;code&gt;feature&lt;/code&gt; branch, with all of your recent work intact.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="branch-in-time-saves-nine" class="anchor" href="#branch-in-time-saves-nine"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Branch in time saves nine&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You started a new branch &lt;code&gt;feature&lt;/code&gt; based on &lt;code&gt;master&lt;/code&gt;, but &lt;code&gt;master&lt;/code&gt; was pretty far behind &lt;code&gt;origin/master&lt;/code&gt;. Now that &lt;code&gt;master&lt;/code&gt; branch is in sync with &lt;code&gt;origin/master&lt;/code&gt;, you wish commits on &lt;code&gt;feature&lt;/code&gt; were starting now, instead of being so far behind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git checkout feature&lt;/code&gt; and &lt;code&gt;git rebase master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; You could have done this with &lt;code&gt;git reset&lt;/code&gt; (no &lt;code&gt;--hard&lt;/code&gt;, intentionally preserving changes on disk) then &lt;code&gt;git checkout -b &amp;lt;new branch name&amp;gt;&lt;/code&gt; and then re-commit the changes, but that way, you'd lose the commit history. There's a better way.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rebase master&lt;/code&gt; does a couple of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First it locates the common ancestor between your currently-checked-out branch and &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then it resets the currently-checked-out branch to that ancestor, holding all later commits in a temporary holding area.&lt;/li&gt;
&lt;li&gt;Then it advances the currently-checked-out-branch to the end of &lt;code&gt;master&lt;/code&gt; and replays the commits from the holding area after &lt;code&gt;master&lt;/code&gt;'s last commit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;a id="mass-undoredo" class="anchor" href="#mass-undoredo"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Mass undo/redo&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You started this feature in one direction, but mid-way through, you realized another solution was better. You've got a dozen or so commits, but you only want some of them. You'd like the others to just disappear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git rebase -i &amp;lt;earlier SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;-i&lt;/code&gt; puts &lt;code&gt;rebase&lt;/code&gt; in "interactive mode". It starts off like the rebase discussed above, but before replaying any commits, it pauses and allows you to gently modify each commit as it's replayed. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;rebase -i&lt;/code&gt; will open in your default text editor, with a list of commits being applied, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953863/f6b1ab88-d891-11e4-97c1-e0630ac74e74.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953863/f6b1ab88-d891-11e4-97c1-e0630ac74e74.png" alt="rebase-interactive1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first two columns are key: the first is the selected command for the commit identified by the SHA in the second column. By default, &lt;code&gt;rebase -i&lt;/code&gt; assumes each commit is being applied, via the &lt;code&gt;pick&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To drop a commit, just delete that line in your editor. If you no longer want the bad commits in your project, you can delete lines 1 and 3-4 above. &lt;/p&gt;

&lt;p&gt;If you want to preserve the contents of the commit but edit the commit message, you use the &lt;code&gt;reword&lt;/code&gt; command. Just replace the word &lt;code&gt;pick&lt;/code&gt; in the first column with the word &lt;code&gt;reword&lt;/code&gt; (or just &lt;code&gt;r&lt;/code&gt;). It can be tempting to rewrite the commit message right now, but that won't work&amp;#8212;&lt;code&gt;rebase -i&lt;/code&gt; ignores everything after the SHA column. The text after that is really just to help us remember what &lt;code&gt;0835fe2&lt;/code&gt; is all about. When you've finished with &lt;code&gt;rebase -i&lt;/code&gt;, you'll be prompted for any new commit messages you need to write.&lt;/p&gt;

&lt;p&gt;If you want to combine two commits together, you can use the &lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;fixup&lt;/code&gt; commands, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953865/f6b605ca-d891-11e4-98cf-d567ca9f4edc.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953865/f6b605ca-d891-11e4-98cf-d567ca9f4edc.png" alt="rebase-interactive2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;squash&lt;/code&gt; and &lt;code&gt;fixup&lt;/code&gt; combine "up"&amp;#8212;the commit with the "combine" command will be merged into the commit immediately before it. In this scenario, &lt;code&gt;0835fe2&lt;/code&gt; and &lt;code&gt;6943e85&lt;/code&gt; will be combined into one commit, then &lt;code&gt;38f5e4e&lt;/code&gt; and &lt;code&gt;af67f82&lt;/code&gt; will be combined together into another. &lt;/p&gt;

&lt;p&gt;When you select &lt;code&gt;squash&lt;/code&gt;, Git will prompt us to give the new, combined commit a new commit message; &lt;code&gt;fixup&lt;/code&gt; will give the new commit the message from the first commit in the list. Here, you know that &lt;code&gt;af67f82&lt;/code&gt; is an "ooops" commit, so you'll just use the commit message from &lt;code&gt;38f5e4e&lt;/code&gt; as is, but you'll write a new message for the new commit you get from combining &lt;code&gt;0835fe2&lt;/code&gt; and &lt;code&gt;6943e85&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you save and exit your editor, Git will apply your commits in order from top to bottom. You can alter the order commits apply by changing the order of commits before saving. If you'd wanted, you could have combined &lt;code&gt;af67f82&lt;/code&gt; with &lt;code&gt;0835fe2&lt;/code&gt; by arranging things like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953864/f6b4a9d2-d891-11e4-9ac9-10039c031d06.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953864/f6b4a9d2-d891-11e4-9ac9-10039c031d06.png" alt="rebase-interactive3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;a id="fix-an-earlier-commit" class="anchor" href="#fix-an-earlier-commit"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Fix an earlier commit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You failed to include a file in an earlier commit, it'd be great if that earlier commit could somehow include the stuff you left out. You haven't pushed, yet, but it wasn't the most recent commit, so you can't use &lt;code&gt;commit --amend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git commit --squash &amp;lt;SHA of the earlier commit&amp;gt;&lt;/code&gt; and &lt;code&gt;git rebase --autosquash -i &amp;lt;even earlier SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git commit --squash&lt;/code&gt; will create a new commit with a commit message like &lt;code&gt;squash! Earlier commit&lt;/code&gt;. (You could manually create a commit with a message like that, but &lt;code&gt;commit --squash&lt;/code&gt; saves you some typing.)&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;git commit --fixup&lt;/code&gt; if you don't want to be prompted to write a new commit message for the combined commit. In this scenario, you'd probably use &lt;code&gt;commit --fixup&lt;/code&gt;, since you just want to use the earlier commit's commit message during &lt;code&gt;rebase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rebase --autosquash -i&lt;/code&gt; will launch an interactive &lt;code&gt;rebase&lt;/code&gt; editor, but the editor will open with any &lt;code&gt;squash!&lt;/code&gt; and &lt;code&gt;fixup!&lt;/code&gt; commits already paired to the commit target in the list of commits, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953862/f6a7a1d8-d891-11e4-8784-c32262ff54da.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953862/f6a7a1d8-d891-11e4-8784-c32262ff54da.png" alt="rebase-autosquash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;--squash&lt;/code&gt; and &lt;code&gt;--fixup&lt;/code&gt;, you might not remember the SHA of the commit you want to fix&amp;#8212;only that it was one or five commits ago. You might find using Git's &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; operators especially handy. &lt;code&gt;HEAD^&lt;/code&gt; is one commit before &lt;code&gt;HEAD&lt;/code&gt;. &lt;code&gt;HEAD~4&lt;/code&gt; is four commits before &lt;code&gt;HEAD&lt;/code&gt; - or, altogether, five commits back. &lt;/p&gt;

&lt;h2&gt;
&lt;a id="stop-tracking-a-tracked-file" class="anchor" href="#stop-tracking-a-tracked-file"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Stop tracking a tracked file&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You accidentally added &lt;code&gt;application.log&lt;/code&gt; to the repository, now every time you run the application, Git reports there are unstaged changes in &lt;code&gt;application.log&lt;/code&gt;. You put &lt;code&gt;*.log&lt;/code&gt; in the &lt;code&gt;.gitignore&lt;/code&gt; file, but it's still there&amp;#8212;how do you tell git to to "undo" tracking changes in this file?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git rm --cached application.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; While &lt;code&gt;.gitignore&lt;/code&gt; prevents Git from tracking changes to files or even noticing the existence of files it's never tracked before, once a file has been added and committed, Git will continue noticing changes in that file. Similarly, if you've used &lt;code&gt;git add -f&lt;/code&gt; to "force", or override, &lt;code&gt;.gitignore&lt;/code&gt;, Git will keep tracking changes. You won't have to use &lt;code&gt;-f&lt;/code&gt; to add it in the future.&lt;/p&gt;

&lt;p&gt;If you want to remove that should-be-ignored file from Git's tracking, &lt;code&gt;git rm --cached&lt;/code&gt; will remove it from tracking but leave the file untouched on disk. Since it's now being ignored, you won't see that file in &lt;code&gt;git status&lt;/code&gt; or accidentally commit changes from that file again.&lt;/p&gt;



&lt;p&gt;That's how to undo anything with Git. To learn more about any of the Git commands used here, check out the relevant documentation:&lt;/p&gt;

 
  &lt;/div&gt;</content></entry><entry><title>Implementing .gitlab-ci.yml</title><link href="http://ciandcd.github.io/ciandcd-web/implementing-gitlab-ciyml.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/implementing-gitlab-ciyml.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/08/implementing-gitlab-ci-dot-yml/"&gt;https://www.gitlab.com/2015/06/08/implementing-gitlab-ci-dot-yml/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Implementing .gitlab-ci.yml&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We &lt;a href="https://about.gitlab.com/2015/05/06/why-were-replacing-gitlab-ci-jobs-with-gitlab-ci-dot-yml/"&gt;wrote&lt;/a&gt; about why we&amp;#8217;re replacing GitLab CI jobs with a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file.
As we&amp;#8217;ve started on implementing this large change, we wanted to share the details
of that process with you and would love to hear what you think.&lt;/p&gt;

 


&lt;p&gt;To recap the &lt;a href="https://about.gitlab.com/2015/05/06/why-were-replacing-gitlab-ci-jobs-with-gitlab-ci-dot-yml/"&gt;previous article&lt;/a&gt;:
currently you are required to write out your CI jobs in GitLab CI&amp;#8217;s interface.
We&amp;#8217;re replacing this with a single file &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;, that you place in the root
of your repository.&lt;/p&gt;

&lt;h2&gt;Schema change&lt;/h2&gt;

&lt;p&gt;Currently, on a push to GitLab, GitLab sends a web-hook to the CI Coordinator.
The coordinator creates a build based on the jobs that are defined in its UI,
which can then be executed by the connected Runners.&lt;/p&gt;

&lt;p&gt;In the new schema, GitLab sends the web-hook and the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; contents
to the CI Coordinator, which creates builds based on the yml file. In turn,
these builds are executed by the Runners as before.&lt;/p&gt;

&lt;h2&gt;Migrating to new style&lt;/h2&gt;

&lt;p&gt;Keeping two different ways of doing things would be a strain on development and
support, not to mention confusing. So we&amp;#8217;re not just deprecating the old style
of defining jobs, we&amp;#8217;re removing it entirely and will migrate existing jobs.&lt;/p&gt;

&lt;p&gt;Upon upgrading your existing jobs defined in the GitLab CI Coordinator will be
converted into a YAML file with the new syntax. You can download this file at any
time from the project settings.&lt;/p&gt;

&lt;p&gt;When the GitLab webhook triggers and doesn&amp;#8217;t transmit the content from &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;,
the coordinator will use the converted YAML file instead.&lt;/p&gt;

&lt;p&gt;This makes migrating to the new style very easy. You can start by simply copy-pasting
the contents of the converted YAML file to the root of your repository. Existing projects
will continue to build successfully, yet new projects do not have the option to
use anything else.&lt;/p&gt;

&lt;h2&gt;An example &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;To get an idea of how the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; will look, we&amp;#8217;ve prepared an example
for a Ruby on Rails project (such as GitLab itself). Of course, this is due to
change as we&amp;#8217;re still working on this.&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;p class="line-number"&gt;2&lt;/p&gt;
&lt;p class="line-number"&gt;3&lt;/p&gt;
&lt;p class="line-number"&gt;4&lt;/p&gt;
&lt;p class="line-number"&gt;5&lt;/p&gt;
&lt;p class="line-number"&gt;6&lt;/p&gt;
&lt;p class="line-number"&gt;7&lt;/p&gt;
&lt;p class="line-number"&gt;8&lt;/p&gt;
&lt;p class="line-number"&gt;9&lt;/p&gt;
&lt;p class="line-number"&gt;10&lt;/p&gt;
&lt;p class="line-number"&gt;11&lt;/p&gt;
&lt;p class="line-number"&gt;12&lt;/p&gt;
&lt;p class="line-number"&gt;13&lt;/p&gt;
&lt;p class="line-number"&gt;14&lt;/p&gt;
&lt;p class="line-number"&gt;15&lt;/p&gt;
&lt;p class="line-number"&gt;16&lt;/p&gt;
&lt;p class="line-number"&gt;17&lt;/p&gt;
&lt;p class="line-number"&gt;18&lt;/p&gt;
&lt;p class="line-number"&gt;19&lt;/p&gt;
&lt;p class="line-number"&gt;20&lt;/p&gt;
&lt;p class="line-number"&gt;21&lt;/p&gt;
&lt;p class="line-number"&gt;22&lt;/p&gt;
&lt;p class="line-number"&gt;23&lt;/p&gt;
&lt;p class="line-number"&gt;24&lt;/p&gt;
&lt;p class="line-number"&gt;25&lt;/p&gt;
&lt;p class="line-number"&gt;26&lt;/p&gt;
&lt;p class="line-number"&gt;27&lt;/p&gt;
&lt;p class="line-number"&gt;28&lt;/p&gt;
&lt;p class="line-number"&gt;29&lt;/p&gt;
&lt;p class="line-number"&gt;30&lt;/p&gt;
&lt;p class="line-number"&gt;31&lt;/p&gt;
&lt;p class="line-number"&gt;32&lt;/p&gt;
&lt;p class="line-number"&gt;33&lt;/p&gt;
&lt;p class="line-number"&gt;34&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt;# Refs to skip
&lt;/p&gt;&lt;p class="line"&gt;skip_refs: &amp;#8220;deploy*&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Run before each script
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Refs to skip
&lt;/p&gt;&lt;p class="line"&gt;skip_refs: &amp;#8220;deploy*&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Run before each script
&lt;/p&gt;&lt;p class="line"&gt;before_script:
&lt;/p&gt;&lt;p class="line"&gt;  - export PATH=$HOME/bin:/usr/local/bin:/usr/bin:/bin
&lt;/p&gt;&lt;p class="line"&gt;  - gem install bundler
&lt;/p&gt;&lt;p class="line"&gt;  - cp config/database.yml.mysql config/database.yml
&lt;/p&gt;&lt;p class="line"&gt;  - cp config/gitlab.yml.example config/gitlab.yml
&lt;/p&gt;&lt;p class="line"&gt;  - touch log/application.log
&lt;/p&gt;&lt;p class="line"&gt;  - touch log/test.log
&lt;/p&gt;&lt;p class="line"&gt;  - bundle install --without postgres production --jobs $(nproc)
&lt;/p&gt;&lt;p class="line"&gt;  - &amp;#8220;bundle exec rake db:create RAILS_ENV=test&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Parallel jobs, each line is a parallel build
&lt;/p&gt;&lt;p class="line"&gt;jobs:
&lt;/p&gt;&lt;p class="line"&gt;  - script: &amp;#8220;rake spec&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    runner: &amp;#8220;ruby,postgres&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    name: &amp;#8220;Rspec&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;  - script: &amp;#8220;rake spinach&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    runner: &amp;#8220;ruby,mysql&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    name: &amp;#8220;Spinach&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    tags: true
&lt;/p&gt;&lt;p class="line"&gt;    branches: false
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Parallel deploy jobs
&lt;/p&gt;&lt;p class="line"&gt;on_success:
&lt;/p&gt;&lt;p class="line"&gt;  - &amp;#8220;cap deploy production&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;  - &amp;#8220;cap deploy staging&amp;#8221;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;UPDATE&lt;/h2&gt;

&lt;p&gt;Dmitriy and Sytse spend some time thinking about file syntax.
Scripting should be simple and memorable. Thats why we come with better proposal:&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;p class="line-number"&gt;2&lt;/p&gt;
&lt;p class="line-number"&gt;3&lt;/p&gt;
&lt;p class="line-number"&gt;4&lt;/p&gt;
&lt;p class="line-number"&gt;5&lt;/p&gt;
&lt;p class="line-number"&gt;6&lt;/p&gt;
&lt;p class="line-number"&gt;7&lt;/p&gt;
&lt;p class="line-number"&gt;8&lt;/p&gt;
&lt;p class="line-number"&gt;9&lt;/p&gt;
&lt;p class="line-number"&gt;10&lt;/p&gt;
&lt;p class="line-number"&gt;11&lt;/p&gt;
&lt;p class="line-number"&gt;12&lt;/p&gt;
&lt;p class="line-number"&gt;13&lt;/p&gt;
&lt;p class="line-number"&gt;14&lt;/p&gt;
&lt;p class="line-number"&gt;15&lt;/p&gt;
&lt;p class="line-number"&gt;16&lt;/p&gt;
&lt;p class="line-number"&gt;17&lt;/p&gt;
&lt;p class="line-number"&gt;18&lt;/p&gt;
&lt;p class="line-number"&gt;19&lt;/p&gt;
&lt;p class="line-number"&gt;20&lt;/p&gt;
&lt;p class="line-number"&gt;21&lt;/p&gt;
&lt;p class="line-number"&gt;22&lt;/p&gt;
&lt;p class="line-number"&gt;23&lt;/p&gt;
&lt;p class="line-number"&gt;24&lt;/p&gt;
&lt;p class="line-number"&gt;25&lt;/p&gt;
&lt;p class="line-number"&gt;26&lt;/p&gt;
&lt;p class="line-number"&gt;27&lt;/p&gt;
&lt;p class="line-number"&gt;28&lt;/p&gt;
&lt;p class="line-number"&gt;29&lt;/p&gt;
&lt;p class="line-number"&gt;30&lt;/p&gt;
&lt;p class="line-number"&gt;31&lt;/p&gt;
&lt;p class="line-number"&gt;32&lt;/p&gt;
&lt;p class="line-number"&gt;33&lt;/p&gt;
&lt;p class="line-number"&gt;34&lt;/p&gt;
&lt;p class="line-number"&gt;35&lt;/p&gt;
&lt;p class="line-number"&gt;36&lt;/p&gt;
&lt;p class="line-number"&gt;37&lt;/p&gt;
&lt;p class="line-number"&gt;38&lt;/p&gt;
&lt;p class="line-number"&gt;39&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt;before_script:
&lt;/p&gt;&lt;p class="line"&gt;  - gem install bundler
&lt;/p&gt;&lt;p class="line"&gt;  - bundle install
&lt;/p&gt;&lt;p class="line"&gt;  - bundle exec rake db:create
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;rspec:
&lt;/p&gt;&lt;p class="line"&gt;  test: "rake spec"
&lt;/p&gt;&lt;p class="line"&gt;  tags:
&lt;/p&gt;&lt;p class="line"&gt;    - ruby
&lt;/p&gt;&lt;p class="line"&gt;    - postgres
&lt;/p&gt;&lt;p class="line"&gt;  only:
&lt;/p&gt;&lt;p class="line"&gt;    - branches
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;spinach:
&lt;/p&gt;&lt;p class="line"&gt;  test: "rake spinach"
&lt;/p&gt;&lt;p class="line"&gt;  tags:
&lt;/p&gt;&lt;p class="line"&gt;    - ruby
&lt;/p&gt;&lt;p class="line"&gt;    - mysql
&lt;/p&gt;&lt;p class="line"&gt;  except:
&lt;/p&gt;&lt;p class="line"&gt;    - tags
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;staging:
&lt;/p&gt;&lt;p class="line"&gt;  deploy: "cap deploy stating"
&lt;/p&gt;&lt;p class="line"&gt;  tags:
&lt;/p&gt;&lt;p class="line"&gt;    - capistrano
&lt;/p&gt;&lt;p class="line"&gt;    - debian
&lt;/p&gt;&lt;p class="line"&gt;  except:
&lt;/p&gt;&lt;p class="line"&gt;    - stable
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;production:
&lt;/p&gt;&lt;p class="line"&gt;  deploy:
&lt;/p&gt;&lt;p class="line"&gt;    - cap deploy production
&lt;/p&gt;&lt;p class="line"&gt;    - cap notify
&lt;/p&gt;&lt;p class="line"&gt;  tags:
&lt;/p&gt;&lt;p class="line"&gt;    - capistrano
&lt;/p&gt;&lt;p class="line"&gt;    - debian
&lt;/p&gt;&lt;p class="line"&gt;  only:
&lt;/p&gt;&lt;p class="line"&gt;    - master
&lt;/p&gt;&lt;p class="line"&gt;    - /^deploy-.*$/&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Contribute&lt;/h2&gt;

&lt;p&gt;GitLab is nothing without its community.
Contribute or follow the development in the &lt;a href="https://gitlab.com/gitlab-org/gitlab-ci/commit/c2c9236cde807e98ff9571f8d23ac4def75eb9ba"&gt;GitLab CI repository&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Improved organization permissions · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/improved-organization-permissions-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/improved-organization-permissions-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2020-improved-organization-permissions"&gt;https://github.com/blog/2020-improved-organization-permissions&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Organizations have always been the best way for teams to work together and collaborate on code. We're happy to announce &lt;a href="https://github.com/orgs/improved-permissions?utm_source=github_site&amp;amp;utm_medium=blog&amp;amp;utm_campaign=organization-permissions"&gt;major improvements to GitHub organization permissions&lt;/a&gt;. These improvements include new customizable member privileges, fine-grained team permissions, and more open communication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/orgs/improved-permissions?utm_source=github_site&amp;amp;utm_medium=blog&amp;amp;utm_campaign=organization-permissions"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/874145/8073289/cc2561da-0ed7-11e5-8bed-36f15367c914.png" alt="improved-organization-permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The improved permissions system gives your organization the flexibility to work the way you want. Here are just a few highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(Opt-in) Members can view and mention all teams, even when they're not on those teams.&lt;/li&gt;
&lt;li&gt;(Opt-in) Members can create repositories without help from an owner.&lt;/li&gt;
&lt;li&gt;Members can create new teams to self-organize with the people they work with.&lt;/li&gt;
&lt;li&gt;Owners can give just the right amount of access to contractors and interns by adding them to repositories without giving them the privileges of organization members.&lt;/li&gt;
&lt;li&gt;And many more! &lt;a href="https://github.com/orgs/improved-permissions?utm_source=github_site&amp;amp;utm_medium=blog&amp;amp;utm_campaign=organization-permissions"&gt;Learn about GitHub's improved organization permissions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these new features give your organization the ability to work together seamlessly without everyone needing to be an owner.&lt;/p&gt;

&lt;p&gt;Once these features launch, organization owners will be able to turn on new permissions as needed. Simply opt-in when you're ready.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="early-access" class="anchor" href="#early-access"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Early access&lt;/h2&gt;

&lt;p&gt;We're rolling out our improved permissions system to a select group of users who will be asked to provide feedback over a short survey as part of the program. If you're interested in being one of the first to try it out on GitHub.com, &lt;a href="https://github.com/orgs/improved-permissions?utm_source=github_site&amp;amp;utm_medium=blog&amp;amp;utm_campaign=organization-permissions"&gt;sign your organization up for early access&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next few months, every organization on GitHub.com will have the improved permissions system.&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>Living la Vida Helix: Submitting Without Fear</title><link href="http://ciandcd.github.io/ciandcd-web/living-la-vida-helix-submitting-without-fear.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/living-la-vida-helix-submitting-without-fear.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150609/living-la-vida-helix-submitting-without-fear"&gt;http://www.perforce.com/blog/150609/living-la-vida-helix-submitting-without-fear&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;One of the common complaints I hear about centralized version control systems is that they are scary. With every commit being immediately visible there is a feeling that you may screw up everything for your co-workers. What&amp;#8217;s worse is that you generally don&amp;#8217;t have the power to clean up after yourself. How many of us have had to sheepishly go ask the admin to obliterate something?&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/viva-la-helix-fear-blog.jpg"&gt;&lt;/p&gt;
&lt;p&gt;With P4D (which we now call Helix Versioning Engine) becoming a proper DVCS, you now can manipulate history that has not yet been shared with other people. Than means you can commit to your heart&amp;#8217;s content, and then sweep through later to keep just the interesting commits. It also means that if you accidentally submit something you can deal with it.&lt;/p&gt;
&lt;p&gt;Just recently while doing some cleanup work in the Workshop I had just one of these cases. I&amp;#8217;d like to walk you through what happened so that you can see how unsubmit and resubmit will help you.&lt;/p&gt;
&lt;h4&gt;Setting the scene&lt;/h4&gt;
&lt;p&gt;A user had reported that a number of files that I had added the day before had all of their line endings mangled. The files were already in the shared server, so I didn&amp;#8217;t want to run p4 unsubmit there, and anyway I feel it is important for my failures to remain on display for all to see.&lt;/p&gt;
&lt;p&gt;So I got to work updating the files.&lt;/p&gt;
&lt;pre&gt; p4 fetch&lt;/pre&gt;
&lt;p&gt;Everyting was up-to-date. Next to find the files with the bad line endings.&lt;/p&gt;
&lt;pre&gt;grep -lIUr --color &lt;p&gt;"^R"&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;I was lucky and it was just a handful of files. Thankfully turning Windows line endings into Unixones is a piece of cake with P4D.&lt;/p&gt;
&lt;pre&gt;p4 client -o | sed s/LineEnd: local/LineEnd: share | p4 client -i&lt;/pre&gt;
&lt;p&gt;Now to get the files synced with the correct line endings and submitted:&lt;/p&gt;
&lt;pre&gt;p4 sync -f &lt;/pre&gt;
&lt;pre&gt;p4 submit -d &lt;p&gt;"Fixing up some busted line endings that snuck in"&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;All was well and good until I realized that in my excitement I&amp;#8217;d mangled some solution files which probably wanted those '\R&amp;#8217;s. Thankfully I hadn&amp;#8217;t pushed, so I could quickly clean up my mess.&lt;/p&gt;
&lt;pre&gt;p4 changes -m1&lt;/pre&gt;
&lt;pre&gt;p4 unsubmit @&lt;p&gt;12345&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;I identified my last change number, and then unsubmitted it. At this point I had all of my changed files in a shelf. In this case I had only one changelist, but I still decided to use p4 resubmit to apply the change. p4 resubmit makes it easy to reapply the changes in order.&lt;/p&gt;
&lt;pre&gt;p4 resubmit&lt;/pre&gt;
&lt;p&gt;This kicks me into interactive mode. Because there is a lot you can do with resubmit and I always forget the options, I hit '?' to see the list.&lt;/p&gt;
&lt;pre&gt;Specify next action ( l/m/e/c/r/R/s/d/b/v/V/a/q ) or ? &lt;p class="s1"&gt;for &lt;/p&gt;help: ?
The following actions are available:
c Modify the change description &lt;p class="s1"&gt;for &lt;/p&gt;this change
m Merge this change, &lt;p class="s1"&gt;then &lt;/p&gt;submit &lt;p class="s1"&gt;if &lt;/p&gt;no conflicts
e Merge this change, &lt;p class="s1"&gt;then exit for &lt;/p&gt;further editing
r Interactively resolve this change, &lt;p class="s1"&gt;then&lt;/p&gt;
submit &lt;p class="s1"&gt;if &lt;/p&gt;no conflicts
a Add (squash) this change into the next unsubmitted
change
s Skip this change and move on to the next
d Delete this change without submitting it
b Begin again from the earliest remaining change
l List the changes remaining to be processed
v View the current change in short form
V View the current change with full diffs
R Display the status of resolved and unresolved merges
q Quit the resubmit operation&amp;lt;
? Display this help.&lt;/pre&gt;
&lt;p&gt;In this case I wanted to resubmit all of the files except the solution files, so I selected e&lt;/p&gt;
&lt;p&gt;That merged my change back in, but then dropped me back to the command prompt so I could further mangle the files. A quick revert got rid of the changed solution files, and then I used p4 resubmit -Re to resume the resubmit process.&lt;/p&gt;
&lt;pre&gt;p4 revert ....sln
p4 resubmit -Re&lt;/pre&gt;
&lt;p&gt;P4D submitted the change again, and cleaned up the shelf for me since I no longer needed it. With that tidied up I was ready to push and share my changes with the community.&lt;/p&gt;
&lt;pre&gt;p4 push&lt;/pre&gt;
&lt;p&gt;Sharing that broken change wouldn&amp;#8217;t have been the end of the world, but I felt so much more in control being able to clean up those .sln files before pushing out my change. Ever wish you could undo a merge between branches? With p4 unsubmit you can. Helix Versioning Engine gives you a way to safely experiment, modifying history as need be to make sure the changes your coworkers see are the ones you want them to see.&lt;/p&gt;
&lt;p&gt;Interested in trying it yourself? You&amp;#8217;re just a download of our Helix Versioning Engine and p4 init away from being able to try this all yourself. If you&amp;#8217;d like to push to a shared server the Workshop has been running 2015.1 since beta, and Helix Cloud is also using it. As always we&amp;#8217;re here to help, so if you have questions, just shout!&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Meet &amp; Greet and Workshop Tickets · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/meet-greet-and-workshop-tickets-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/meet-greet-and-workshop-tickets-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2027-codeconf-updates-meet-greet-and-workshop-tickets"&gt;https://github.com/blog/2027-codeconf-updates-meet-greet-and-workshop-tickets&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/4154342/8258112/331e2444-1667-11e5-8e3a-d14384941fd5.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/4154342/8258112/331e2444-1667-11e5-8e3a-d14384941fd5.png" alt="codeconf-twitter-topheader"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://codeconf.com/"&gt;CodeConf&lt;/a&gt; is next week, and I couldn't be more excited to bring the open source community together to exchange ideas and have some fun in Nashville. There are a few updates I'd like to share: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On June 24, the day before the conference, we'll be hosting a &lt;strong&gt;meet &amp;amp; greet&lt;/strong&gt; for attendees who would like to register early. This event is free and open to the public, so if you aren't attending CodeConf but live in the Nashville area and would like to stop by, &lt;a href="http://www.ticketbase.com/events/codeconf-2015"&gt;grab a ticket here&lt;/a&gt;. We'll be congregating on the second floor of &lt;a href="http://theacmenashville.com/"&gt;Acme Feed &amp;amp; Seed&lt;/a&gt; downtown beginning at 5:30pm &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;workshop schedule&lt;/strong&gt; has been updated, and I have opened up more space in each session for those interested. If you'd like to snag one of the newly available tickets, &lt;a href="http://www.ticketbase.com/events/codeconf-2015"&gt;go for it!&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's still time to grab a CodeConf ticket. &lt;a href="http://codeconf.com/"&gt;Take a look at the website for the full schedule of sessions, workshops, and sponsors.&lt;/a&gt; I hope to see you in Nashville. &lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>Merging Without a Base in Perforce Helix</title><link href="http://ciandcd.github.io/ciandcd-web/merging-without-a-base-in-perforce-helix.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/merging-without-a-base-in-perforce-helix.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150623/merging-without-base-perforce-helix"&gt;http://www.perforce.com/blog/150623/merging-without-base-perforce-helix&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;I recently had a question about merging files in Perforce Helix that have no direct lineage.&lt;/p&gt;
&lt;p&gt;For example, let's say you want to merge file //depot/main/foo.c (source) to //depot/dev/foo.c (target), which is fine, but you realize the target file was not branched from the source and there is no base (common ancestor). To determine the base, Helix uses integration history created by previous integration commands to know which file revisions to integrate. However, since dev/foo.c was not branched from main/foo.c there is no integration history between these two paths: a baseless merge. &amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/Merge-No-Base.png"&gt;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/baseless-default.png"&gt;&lt;/p&gt;
&lt;p&gt;To handle this scenario Helix does a two-way merge for the best results. All the diffs are considered conflicts. Why? Because in the absence of a base, we do not have any way to determine what differences are &amp;#8220;changes&amp;#8221; relative to the base, which is how we normally determine whether diffs are conflicting or not. We found the best and most accurate way to handle this scenario is scheduling a two-way merge.&amp;#160; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&lt;/p&gt;
&lt;p&gt;In the past, Helix would not allow baseless merges without the use of p4 integ command flags;&lt;/p&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; -i/-I uses the first revision of the source as the base for baseless merges, rather than an empty file.&amp;#160;&amp;#160;&amp;#160;&lt;/p&gt;
&lt;p&gt;With the old "-i" behavior, an arbitrarily chosen base can lead to lost changes as seen in the figure below. &amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/baseless-wipeout.png"&gt;&lt;/p&gt;
&lt;p&gt;This is why we changed the behavior. If you are stuck in the past, these flags are preserved for backward compatibility but are deprecated.&lt;/p&gt;
&lt;p&gt;To recap, with the current integration behavior, no flags are needed to handle baseless merges.&amp;#160; The Helix integration engine does the right thing for a more realistic and accurate result! Happy merging!&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Mobile File Finder · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/mobile-file-finder-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/mobile-file-finder-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2032-mobile-file-finder"&gt;https://github.com/blog/2032-mobile-file-finder&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;The &lt;a href="https://github.com/blog/793-introducing-the-file-finder"&gt;GitHub File Finder&lt;/a&gt; is now available on your mobile device. Just click the "Jump to file" link on any repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2567/8341351/26389bd6-1a79-11e5-98ff-da90172c03b2.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2567/8341351/26389bd6-1a79-11e5-98ff-da90172c03b2.png" alt="mobile-file-finder"&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>News from InfoSecurity 2015</title><link href="http://ciandcd.github.io/ciandcd-web/news-from-infosecurity-2015.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/news-from-infosecurity-2015.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150610/news-infosecurity-2015-0"&gt;http://www.perforce.com/blog/150610/news-infosecurity-2015-0&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/infoSec-blog-post.png"&gt;&lt;/p&gt;
&lt;p&gt;I've just returned from my first visit to &lt;a href="http://www.infosecurityeurope.com/"&gt;InfoSecurity 2015 in London&lt;/a&gt;. With the launch earlier this year of &lt;a href="http://www.perforce.com/threat-detection"&gt;Perforce Helix Threat Detection&lt;/a&gt; this was a great opportunity to review the state of the cyber-security world, hear about the key challenges facing governments, businesses and individuals and review some of the solutions being offered. This couldn't be more timely as, right when I'm writing this, it has been &lt;a href="http://www.bbc.co.uk/news/world-us-canada-33017310"&gt;announced&lt;/a&gt; that the U.S. government suffered a serious attack earlier this year which compromised the personal details of thousands of federal employees.&lt;/p&gt;
&lt;p&gt;My particular area of interest is the emerging role of security in DevOps. There are a few key aspects to consider:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
		&lt;p&gt;As a developer what do you need to do and how does that fit with agile and development processes?&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;As a Release Manager/Operations Specialist/DevOps Engineer what do you need to know to roll out and manage secure applications?&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;As a Chief Information Security Officer or Risk Manager what is going on in the development and operations areas that I ought to be concerned about?&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I haven't got space here to cover all of these topics, but here are a few highlights from the conversations I had at the conference.&lt;/p&gt;
&lt;p&gt;Development Managers and DevOps specialists are increasingly aware of the need for secure applications. They are concerned that as release cycle times reduce with the adoption of Continuous Delivery they don't reduce security nor slow down deliveries. Some companies are working out how to do this by involving security experts in the earliest stages of sprint planning and ensuring security stories are &amp;#8220;groomed&amp;#8221; to ensure they are properly positioned for priority in their backlogs. They're also adopting tools for automated code and application validation. It was interesting to see an increasing number of tools addressing the need for dynamic security testing. Although the term seems to have been around a few years already, there were a number of people talking about &amp;#8220;&lt;a href="https://vimeo.com/36342207"&gt;Rugged DevOps&lt;/a&gt;&amp;#8221; and I think this is an area that will continue to grow.&lt;/p&gt;
&lt;p&gt;Security experts, especially those involved in IT audits or risk assessments are busier than ever. Some are aware of the potential risks that may exist in their development organizations but I suspect the majority are not. This is the result of two issues.&lt;/p&gt;
&lt;p&gt;Firstly, they may not fully appreciate the value of the software being developed. They know that they need to protect customer and staff personal data, but they don't necessarily realize that the software is actually their company&amp;#8217;s competitive differentiator and could be critical if leaked to a competitor.&lt;/p&gt;
&lt;p&gt;Secondly there is a lot of technology involved that they don't understand. They may be familiar with firewalls, VPNs, email, etc., but developers often bring tools into the business without their knowledge and these tools, such as Subversion or Git are inherently vulnerable. It's increasingly hard to keep track of business documents in a world full of email, cloud file sharing services and BYOD mobiles, but this technical software content is even harder to grasp.&lt;/p&gt;
&lt;p&gt;I saw a number of tools that try to address some of these problems by monitoring network traffic rather than trying to lock down each application. This generates another problem though &amp;#8211; if you're monitoring hundreds or thousands of different file types and communications, it quickly becomes an impossible management challenge.&lt;/p&gt;
&lt;p&gt;A few tools are trying to address that problem by using analytics to analyze the basic data and infer what looks like suspicious behavior.&amp;#160; This helps with the management issue but they still don't understand the context of the data being moved around the organization which makes them inefficient for DevOps.&lt;/p&gt;
&lt;p&gt;I didn't see anything that was close to &lt;a href="http://www.perforce.com/threat-detection"&gt;Perforce Helix Threat Detection&lt;/a&gt;, which focuses on protecting this valuable IP being created by design and development teams. Because it uses the rich data available from the &lt;a href="http://www.perforce.com/helix"&gt;Helix Versioning Engine&lt;/a&gt; it understands the context of the files being accessed. It can not only track that a user may be accessing more files than usual (and most tools can't work out what &amp;#8220;normal&amp;#8221; means), but it also understands whether those files are in projects they &amp;#8220;normally&amp;#8221; use or whether they're using the files in ways that are unusual for the user.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m really looking forward to the &lt;a href="http://info.perforce.com/webinar-overview-security-devops.html"&gt;webinar Perforce are hosting on June 16th&lt;/a&gt; where the Forrester DevOps Analysts, Kirt Bittner, and Security Analyst, Rick Holland will talk about the issues raised above and the solutions to them.&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Next Round of Online Training: Helix DVCS</title><link href="http://ciandcd.github.io/ciandcd-web/next-round-of-online-training-helix-dvcs.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/next-round-of-online-training-helix-dvcs.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150612/next-round-online-training-helix-dvcs"&gt;http://www.perforce.com/blog/150612/next-round-online-training-helix-dvcs&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p align="center"&gt;&lt;img alt="Perforce Helix Training" src="/sites/default/files/training-blogimage.png"&gt;&lt;/p&gt;
&lt;p&gt;Back in March, we announced our new &lt;a href="http://www.perforce.com/blog/150402/now-available-helix-versioning-engine-dvcs-capabilities"&gt;Helix platform&lt;/a&gt; which includes highly anticipated distributed version control (DVCS) capabilities. For some of you, hearing that we now offer DVCS may have been music to your ears. For others, it may have invoked curiosity and added another acronym to your lexicon.&lt;/p&gt;
&lt;p&gt;Given the recent proliferation of Git-style workflows, we are seeing a lot of developers finding themselves working with their own private, local versioning repositories while collaborating with teammates via the new init/clone/pull/push command set. But did you know that you can now rewrite the history of changes in your personal repository before sharing them?&lt;/p&gt;
&lt;p&gt;To help you come up to speed with Helix DVCS, we are pleased to announce the availability of a new instructor-led training course. The Helix DVCS course will take place online via Webex and will include hands-on lab exercises within our lab environment.&lt;/p&gt;
&lt;p&gt;The class is taught by our expert Professional Services consultants who have a lot of experience advising customers. Topics on this new half-day course will include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Why do you need DVCS?&lt;/li&gt;
	&lt;li&gt;Overview of DVCS architecture and workflows&lt;/li&gt;
	&lt;li&gt;Basic DVCS operations&lt;/li&gt;
	&lt;li&gt;How to perform initial setup&lt;/li&gt;
	&lt;li&gt;Working with multiple streams&lt;/li&gt;
	&lt;li&gt;Rewriting history&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The first class is now scheduled for European customers on June 29, 9am &amp;#8211; 1pm, British Summer Time (GMT+1). We will have a DVCS training for North American customers in the weeks that follow. So &lt;a href="http://www.perforce.com/support-services/instructor-led-training/course-schedule"&gt;sign up here&lt;/a&gt; and bring along your questions about DVCS.&amp;#160;&lt;/p&gt;
&lt;p&gt;The class does assume that you are already familiar with Perforce Helix, so if you&amp;#8217;re new to Helix, we also offer introductory courses. Check out our &lt;a href="http://www.perforce.com/support-services/instructor-led-training/course-schedule"&gt;course schedule&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;Any questions, just email training@perforce.com.&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Note on license expiration in GitLab 7.10.5 EE</title><link href="http://ciandcd.github.io/ciandcd-web/note-on-license-expiration-in-gitlab-7105-ee.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/note-on-license-expiration-in-gitlab-7105-ee.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/04/note-on-license-expiration-in-gitlab-7-dot-10-dot-5-ee/"&gt;https://www.gitlab.com/2015/06/04/note-on-license-expiration-in-gitlab-7-dot-10-dot-5-ee/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Note on license expiration in GitLab 7.10.5 EE&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;If you&amp;#8217;re upgrading to GitLab Enterprise Edition 7.11, which introduces
licenses keys, you&amp;#8217;re probably planning to upgrade to 7.10.5 first.
This way you are able to &lt;a href="https://about.gitlab.com/2015/05/27/gitlab-7-dot-10-dot-5-released/"&gt;upload your license key in advance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of our customers notified us of a faulty description in the license
uploader in GitLab 7.10.5. Upon uploading, the license is checked properly,
however the text in the license view in the admin page in GitLab will show:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_10_5/wrong.png" alt="Wrong text"&gt;&lt;/p&gt;

&lt;p&gt;While it should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_10_5/correct.png" alt="Correct text"&gt;&lt;/p&gt;

&lt;p&gt;This only occurs in GitLab 7.10.5 and does not affect functionality.
The license information is correctly shown in GitLab 7.11 and up.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments do not hesitate to comment below
or contact support.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Octicon Buttons Are Here! · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/octicon-buttons-are-here-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/octicon-buttons-are-here-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2030-octicon-buttons-are-here"&gt;https://github.com/blog/2030-octicon-buttons-are-here&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Graphs, and pencils, and locks...Oh my! Now you can collect themed &lt;a href="https://octicons.github.com"&gt;Octicon&lt;/a&gt; buttons with the &lt;a href="http://github.myshopify.com/products/octicon-buttons"&gt;four
new button packs&lt;/a&gt; offered in the &lt;a href="http://github.myshopify.com/"&gt;GitHub Shop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.myshopify.com/products/octicon-buttons"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/5945961/8299483/e7da3de6-192d-11e5-9613-bed81f1c890b.jpg" alt="Octicon Buttons"&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>P4Python goes pip</title><link href="http://ciandcd.github.io/ciandcd-web/p4python-goes-pip.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/p4python-goes-pip.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150514/p4python-goes-pip-0"&gt;http://www.perforce.com/blog/150514/p4python-goes-pip-0&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/title-tip-tricks9.png"&gt;&lt;/p&gt;
&lt;p&gt;In recent years Python has changed its package manager strategy, and the result is &lt;strong&gt;pip&lt;/strong&gt;. Pip is a powerful package manager that simplifies the creation and consumption of Python packages, turning the &lt;a href="http://pypi.python.org"&gt;Python Package Index&lt;/a&gt; into a hub of an ever-growing number of useful packages.&lt;/p&gt;
&lt;p&gt;P4Python always had to stay away from the package index because it requires binary builds for some platforms. With the advent of the &lt;a href="http://pythonwheels.com/"&gt;wheel&lt;/a&gt; format, this has changed. Wheels are Python packages that can contain binary builds on Windows and OSX, allowing package creators to precompile their packages.&lt;/p&gt;
&lt;p&gt;P4Python 2015.1 has been uploaded to the Python Package Index. For you this means installing the latest release of P4Python becomes a simple:&lt;/p&gt;
&lt;pre&gt;    pip install p4python&lt;/pre&gt;&lt;p&gt;Easier, isn&amp;#8217;t it?&lt;/p&gt;
&lt;p&gt;However, there are a few preparations you need to make before you can run this command the first time successfully:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;You need to have the right version of Python installed: 2.7, 3.3 or 3.4. Python 2.6 is supported but we have not uploaded binaries for it.&lt;/li&gt;
&lt;li&gt;You need to install pip. It comes with Python 3.4 and 2.7.9 automatically; everyone else will need to install it, for example from &lt;a href="https://bootstrap.pypa.io/get-pip.py"&gt;here&lt;/a&gt;, and make sure the pip executable is in your PATH.&lt;/li&gt;
&lt;li&gt;There is currently no binary wheel format available for Linux, so pip will download the source code of P4Python and attempt to build it. This requires &amp;#8216;python-dev&amp;#8217; and &amp;#8216;build-essential&amp;#8217; installed on Debian-based distributions (using apt) and the equivalent on RPM-based (using yum).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In order to build P4Python automatically from Pip, setup.py has also gained some new tricks.&lt;/p&gt;
&lt;p&gt;First of all, it now uses setuptools and not distutils, so you need to have setuptools installed if you want to build it on, say, Python 2.6.&lt;/p&gt;
&lt;p&gt;If you run setup.py without the &amp;#8211;apidir option, setup will now go off and attempt to download the correct P4API binaries from &lt;a href="ftp://ftp.perforce.com"&gt;the Perforce FTP site&lt;/a&gt; for your platform. The API will be downloaded and unpacked into the temp directory and used automatically by the build process.&lt;/p&gt;
&lt;p&gt;You can still download the source or the packages, of course, and install P4Python the traditional way if you prefer.&lt;/p&gt;
&lt;p&gt;I found pip amazingly simple to use, and I hope it will make your life a lot easier when installing P4Python. As usual, if you have any issues or requests, let us know in &lt;a href="http://www.perforce.com/support-services"&gt;Perforce Support&lt;/a&gt; or ping me on my Twitter handle &lt;a href="https://twitter.com/p4sven"&gt;@p4sven&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Perforce Takes to the Road in 2015</title><link href="http://ciandcd.github.io/ciandcd-web/perforce-takes-to-the-road-in-2015.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/perforce-takes-to-the-road-in-2015.html</id><summary type="html"></summary><content type="html">From:&lt;a href="http://www.perforce.com/blog/150622/perforce-takes-road-2015"&gt;http://www.perforce.com/blog/150622/perforce-takes-road-2015&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;We&amp;#8217;re hitting the road again this year with a series of one-day events focused on better ways to build and secure complex products. These events will prove interesting to professionals at every phase of the product lifecyle and from companies of any size.&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/perforce-on-tour-cities.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://info.perforce.com/PerforceOnTour2015.html?utm_source=p4blog&amp;amp;utm_medium=social&amp;amp;utm_campaign=UK_2015_EP4_Perforce_on_Tour"&gt;Register today&lt;/a&gt;&amp;#160;for in-depth discussions of the challenges companies face in getting complex products to market quickly without sacrificing quality or security. These events are also great opportunities to network with your peers and to hear about the latest innovations from Perforce. No matter if you&amp;#8217;re a Perforce user or not, you&amp;#8217;ll find it a valuable use of your time.&amp;#160;&lt;/p&gt;
&lt;h4&gt;Hear from the Experts&lt;/h4&gt;
&lt;p&gt;Hear from thought leaders who are well practiced in modern development practices like Continuous Delivery and DevOps. You&amp;#8217;ll get practical advice that you can put to good use immediately.&lt;/p&gt;
&lt;h4&gt;Keep Good Company&lt;/h4&gt;
&lt;p&gt;Spend a day with like-minded individuals and innovative product developers. The majority of sessions will be by Perforce customers, who will share practical advice from their real-world experiences. Of course, our trainers and consultants will also be on hand to answer any questions you have about new products and capabilities from Perforce.&lt;/p&gt;
&lt;h4&gt;Stay for the Party!&lt;/h4&gt;
&lt;p&gt;These events are free of charge and full of informational sessions. They also promise to be very fun. No Perforce event is complete without an elegant setting, great food and lavish drinks to end the day in style. You won&amp;#8217;t be disappointed!&lt;/p&gt;
&lt;p&gt;So far, we&amp;#8217;ve scheduled tour stops in the following cities (with more to come):&lt;/p&gt;
&lt;p&gt;Milan &amp;#8211; June 25&lt;br&gt;
	Sydney &amp;#8211; July 21&lt;br&gt;
	Berlin &amp;#8211; Sept 16&lt;br&gt;
	London &amp;#8211; Sept 22&lt;/p&gt;
&lt;p&gt;Space is limited, so&amp;#160;&lt;a href="http://info.perforce.com/PerforceOnTour2015.html?utm_source=p4blog&amp;amp;utm_medium=social&amp;amp;utm_campaign=UK_2015_EP4_Perforce_on_Tour"&gt;register today&lt;/a&gt; and secure your place!&lt;/p&gt;
&lt;/div&gt;</content></entry><entry><title>Read-only deploy keys · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/read-only-deploy-keys-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/read-only-deploy-keys-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2024-read-only-deploy-keys"&gt;https://github.com/blog/2024-read-only-deploy-keys&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;You can now create deploy keys with read-only access. A deploy key is an SSH key that is stored on your server and grants access to a single GitHub repository. They are often used to clone repositories during deploys or continuous integration runs. Deploys sometimes involve merging branches and pushing code, so deploy keys have always allowed both read and write access. Because write access is undesirable in many cases, you now have the ability to create deploy keys with read-only access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/1144197/8164374/e76a0e24-1345-11e5-93b0-fd04b6a3446c.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/1144197/8164374/e76a0e24-1345-11e5-93b0-fd04b6a3446c.png" alt="viewing and adding deploy keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New deploy keys created through GitHub.com will be read-only by default and can be given write access by selecting "Allow write access" during creation. Access level can be specified when &lt;a href="https://developer.github.com/v3/repos/keys/"&gt;creating deploy keys from the API&lt;/a&gt; as well.&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>Release Manager - The invisible hero</title><link href="http://ciandcd.github.io/ciandcd-web/release-manager-the-invisible-hero.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/release-manager-the-invisible-hero.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/06/25/release-manager-the-invisible-hero/"&gt;https://www.gitlab.com/2015/06/25/release-manager-the-invisible-hero/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Real heroes are sometimes unknown and we can only see their accomplishments. In GitLab we have one invisible hero every month, when we have our monthly release. As you may know, we&amp;#8217;ve never failed to release a new GitLab version on the 22nd of every month.&lt;/p&gt;

&lt;p&gt;As GitLab grows, the release process becomes more complex and becoming a release manager is a more difficult, but a necessary job.&lt;/p&gt;

&lt;p&gt;Eight working days before the next release, and we start the countdown. A new volunteer &amp;#8220;hero&amp;#8221; is elected by the team.&lt;/p&gt;

 


&lt;h2&gt;But, why is it such a challenging job?&lt;/h2&gt;

&lt;p&gt;A release manager is the person who makes sure that everything is ready for the monthly release. They follow up on every single detail and make sure that the new version is working perfectly, including all the improvements and features. They also need to delegate some tasks and make sure that the procedure is being followed.&lt;/p&gt;

&lt;p&gt;Consider that right now, GitLab is huge. Our community dishes out around 900 commits a month on GitLab alone. Add Enterprise Edition, GitLab CI and runners, Omnibus-GitLab packages and you get several thousand changes done by hundreds of developers across projects which need to come together (and work) in one day. This is a lot of responsibility for one person.&lt;/p&gt;

&lt;h2&gt;So, how do we manage to make it all into a single release every month?&lt;/h2&gt;

&lt;p&gt;In GitLab we have a &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/tree/master/doc/release"&gt;release directory&lt;/a&gt; for the release documents. The most powerful document for the release is called &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/release/monthly.md"&gt;monthly.md&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Release manager tasks can be broken down into:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure that GitLab CE, EE and GitLab CI repositories have an updated installation and upgraded guides&lt;/li&gt;
&lt;li&gt;Make sure that the Omnibus-GitLab package will be ready for the release&lt;/li&gt;
&lt;li&gt;Release the RC version, do QA, deploy on GitLab.com and ci.GitLab.com&lt;/li&gt;
&lt;li&gt;Follow reported regressions and make sure that developers are aware/working on a fix&lt;/li&gt;
&lt;li&gt;Decide which fixes can go into the release&lt;/li&gt;
&lt;li&gt;Coordinate the package building&lt;/li&gt;
&lt;li&gt;Make sure that the blog post contains all the necessary information&lt;/li&gt;
&lt;li&gt;Do the final release&lt;/li&gt;
&lt;li&gt;Decide if there needs to be a patch release&lt;/li&gt;
&lt;li&gt;Coordinate patch release&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;A release manager volunteers to work late (or early) to get the packages out or deploy the new version to one of our services. No one is forcing you to do so, but if you don&amp;#8217;t, it will complicate the following day. This is a weakness in our process, so we need to work on improving this situation.&lt;/p&gt;

&lt;h2&gt;History&lt;/h2&gt;

&lt;p&gt;I don&amp;#8217;t know the exact date when the release manager duty was thought off but it was &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/commit/223070b3fe9cb302d3d47ba5a616d90bab8910fd"&gt;around version 6.4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At that time, we had a couple of other things that were the release manager tasks: Notify everyone of the code-freeze (nothing was merged to master during this time), enforce it and build the packages manually. Yes, manually. This meant connecting to all machines separately and doing few commands to initiate package building. GitLab.com had a separate repository with some custom code, so the deploy needed to be done manually too. I still have nightmares as a result of these 2 things.&lt;/p&gt;

&lt;p&gt;As you can imagine, this made the release manager tasks very undesirable and limited to a few people. Even with all the improvements that followed, this job is still not popular.&lt;/p&gt;

&lt;h2&gt;Improvements&lt;/h2&gt;

&lt;p&gt;Since the painful beginings of the release manager tasks, we&amp;#8217;ve done number of improvements. We did a massive change to the process and made it even more continuous integration oriented than it was before. There are risks to it, but also massive gains:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Code freeze was removed so there is no need to watch over anyone&amp;#8217;s shoulders&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keeping X git repos in sync. Syncing repositories is now a one-line script where the argument is the version that is being released&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatizing our release process. Omnibus-gitlab packages infrastructure got built, so only supplying the shas of the release version is enough to kick off the automatic builds on all platforms and machines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Infrastructure for deploying GitLab.com and ci.gitlab.com got created and they are being updated by using a few lines of commands and packages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The release documentation has been updated so many times that room for error is minimal (if you follow the steps closely)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You would expect that all these improvements would make the Release manager job more appealing since you get to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boss around over all of your colleagues. This includes the project lead and the CEO. It is especially sweet when you can say NO to an unreasonable request. After all, all requests are unreasonable but your own and now you get to push that through&lt;/li&gt;
&lt;li&gt;You decide at your leasure when something will be included and pushed&lt;/li&gt;
&lt;li&gt;You are the boss of everything (for a period of time) because everyone says: &amp;#8220;Hey, you are the release manager, your call&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;With all the hard work, how do we choose a volunteer release manager?&lt;/h2&gt;

&lt;p&gt;Choosing the release manager is probably one of the hardest tasks.&lt;/p&gt;

&lt;p&gt;During our team call, the release manager for the previous release mentions the subject of selecting a new release manager.&lt;/p&gt;

&lt;p&gt;At that exact moment, there&amp;#8217;s silence, cameras and mics start breaking down, people forget the whole English language, there is always someone at the door so you need to open it and lots of faces are just looking around the room.&lt;/p&gt;

&lt;p&gt;After a few minutes of silence, decision is made, but mostly because we are all friends and we don&amp;#8217;t want to see a colleague suffer for another month.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve tried improving the desirablity of this task by making procedures easier, but that is still a challenge.&lt;/p&gt;

&lt;p&gt;At some point I&amp;#8217;ve asked what kind of reward we could put forward to make people happy to volunteer, but there are no good ideas yet.&lt;/p&gt;

&lt;p&gt;My ideas where limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Material reward: a gift might be OK for some people, but others have no need for things. In this case we could publicly thank them and acknowledge their work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#8220;Spiritual&amp;#8221; reward: We do say &amp;#8220;thank you&amp;#8221; to the RM a lot, but this gets spent. Tweeting the name of the release manager might work as a recongnition for some, but I am afraid that it won&amp;#8217;t work for introverts in our team. Being more public might also yield more work for them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buying a beer or cocktail: This feels like something that would be appreciated, but it would only work for a few employees, since we are a very remote company. Maybe a beer voucher could be sent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With that I was out of ideas. This blog post is an attempt to say a thank you to all the release managers. You know who you are and you are a true invisible hero for accomplishing the tasks to make everything go out on schedule.&lt;/p&gt;

&lt;p&gt;Do you have any ideas?&lt;/p&gt;

&lt;h3&gt;Release manager - my hero.&lt;/h3&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Security advisory for Logjam vulnerability</title><link href="http://ciandcd.github.io/ciandcd-web/security-advisory-for-logjam-vulnerability.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/security-advisory-for-logjam-vulnerability.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/05/21/security-advisory-for-logjam-vulnerability/"&gt;https://www.gitlab.com/2015/05/21/security-advisory-for-logjam-vulnerability/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Security advisory for Logjam vulnerability&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;A recently announced &lt;a href="https://weakdh.org/"&gt;Logjam vulnerability&lt;/a&gt; allows an attacker to do a man-in-the-middle attack, allowing them to downgrade a TLS connection to 512-bit DH parameters. More details on what that is and means can be &lt;a href="https://www.openssl.org/blog/blog/2015/05/20/logjam-freak-upcoming-changes/"&gt;found on openssl blog&lt;/a&gt;.&lt;/p&gt;

 


&lt;h3&gt;Impact on GitLab&lt;/h3&gt;

&lt;p&gt;GitLab is using, by default, up-to-date SSL ciphers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Export Cipher Suites&lt;/code&gt; are not used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Elliptic-Curve Diffie-Hellman&lt;/code&gt; ciphers are used&lt;/li&gt;
&lt;li&gt;By default, 1024-bit DH groups are used&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This means that GitLab is safe in principle. When using 1028-bit DH groups there is a small chance that an attacker with nation-state resources could be eavesdropping.&lt;/p&gt;

&lt;p&gt;If you find this insufficient for your GitLab installation, you can generate 2048-bit DH groups and enable the &lt;code&gt;ssl_dhparam&lt;/code&gt; option in NGINX config.&lt;/p&gt;

&lt;p&gt;Params can be generated with:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;p class="line"&gt;openssl dhparam -out dhparams.pem 2048
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;After the &lt;code&gt;dhparams.pem&lt;/code&gt; file has been generated you will need to tell Nginx where the file is located:&lt;/p&gt;

&lt;h4&gt;GitLab installations using omnibus-gitlab packages&lt;/h4&gt;

&lt;p&gt;For packages version 7.11.0 and up.&lt;/p&gt;

&lt;p&gt;Place the &lt;code&gt;dhparams.pem&lt;/code&gt; file in &lt;code&gt;/etc/gitlab/ssl/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;, enable the following setting:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class="ruby"&gt;&lt;p class="line"&gt;&lt;p class="n"&gt;nginx&lt;/p&gt;&lt;p class="o"&gt;[&lt;/p&gt;&lt;p class="s1"&gt;'ssl_dhparam'&lt;/p&gt;&lt;p class="o"&gt;]&lt;/p&gt; &lt;p class="o"&gt;=&lt;/p&gt; &lt;p class="s2"&gt;"/etc/gitlab/ssl/dhparams.pem"&lt;/p&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;and do &lt;code&gt;sudo gitlab-ctl reconfigure&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;More information can be &lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/7-11-stable/doc/settings/nginx.md#using-custom-ssl-ciphers"&gt;found in the omnibus-gitlab nginx documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Workaround for packages prior to version 7.11.0&lt;/p&gt;

&lt;p&gt;Place the &lt;code&gt;dhparams.pem&lt;/code&gt; file in &lt;code&gt;/etc/gitlab/ssl/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;, enable the following setting:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class="ruby"&gt;&lt;p class="line"&gt;&lt;p class="n"&gt;nginx&lt;/p&gt;&lt;p class="o"&gt;[&lt;/p&gt;&lt;p class="s1"&gt;'custom_gitlab_server_config'&lt;/p&gt;&lt;p class="o"&gt;]&lt;/p&gt; &lt;p class="o"&gt;=&lt;/p&gt; &lt;p class="s2"&gt;"ssl_dhparam /etc/gitlab/ssl/dhparams.pem;&lt;/p&gt;&lt;p class="se"&gt;\n&lt;/p&gt;&lt;p class="s2"&gt;"&lt;/p&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;and run &lt;code&gt;sudo gitlab-ctl reconfigure&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;GitLab installations from source&lt;/h4&gt;

&lt;p&gt;Place the generated &lt;code&gt;dhparams.pem&lt;/code&gt; in a suitable location, for example &lt;code&gt;/etc/nginx/ssl/dhparams.pem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In GitLab nginx config find &lt;code&gt;ssl_dhparam&lt;/code&gt; config and set it to &lt;code&gt;ssl_dhparam /etc/nginx/ssl/dhparams.pem;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reload your nginx config.&lt;/p&gt;

&lt;h3&gt;Impact on GitLab.com&lt;/h3&gt;

&lt;p&gt;GitLab.com is using 1028-bit DH groups. Due to incompatibilities with older Java-based clients we haven&amp;#8217;t enabled 2048-bit DH params yet as this would prevent some people from using GitLab.com. We are looking into ways to keep a good SSLlabs score and allowing users with older Java-base clients to use GitLab.com.&lt;/p&gt;

&lt;p&gt;We are examining the impact of this and we will update this blog post once we have more information.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Simple words for a GitLab Newbie</title><link href="http://ciandcd.github.io/ciandcd-web/simple-words-for-a-gitlab-newbie.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/simple-words-for-a-gitlab-newbie.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.gitlab.com/2015/05/18/simple-words-for-a-gitlab-newbie/"&gt;https://www.gitlab.com/2015/05/18/simple-words-for-a-gitlab-newbie/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;For most of us, when we work with a new tool, there&amp;#8217;s a process of learning the right vocabulary and the best steps to make things happen; this while we try to keep the best attitude. Not very long ago, I learned how to use Git and GitLab and it was a little bit painful. I read a lot about it, but it was mostly vocabulary that didn&amp;#8217;t make any sense to me. If you&amp;#8217;ve been there or if you are there now, you&amp;#8217;ll know what I&amp;#8217;m talking about (some people may have it naturally).&lt;/p&gt;

&lt;p&gt;So, to make this learning process easier for others, I took many of the basic Git vocabulary and wrote easy definitions for each word. I hope they are useful for you and please share them with your Git and Gitlab newbie friends!&lt;/p&gt;

 


&lt;h2&gt;Cloud Based Services&lt;/h2&gt;

&lt;p&gt;What is a cloud based service? It&amp;#8217;s a service or resource that is opposed to services that are hosted on the servers inside a company, which is the traditional way of doing it. It helps people and companies lower their costs and be more efficient while helping with different functions such as trannings, storage, etc.
GitLab.com is a cloud based service because it can be hosted both in house and in the cloud.&lt;/p&gt;

&lt;h2&gt;Source control or revision control software&lt;/h2&gt;

&lt;p&gt;What is source control? It&amp;#8217;s a system that records and manages changes to projects, files and documents. It helps you recall specific versions later. It also makes it easier to collaborate, because it shows who has changed what and helps you combine contributions.&lt;/p&gt;

&lt;h2&gt;Continuous Integration&lt;/h2&gt;

&lt;p&gt;What is continuous integration? It&amp;#8217;s the system of continuously incorporating the work advances with a shared mainline in a project. Git and GitLab together make continuous integration happen.&lt;/p&gt;

&lt;h2&gt;Continuous deployment&lt;/h2&gt;

&lt;p&gt;What is continuous deployment? It means that whenever there is a change to the code, it is deployed or made live immediately. This is in contrast to continous integration, where code is continuously being merged in the mainline and is always ready to be deployed, rather than actually deployed.
When people talk about CI and CD what they usually mean to say is that they are constantly and automatically testing their code against their tests using a tool such as GitLab CI and upon passing to a certain action. That action could be merging the code into a branch (master, production, etc), deploying it to a server or building a package / piece of software out of it.
Non-continuous integration would be everyone working on something and only integrating all the work as the very last step. Obviously, that results in many conflicts and issues, which is why CI is adopted widely nowadays.&lt;/p&gt;

&lt;h2&gt;Git&lt;/h2&gt;

&lt;p&gt;What is Git? Git is a system where you can create projects of different sizes with speed and efficiency. It helps you manage code, communicate and collaborate on different software projects.
Git will allow you to go back to a previous status on a project or to see its entire evolution since the project was created.
You could think of it as a time machine which will allow you to go back in time to whenever you&amp;#8217;d like in your project.
With Git, 3 basic issues were solved when working on projects:
1. It became easier to manage large projects.
2. It helps you avoid overwriting the team&amp;#8217;s advances and work.
3. With git, you just pull the entire code and history to your machine, so you can calmly work in your own little space without interference or boundaries. It&amp;#8217;s much simpler and much more light-weight.&lt;/p&gt;

&lt;h2&gt;Repository&lt;/h2&gt;

&lt;p&gt;What is a repository? The place where the history of your work is stored.&lt;/p&gt;

&lt;h2&gt;Remote repository&lt;/h2&gt;

&lt;p&gt;What is a remote repository? It&amp;#8217;s a repository that is not-on-your-machine, so it&amp;#8217;s anything that is not your computer. Usually, it is online, GitLab.com for instance. The main remote repository is usually called &amp;#8220;Origin&amp;#8221;.&lt;/p&gt;

&lt;h2&gt;Commit&lt;/h2&gt;

&lt;p&gt;What is a commit? It&amp;#8217;s the way you call the latest changes of source code that you made on a repository. When changes are tracked, commits mark the changes on a document.&lt;/p&gt;

&lt;h2&gt;Master&lt;/h2&gt;

&lt;p&gt;What is a master? It&amp;#8217;s how you call the main and definitive branch (the independent line of development of a project).&lt;/p&gt;

&lt;h2&gt;Branch&lt;/h2&gt;

&lt;p&gt;What is a branch? It&amp;#8217;s an independent line of development. They are a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in taking the source from someone&amp;#8217;s repository (the place where the history of your work is stored) at certain point in time, and apply your own changes to it in the history of the project.&lt;/p&gt;

&lt;h2&gt;Fork&lt;/h2&gt;

&lt;p&gt;What is a fork? It&amp;#8217;s a copy of an original repository (the place where the history of your work is stored) that you can put somewhere else or where you can experiment and apply changes that you can later decide if publishing or not, without affecting your original project.&lt;/p&gt;

&lt;h2&gt;Git Clone&lt;/h2&gt;

&lt;p&gt;What is a clone? It&amp;#8217;s to get a copy of a git project to look at or to use the code.&lt;/p&gt;

&lt;h2&gt;Git Merge&lt;/h2&gt;

&lt;p&gt;What is to merge? It&amp;#8217;s integrating separate changes that you made to a project, on different branches.&lt;/p&gt;

&lt;h2&gt;md: markdown&lt;/h2&gt;

&lt;p&gt;What is markdown? It&amp;#8217;s a plain text format that will make any document easy-to-write and easy-to-read.&lt;/p&gt;

&lt;h2&gt;Push a repository&lt;/h2&gt;

&lt;p&gt;What is to push a repository? It&amp;#8217;s to incorporate a local branch (the independent line of development of a project) to a remote repository (online version of your project).&lt;/p&gt;

&lt;h2&gt;README.md&lt;/h2&gt;

&lt;p&gt;What is a README.md? I&amp;#8217;t a file in a simple format which summarizes a repository. If there&amp;#8217;s also a README (without the .md), the README.md will have priority.&lt;/p&gt;

&lt;h2&gt;SSH (secure shell protocol)&lt;/h2&gt;

&lt;p&gt;What is SSH? It&amp;#8217;s how you call the commands that help communicate through a network and that are encrypted and secure. It&amp;#8217;s used for remote logins and it helps users connect to a server in a secure way.&lt;/p&gt;

&lt;h2&gt;Stage Files&lt;/h2&gt;

&lt;p&gt;What is to stage a file? It&amp;#8217;s how you call the act of preparing a file for a commit (the latest changes of source code in a repository).&lt;/p&gt;

&lt;h2&gt;GitLab&lt;/h2&gt;

&lt;p&gt;What is GitLab? GitLab is an online Git repository manager with a wiki, issue tracking, CI and CD. It is a great way to manage git repositories on a centralized server. GitLab gives you complete control over your repositories or projects and allows you to decide whether they are public or private for free.&lt;/p&gt;

&lt;h3&gt;GitLab.com&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;GitLab.com hosts your (private) software projects for free.&lt;/li&gt;
&lt;li&gt;It offers free public and private repositories, issue-tracking and wikis.&lt;/li&gt;
&lt;li&gt;It runs GitLab Enterprise Edition and GitLab CI.&lt;/li&gt;
&lt;li&gt;No installation required, you can just sign up for a free account.
Support Package:&lt;/li&gt;
&lt;li&gt;Free subscribers can use the GitLab.com Support Forum if they have questions.&lt;/li&gt;
&lt;li&gt;GitLab.com Bronze Support will let you email support directly for timely, personal and private answers. This costs $9.99 per user per year for next-business-day response time and is available in packs of 20 users.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;GitLab Community Edition (CE)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Free, self hosted application where you can get support from the Community&lt;/li&gt;
&lt;li&gt;Feature rich: Git repository management, code reviews, issue tracking, activity feeds and wikis. It comes with GitLab CI for continuous integration and delivery.&lt;/li&gt;
&lt;li&gt;Open Source: MIT licensed, community driven, 700+ contributors, inspect and modify the source, easy to integrate into your infrastructure.&lt;/li&gt;
&lt;li&gt;Scalable: support 25,000 users on one server or a highly available active/active cluster.&lt;/li&gt;
&lt;li&gt;Merge requests with line-by-line comments, CI and issue tracker integrations.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;GitLab Enterprise Edition (EE)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Self hosted application that comes with additional support.&lt;/li&gt;
&lt;li&gt;Builds on top of the Community Edition and includes extra features mainly aimed at organizations with more than 100 users.&lt;/li&gt;
&lt;li&gt;It has LDAP group sync, audit logs and multiple roles.&lt;/li&gt;
&lt;li&gt;It includes deeper authentication and authorization integration, has fine-grained workflow management, has extra server management options and it integrates with your tool stack.&lt;/li&gt;
&lt;li&gt;GitLab EE runs on your servers.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;GitLab Continuous Integration (CI)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Free, self hosted application that integrates with GitLab CE/EE. Also availble as SaaS at ci.gitlab.com.&lt;/li&gt;
&lt;li&gt;Easy to set up since it is included in Omnibus packages of GitLab or use it for free on ci.gitlab.com.&lt;/li&gt;
&lt;li&gt;Beautiful interface with a clear menu structure.&lt;/li&gt;
&lt;li&gt;Performant and stable, as tests run distributed on separate machines.&lt;/li&gt;
&lt;li&gt;Will help you receive test results faster with each commit running in parallel on multiple jobs.&lt;/li&gt;
&lt;li&gt;Free to use and completely open source. All CI code is MIT licensed.&lt;/li&gt;
&lt;/ul&gt;


                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</content></entry><entry><title>Student hackathon organizers, join us for Hackcon at GitHub HQ · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/student-hackathon-organizers-join-us-for-hackcon-at-github-hq-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/student-hackathon-organizers-join-us-for-hackcon-at-github-hq-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2026-student-hackathon-organizers-join-us-for-hackcon-at-github-hq"&gt;https://github.com/blog/2026-student-hackathon-organizers-join-us-for-hackcon-at-github-hq&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;We're hosting &lt;a href="http://hackcon.io"&gt;Hackcon III&lt;/a&gt; at our San Francisco office on July 18th and 19th.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://hackcon.io"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/123345/8124060/1b465136-1110-11e5-8355-d0c5760bf332.png" alt="hackcon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hackcon is the place to be for student hackathon organizers. The event is run by our friends at &lt;a href="http://mlh.io"&gt;Major League Hacking&lt;/a&gt; and will bring together 150 student leaders for two days of talks and workshops. Participants will share experience and best practices in everything from starting a campus group to producing large scale campus events.&lt;/p&gt;

&lt;p&gt;If you lead a student hacker community at your university, we'd love to see you at Hackcon. You can find more information about the event and pre-register at &lt;a href="http://hackcon.io/"&gt;hackcon.io&lt;/a&gt;. You can also check out the videos from &lt;a href="https://www.youtube.com/playlist?list=PLPDgudJ_VDUdqhQldG7SqXGxaj-FiLGmP"&gt;Hackcon I&lt;/a&gt; and &lt;a href="https://www.youtube.com/playlist?list=PLPDgudJ_VDUfQcMWbEgEsJS270FvfNGFG"&gt;Hackcon II&lt;/a&gt; on YouTube.&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>Support LGBTQ tech organizations with the Pridetocat Shirt · GitHub</title><link href="http://ciandcd.github.io/ciandcd-web/support-lgbtq-tech-organizations-with-the-pridetocat-shirt-github.html" rel="alternate"></link><published>2017-05-08T19:13:32+08:00</published><updated>2017-05-08T19:13:32+08:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-05-08:/ciandcd-web/support-lgbtq-tech-organizations-with-the-pridetocat-shirt-github.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://github.com/blog/2016-support-lgbtq-tech-organizations-with-the-pridetocat-shirt"&gt;https://github.com/blog/2016-support-lgbtq-tech-organizations-with-the-pridetocat-shirt&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;With the purchase of the Pridetocat Shirt you will be assisting &lt;a href="http://www.lesbianswhotech.org"&gt;Lesbians Who Tech&lt;/a&gt;,
&lt;a href="http://www.mymaven.org"&gt;Maven&lt;/a&gt;, and &lt;a href="http://www.transhack.org"&gt;Trans*H4CK&lt;/a&gt; to further their work.  All proceeds from sales will be donated to these organizations that are helping educate, connect and empower LGBTQ people in tech.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.myshopify.com/products/pridetocat-shirt"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/5945961/7922248/daa5a220-085f-11e5-88fa-308dfd374aea.jpg" alt="Pridetocat Shirts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This limited edition shirt is available in the &lt;a href="http://github.myshopify.com/"&gt;GitHub Shop&lt;/a&gt; until August 31st.&lt;/p&gt;

&lt;p&gt;More info about the LGBTQ tech organizations that benefit from the purchase of this shirt:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesbians Who Tech&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.lesbianswhotech.org"&gt;Lesbians Who Tech&lt;/a&gt; is a global community of 9,000 queer women in tech. It exists to provide value to queer women in tech, a demographic that is rarely represented in both the tech community and the LGBTQ community. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trans*H4CK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.transhack.org"&gt;Trans*H4CK&lt;/a&gt; is a hackathon and speaker series that tackles social problems by developing new and useful open source tech products that benefit the trans and gender non-conforming communities, while bringing visibility to transgender tech innovators and entrepreneurs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mymaven.org"&gt;Maven&lt;/a&gt; partner with local LGBTQA youth serving organizations and LGBTQA tech professionals to provide free tech camps, workshops, Game Jams/hackathons for the queer youth community.&lt;/p&gt;
  &lt;/div&gt;</content></entry><entry><title>Of Hashes and Clashes</title><link href="http://ciandcd.github.io/ciandcd-web/of-hashes-and-clashes.html" rel="alternate"></link><published>2017-03-30T17:52:51+00:00</published><updated>2017-03-30T17:52:51+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-03-30:/ciandcd-web/of-hashes-and-clashes.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170330/hashes-clashes"&gt;https://www.perforce.com/blog/170330/hashes-clashes&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/lock_md5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a lot in the news lately about the virtues of various hash algorithms, such as SHA1, SHA2, SHA3, and the venerable MD5.&amp;#160; Essentially these are wicked complex cryptography algorithms &amp;#8211; too sophisticated for most of us to understand &amp;#8211; that distill the contents of a file or any stream of data of any size, perhaps megabytes or more of data, into a single simple string of ASCII text characters called a hash or digest.&amp;#160; A hash is small, fitting easily on one line of text.&amp;#160; That string of text characters is absolute gobbledygook and utterly meaningless, but has one very useful purpose:&amp;#160; You can use it to know if the content of a file or stream of data is the same as it was the last time it was looked at.&lt;/p&gt;
&lt;p&gt;The hope with hashing algorithms is that they&amp;#8217;ll never &amp;#8220;fail,&amp;#8221; that is, that any change to file contents, even the slightest change, would result in a completely different hash.&amp;#160; Whenever there are two files with different content that have the same hash, that&amp;#8217;s called a collision.&lt;/p&gt;
&lt;p&gt;It is generally accepted that collisions occurring naturally have an insanely low probability of occurring.&amp;#160; However, hashes are in the news lately because some smart folks at Google have proven that Bad Guys with a ton of CPU power can artificially manufacture bad data that has the same hash as &amp;#8220;good data,&amp;#8221; in theory allowing Bad Guys to substitute bad content for good.&lt;/p&gt;
&lt;p&gt;That has caused a bit of concern in the version management world, because repositories like Git and Subversion rely on hashes to verify that the contents of an entire repository are &amp;#8220;known good stuff.&amp;#8221;&amp;#160; The ability of a Bad Guy to arbitrarily compromise the hash algorithm would give them, in theory, the ability to sneak a surreptitious, corrupt repository with contents of their choosing in place of a good repository, by injecting garbage data to make the hash match.&amp;#160; Most experts consider it a bit of a stretch that such a replacement could occur undetected.&amp;#160; But regardless, developers of Git and Subversion are taking the threat seriously, and working to defend against possible attacks.&amp;#160; They are considering, for example, upgrading from SHA1 to other, even stronger cryptography algorithms, and contemplating detecting &amp;#8220;collision attacks&amp;#8221; such that they could be rejected.&amp;#160; Admins of these systems would need to upgrade to the latest version (once it is available) to be safer.&lt;/p&gt;
&lt;p&gt;Though unlikely, the risk is that a Bad Guy with regular user (non-admin) access could submit a bogus file that results in a collision.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perforce uses cryptography in a very different way from Git and Subversion&lt;/strong&gt;, and is far less vulnerable to the risk of hash collisions.&amp;#160; Unlike Git and Subversion, which use a hash to represent an entire repository of files at any point in time, Perforce uses hashes sparingly, only to verify the contents of individual files.&amp;#160; Further, submitting bogus collision files would do nothing more than add individual junk files to the server.&amp;#160; Lots of pain for the Bad Guys, and no gain in terms of causing harm.&amp;#160; Without direct admin access to the master server machine, the ability to generate hash collisions wouldn&amp;#8217;t benefit an attacker against a Perforce server.&amp;#160; That&amp;#8217;s part of why &lt;strong&gt;Perforce still uses the venerable MD5 algorithm, yet is no less safe for it&lt;/strong&gt;.&amp;#160; Unlike Git and Subversion, where the hash algorithms are core to the design and integrity of the entire repository, Perforce&amp;#8217;s reliance on hashes is to guard against disk rot or network hiccups during file transfer of individual files.&lt;/p&gt;
&lt;p&gt;With any of the version control systems mentioned here (Perforce, Git, and Subversion), a successful attack would require far more than the ability to generate collisions in whatever hashing algorithm is used.&amp;#160; Though the potential to damage repos has in fact been proven, improvements in those systems will make future attacks even harder, and hopefully not worth the effort.&amp;#160; That said, &lt;strong&gt;the best defense is to always have a few Good Guys who wear Black Hats, think like the Bad Guys, and help keep us all safer.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>Helix Streams Webinar Q&amp;A;</title><link href="http://ciandcd.github.io/ciandcd-web/helix-streams-webinar-qa.html" rel="alternate"></link><published>2017-03-10T18:39:32+00:00</published><updated>2017-03-10T18:39:32+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-03-10:/ciandcd-web/helix-streams-webinar-qa.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170310/helix-streams-webinar-qa"&gt;https://www.perforce.com/blog/170310/helix-streams-webinar-qa&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/HighQualitypf-webinar-streams-blog.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;You Want Answers? I Want the Truth!&lt;/h2&gt;
&lt;p&gt;At Perforce, we're pretty sure you can handle the truth.&amp;#160;&lt;/p&gt;
&lt;p&gt;Fresh off our latest Helix Streams Webinar, Streams Revisited, I covered how users leverage the Helix Visual Client (P4V) stream technology to optimize their workspace clients, enhance branch/merge operations, and add component-based design efficiency.&lt;/p&gt;
&lt;p&gt;And I&amp;#8217;m proud to report the webinar was a rousing success, with lots of questions along the way. So much so, I wanted to run through a few queries now.&lt;/p&gt;
&lt;p&gt;Want to learn more about the agility and stability of Helix Streams following the read? You can still catch the webinar recording &lt;a href="https://www.perforce.com/webinars"&gt;on-demand&lt;/a&gt;. If you already have your answers, download our latest update, &lt;a href="https://www.perforce.com/helix-visual-client"&gt;Helix Visual Client (P4V) 2017.1&lt;/a&gt;. Still have questions? &lt;a href="http://info.perforce.com/contact-us.html"&gt;Contact &lt;/a&gt;us and we'll get back to you right away.&amp;#160;&lt;/p&gt;
&lt;p&gt;So, without further ado, and in no particular order, our collection of questions from webinar attendees:&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Does Perforce offer private/local commits?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Great question. Yes. Perforce does.&amp;#160;&lt;/p&gt;
&lt;p&gt;Streams has three ways it can make this happen &amp;#8211;- which one you use will depend on your specific workflows.&lt;/p&gt;
&lt;p&gt;First, shelves can be used for private commits, except we wouldn&amp;#8217;t technically call it a commit, but rather saving a state on your workspace. Shelving enables you to store copies of open files temporarily in the shared Perforce repo without checking them in, which is perfect for taking and restoring snapshots of in-progress work and reviewing code before check in.&lt;/p&gt;
&lt;p&gt;Second, the task branching available with Helix Streams, where you create a child code line from a parent, can be used for that purpose. However, your commits won&amp;#8217;t be visible until they are propagated upstream.&lt;/p&gt;
&lt;p&gt;Lastly, with Helix DVCS functionality, you can take a task stream offline, make local commits, and then push them back. Voil&amp;#224;!&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Where can I find more information on how to utilize virtual streams for widening the included assets in a stream?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The import feature with Helix widens the stream.&amp;#160;&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a link to &lt;a href="http://www.perforce.com/perforce/doc.current/manuals/p4v/p4v_virtual_streams.html"&gt;documentation on our import feature.&amp;#160;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;How can virtual streams help in Component Based Development?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Virtual streams can help in two ways, and they each are dependent on where your components are housed:&lt;/p&gt;
&lt;p&gt;Option 1: If all the components live in one stream, then virtual streams are used to split out an individual component or a subset of components. This follows the &amp;#8220;Product is King&amp;#8221; principle: one product, many specific components of that product&lt;/p&gt;
&lt;p&gt;Option 2: If all components have their separate mainline, then &amp;#8220;Components are King.&amp;#8221; Virtual streams can be used to test out a set of components or create the product out of the main code and selected product components.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Does Helix restrict the number of streams or complexity of workflow?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Helix does not apply any physical restrictions on the&amp;#160;number of streams.&lt;/p&gt;
&lt;p&gt;That said, for the sanity of your product managers, team leads, etc., it might make sense to split them over several stream depots for organizational purposes. But Helix offers the performance measures that cater to your workspace preferences.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Is there a way of "archiving" old streams to remove them from the Streams View?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Absolutely.&amp;#160;The spec depot, which creates an indelible historical marker of whatever stream spec you choose. Once you have both a versioned stream and the stream history, simply delete the stream spec.&lt;/p&gt;
&lt;p&gt;The underlying data is now preserved. To bring the stream back again, simply recreate the stream from the spec depot. Take note, you cannot reuse the same stream name, so it behooves you to follow a sensible naming convention.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;We are currently using a standard depot for our development. Is there a way of converting our existing depot to a stream depot?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;It&amp;#8217;s easier to branch existing code into the new stream structure because you can follow the old history across the integrations. Streams are more about the future -- where should I put my code, how does it flow to other streams -- than about the past.&amp;#160;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Do you have any webinars that show a practical example of streams, please?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Yes. Please check out our additional resources on the website. If your questions aren&amp;#8217;t answered from our resources, let us know what you&amp;#8217;d like to see.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re always looking for other engaging webinar topics; we&amp;#8217;re also available for customer consultations.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Any plans for Swarm to support task streams?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Swarm does support task streams for reviewing committed work. However, by the nature of task streams, all uncommitted work is hidden.&lt;/p&gt;
&lt;p&gt;The thinking behind task streams is to offer developers an independent workspace where they can complete work independently. Following that, you create a review for the integration once more into the backing stream.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;How do developers using development streams that share mainline path preferences know when the mainline path preferences have been updated? How do they know to select "Get the latest revision"?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Generally, I would advise using the P4V Dashboard to keep track of changes you need to sync to your workspace.&lt;/p&gt;
&lt;p&gt;I may be understanding your question in two ways, so I hope one of them is your query.&lt;/p&gt;
&lt;p&gt;If this is: How do I know when my parent stream is updated? The stream graph arrows turn green.&lt;/p&gt;
&lt;p&gt;Or if it&amp;#8217;s: When do I know if any imported codepaths are updated? The revisions turn yellow.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;How are streams different or similar from workflows that use published client specs for teams to work on a project/release/task?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Similar on the workspace side of things, but easier to manage, but much more powerful for branches.&lt;/p&gt;
&lt;p&gt;Keep in mind, a workspace will always become inherited from the stream.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Can more than one person work on a task stream at the same time?&amp;#160;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Yes, but I don't like the idea of shared workspaces. It can lead to all kinds of troubles. I prefer to keep task streams private. But Virtual Streams won&amp;#8217;t limit your ability to craft your unique workspace.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;What is the best way to manage stream graphical representation over time? We already have 100's of streams and the display is rather busy.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;There&amp;#8217;s a whole section on tools for searching and filtering &lt;a href="https://www.perforce.com/perforce/doc.current/manuals/p4v/p4v_filters.html"&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Suffice it to say, you can use a filter. P4V will remember.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you're looking for easier, more intuitive access to your versioned files, then the Helix Visual Client (P4V) application is for you.&lt;/p&gt;
&lt;p&gt;Offering complete visibility and control over your digital assets, P4V is a streamlined desktop app that can boost productivity and development speed in any workspace.&lt;/p&gt;
&lt;p&gt;To learn more, visit &lt;a href="https://www.perforce.com/ko/helix-visual-client"&gt;our product page&lt;/a&gt;&amp;#160;or&lt;a href="http://info.perforce.com/contact-us.html"&gt; contact us.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>Developer Workflows Supercharged in Helix Visual Client (P4V) 2017.1</title><link href="http://ciandcd.github.io/ciandcd-web/developer-workflows-supercharged-in-helix-visual-client-p4v-20171.html" rel="alternate"></link><published>2017-03-09T21:42:31+00:00</published><updated>2017-03-09T21:42:31+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-03-09:/ciandcd-web/developer-workflows-supercharged-in-helix-visual-client-p4v-20171.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170309/developer-workflows-supercharged-helix-visual-client-p4v-20171"&gt;https://www.perforce.com/blog/170309/developer-workflows-supercharged-helix-visual-client-p4v-20171&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;The 2017.1 release of the Helix Visual Client (P4V) gives developers and other contributors unprecedented freedom to work with project files and version their work in any way they choose.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;About to jump on a plane? Clone down those project files so you can version your work while working offline.&lt;/li&gt;
&lt;li&gt;Stuck somewhere with no internet access? Initialize a personal server (commonly referred to as a local repo by Git users) and spike out that tricky bug fix.&lt;/li&gt;
&lt;li&gt;Bus with built-in Wi-Fi? Push your changes, including version history, to your remote Helix server for your team to share.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img alt="DVCS vi P4V 2017.1 dashboard" src="/sites/default/files/images/blog/P4V-dashboard.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This highly anticipated release includes five core functionalities that make it easy to work &amp;#8212; and version your work &amp;#8212; on a personal server:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Initialize a personal server directly from the New Connection dialog or from the P4V toolbar.&lt;/li&gt;
&lt;li&gt;Quickly clone by context-clicking in the P4V depot tree or using a remote specification.&lt;/li&gt;
&lt;li&gt;Fetch changes and resolve conflicts easily from the P4V toolbar.&lt;/li&gt;
&lt;li&gt;Push changes to your remote, shared Helix server with a context-click of the mouse.&lt;/li&gt;
&lt;li&gt;View, create and edit remote specifications using the P4V remote mapping builder.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img alt="Context-click to perform common DVCS operations" src="/sites/default/files/images/blog/DVCS-blog-post%20%281%29.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Distributed Version Control and Beyond&lt;/h2&gt;
&lt;p&gt;Helix is the only distributed version control system (DVCS) that allows developers to clone/pull only the files in their project that they need to work on, not the entire repo. This saves time not only during data transfer but also during code review. With P4V 2017.1, users only need to tie up specific files in a pre-commit code review as opposed to the entire repo.&lt;/p&gt;
&lt;h2&gt;Access Your Personal Server through P4V 2017.1&lt;/h2&gt;
&lt;p&gt;The 2017.1 release has added benefits for users of the Visual Client. No longer do P4V users have to type out lengthy commands to clone, push and fetch. Instead, they can choose between working with a remote Helix server or a personal Helix server from their desktop app. From a remote server, users can create remote mappings with ease or clone down project files &amp;#8212; using shallow clone for long version history, work with files locally, and push them back using P4V.&lt;/p&gt;
&lt;p&gt;Helix Visual Client 2017.1 boosts developer freedom, flexibility, and productivity with our robust, native DVCS capabilities right from the desktop app. It&amp;#8217;s easy, intuitive, and available now!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.perforce.com/downloads/helix#clients"&gt;Upgrade to 2017.1 today&lt;/a&gt;!&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>Best Practices from Galactic Bricklayers</title><link href="http://ciandcd.github.io/ciandcd-web/best-practices-from-galactic-bricklayers.html" rel="alternate"></link><published>2017-03-03T21:12:18+00:00</published><updated>2017-03-03T21:12:18+00:00</updated><author><name>itech001</name></author><id>tag:ciandcd.github.io,2017-03-03:/ciandcd-web/best-practices-from-galactic-bricklayers.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170303/best-practices-galactic-bricklayers"&gt;https://www.perforce.com/blog/170303/best-practices-galactic-bricklayers&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/images/gdbp-blog-cloudimperium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;As an adage, &amp;#8220;Rome wasn&amp;#8217;t built in a day&amp;#8221; is quite pervasive, despite often being halved for brevity. The omitted modifier &amp;#8211; &amp;#8220;They were laying bricks every hour&amp;#8221; &amp;#8211; is a sentiment not lost on the game developers at Cloud Imperium Games (CIG). That&amp;#8217;s because CIG is building a digital environment every bit as cosmopolitan, mercantile, and eminent as the sprawling Italian capital.&lt;/p&gt;
&lt;p&gt;In short, they're building a whole universe.&lt;/p&gt;
&lt;p&gt;Star Citizen, the long-anticipated space simulation game, is scaling its development efforts to an unparalleled degree. Under the guidance of Chris Roberts, the esteemed game designer has helmed the growing development efforts since 2012, with a final vision that pairs nominally disparate game genres into one, including first-person shooter (FPS), massive multiplayer online (MMO), and co-operative campaigns. &amp;#160;&amp;#160;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s this pedigree and sheer scope that has beckoned supporters across the globe, enthusiastic to receive the final iteration, to donate more than $140 million toward development efforts. As the largest crowd-funded project in history, the ambitions of Star Citizen are directly correlated with the support provided by their financial backers.&lt;/p&gt;
&lt;p&gt;&amp;#8220;We do things different than normal game publishing,&amp;#8221; says CIG Director of IT, Mike Jones, citing the influx of end-user monetary support, &amp;#8220;We don&amp;#8217;t answer to bankers.&amp;#8221;&lt;/p&gt;
&lt;p&gt;But with such support from the soon-to-be denizens of Star Citizen&amp;#8217;s universe, there comes the burden of anticipated returns. Prospective gaming inhabitants have already purchased virtual ships and virtual accessories for in-game use, and CIG has worked diligently to provide playable game elements along the development cycle, lest the citizens revolt and commence the fall of Rome.&lt;/p&gt;
&lt;p&gt;Ok, hyperbole aside, it&amp;#8217;s true that CIG relies on the single source of truth in Perforce Helix to manage their workflows. Below are just a few ways that CIG brings their burgeoning galaxies to life, including speedy server architectures, efficient stream branches, scalable workspaces, and fine-grained security throughout.&lt;/p&gt;
&lt;h3&gt;Scale. Scale. Scale.&lt;/h3&gt;
&lt;p&gt;An ever-expanding universe is a tough horse to reign in. CIG&amp;#8217;s distributed development teams operate from a main repository stream consisting of 338,000 files and nearly six terabytes of data. What&amp;#8217;s more, the total sync of all Helix Ops streams total 23 million files and 90 terabytes data.&lt;/p&gt;
&lt;p&gt;A non-optimal server system will buckle under a high degree of interaction and workflow, overloading server specs. That downtime interrupts development cycles and sends development benchmarks into disarray. But with Helix, server systems continue to provide the CIG network with an exceptional data rate.&lt;/p&gt;
&lt;p&gt;So much so, that CIG upgraded studios to a gigabit fiber to accommodate the mass of data being moved. &amp;#8220;We have a lot of changes coming in. The amount of activity on [the Helix] server is impressive,&amp;#8221; says Jones.&lt;/p&gt;
&lt;p&gt;The Helix Versioning Engine expertly supports CIG&amp;#8217;s highly distributed and collaborative teams, too, and the processes that CIG DevOps teams rely on. &amp;#160;&lt;/p&gt;
&lt;p&gt;"You used to be in a box &amp;#8211; and you didn't tell anybody what you're working on," says CIG's Network Services Manager, Paul Vaden, adding "We're very open in our development effort," citing waves of outreach, including multimedia demos and playable content of Star Citizen that has been continuously delivered to gaming fans throughout development.&lt;/p&gt;
&lt;p&gt;"A lot of companies will wait; we put ours out as soon as it is ready," says Vaden, with CIG revealing their latest demo at Gamescom 2016 in August. "We tend to expose our work sooner than others."&lt;/p&gt;
&lt;p&gt;This approach has afforded CIG the latitude to keep growing Star Citizen while simultaneously providing concurrent backers with immersive content in the lead up to their final deployment. This means developers can keep iterating persistent server environments, variable simulation categories, and over 100 unique star systems while crowd-source capital continues to climb.&lt;/p&gt;
&lt;h3&gt;Fine Grained Access Control&lt;/h3&gt;
&lt;p&gt;CIG is doing something so ambitious that the stakes are equally high. With teams spread across the world, relying on 24/7 work cycles and distributed personnel, Helix provides a secure platform during development. Helix fine-grained security controls access to data down to the file level, and as a result, projects are protected against unforeseen bugs and late-term glitches that can mitigate the success of a game release.&lt;/p&gt;
&lt;p&gt;"We have developers all over the world, including many contractors. Perforce allows us to define very granular access to the game, resulting in faster turnaround and better control," says Vaden. "We limit a great deal of what developers have access to, otherwise copies of your game get out before it's ready."&lt;/p&gt;
&lt;p&gt;This is a critical comfort, as stable access control is essential when content is released at various project milestones; for example, "Star Citizen had a Gamescom stream and we limited access to that stream because we couldn't afford to break our build stream last minute."&lt;/p&gt;
&lt;p&gt;Helix gives build managers a single source of truth for who has what and where they have it. "I can see in one place who has access to which files&amp;#8211; I don't have to jump around looking for them."&lt;/p&gt;
&lt;h3&gt;Branches with Brains&lt;/h3&gt;
&lt;p&gt;Securing financing and an immutable data security tool is essential to supporting your development projects. But Helix is there, too, when you commence the brass tacks of building your award-winning titles. Star Citizen is no exception.&lt;/p&gt;
&lt;p&gt;Beyond asset clarity, Helix also offers bolstered operational efficiency for DevOps teams via development streams.&lt;/p&gt;
&lt;p&gt;Proudly called &amp;#8220;branches with brains,&amp;#8221; Helix streams technology helps synchronize all the contributions from multiple offices yet allows different stakeholders to pare down the overall working set as needed via virtual streams.&lt;/p&gt;
&lt;p&gt;Design artists -- less utilized in certain areas of software development yet essential in gaming &amp;#8211; are able to lockdown their non-mergeable binary files. This feature prevents artists from editing files already in use by another artist, ensuring all teams avoid time/productivity loss, making Helix an unparalleled in gaming version control.&lt;/p&gt;
&lt;p&gt;"Helix is eminently easier to administer, to setup," says Jones. "It supports the DevOps workflows required for us to deliver a better product."&lt;/p&gt;
&lt;h3&gt;System Stability&lt;/h3&gt;
&lt;p&gt;The hefty development environments that CIG navigates are propped up firmly by Helix to ensure an optimal server architecture.&lt;/p&gt;
&lt;p&gt;CIG development teams can execute day-to-day operations with exceeding confidence, relying on built-in backup components, ready at a moment's notice, to replace primary components without shutting the system down.&lt;/p&gt;
&lt;p&gt;A variety of hot spares and cold standbys allow admins to safeguard against system failures, integrate vital components, and push scheduled data backups without service interruptions.&lt;/p&gt;
&lt;p&gt;Stable enterprise scaling, development efficiencies, and an industry-specific set of platform features; these are just a few reasons Helix is an optimal solution. "It's pretty obvious why Perforce is so prevalent in the gaming industry," says Vaden.&lt;/p&gt;
&lt;p&gt;Everything CIG does within the growing Star Citizen universe is supported by Helix, according to Jones: "If Perforce wasn't around, we'd be hard-pressed to find a better version control solution.&amp;#8221;&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Cloud Imperium Games is committed to Helix versioning over the long haul. That&amp;#8217;s because, for a project already years in the making, developers need a stable, scalable versioning platform to reach the developmental finish line.&lt;/p&gt;
&lt;p&gt;Add in fine-grained security features and better operational efficiency, and you have the first layer of benefits Helix supports.&lt;/p&gt;
&lt;p&gt;To learn more about the innovative strategies CIG uses to buttress their expansive universe, check out our Game Development Best Practices eBook to glean game development insight from the industry&amp;#8217;s most well-respected studios, including Epic Games, CD PROJEKT RED, and The Chinese Room.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://info.perforce.com/game-dev-best-practices-ebook.html"&gt;Download here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>DevOps Digest 402: Web Testing Environments</title><link href="http://ciandcd.github.io/ciandcd-web/devops-digest-402-web-testing-environments.html" rel="alternate"></link><published>2017-02-28T15:11:31+00:00</published><updated>2017-02-28T15:11:31+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-02-28:/ciandcd-web/devops-digest-402-web-testing-environments.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170228/devops-digest-402-web-testing-environments"&gt;https://www.perforce.com/blog/170228/devops-digest-402-web-testing-environments&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/images/blog/DevOps_402.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Having briefly covered testing strategies, layers/scopes, and testing types in &lt;a href="https://www.perforce.com/blog/170221/devops-digest-401-prelude-continuous-testing"&gt;Issue 401&lt;/a&gt;, let&amp;#8217;s now return to our sample application and illustrate how to make some choices. Again, we&amp;#8217;re not going to build specific machinery, but rather evaluate your testing requirements against your comfort level to select the right strategy, layers, testing types, and tools.&lt;/p&gt;
&lt;p&gt;Our sample is an MVC web application built atop Microsoft&amp;#8217;s .NET framework using C#, which automatically winnows away a variety of tools and narrows the focus for our lower-layer testing decisions.&lt;/p&gt;
&lt;p&gt;For example, because we&amp;#8217;re dealing with a web application, our architectural choices help influence our testing choices. Our sample is trivial, but it at least outlines a development roadmap along which major functionality will be packaged in various library assemblies, then consumed through interfaces served up via &lt;a href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;DI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of solid freely available DI tools, including the injection mechanics built into the MVC framework by Microsoft. No matter which you use, it helps considerably in unit testing. DI makes it simple to create a single test assembly for each library assembly, which can provide the unit tests to exercise all the lowest-layer functionality.&lt;/p&gt;
&lt;p&gt;Where said tests are concerned, white-box testing is often the right choice, because only developers can know all the subtleties built into the underlying implementation. Crafting unit tests carefully to exercise as many code paths as possible provides assurance that the implementation works as intended. The code coverage reports we implemented in &lt;a href="http://www.perforce.com/blog/170116/devops-digest-308-code-coverage-analysis"&gt;Issue 308&lt;/a&gt; are very useful in determining which code remains to be exercised.&lt;/p&gt;
&lt;p&gt;When it comes to functionality exposed across assembly boundaries, then interface testing with a black-box testing approach also makes sense. Such tests are written purely from the standpoint of a consumer of that functionality, wholly ignorant of the internal implementation details.&lt;/p&gt;
&lt;p&gt;This combination delivers a powerful one-two punch for knocking out bugs and defects. The unit tests ensure best intentions are met for the details of an implementation, while interface tests ensure that the &amp;#8220;surface&amp;#8221; works well to provide reusable pieces. In effect, this approach jointly satisfies producers and consumers of low-level functionality.&lt;/p&gt;
&lt;p&gt;And as long as care is taken in keeping such units of functionality isolated and maximally orthogonal, this simple architecture makes it possible to grow an application for years. It&amp;#8217;s a poor-man&amp;#8217;s component-based development, without the additional work required to treat components as things in themselves.&lt;/p&gt;
&lt;p&gt;We chose NUnit as our tool to illustrate executing unit tests via Jenkins in &lt;a href="https://www.perforce.com/blog/170110/devops-digest-307-running-unit-tests-helix-jenkins"&gt;Issue 307&lt;/a&gt;. But as mentioned then, Microsoft Visual Studio includes its own MSTest facilities out of the box, and there are other suitable alternatives (&lt;a href="http://code.google.com/archive/p/mb-unit/"&gt;MbUnit&lt;/a&gt; and &lt;a href="http://xunit.github.io"&gt;xUnit&lt;/a&gt; ) for unit tests that also serve nicely for interface testing when coupled with other tools.For example, you can inject faux expected behavior into interfaces for testing using &amp;#8220;mocking&amp;#8221; tools &lt;a href="http://hibernatingrhinos.com/oss/rhino-mocks"&gt;Rhino Mocks&lt;/a&gt;, &lt;a href="http://nmock3.codeplex.com"&gt;NMock3&lt;/a&gt;, or &lt;a href="http://www.moqthis.com"&gt;Moq&lt;/a&gt;&amp;#8212;all common frameworks worth considering for .NET development.&lt;/p&gt;
&lt;p&gt;But unit and interface tests ensure only that the implementation performs as the developers intend. They don&amp;#8217;t tell you whether the product&amp;#8217;s resulting feature set actually satisfies the design requirements from a top-level user perspective.&lt;/p&gt;
&lt;p&gt;As crazy as it sounds, substantial disconnects between the expectations of business stakeholders and what the developers actually create are surprisingly frequent. There are many factors for this, not the least of which being that various groups involved often don&amp;#8217;t share the same language or level of understanding. Nonetheless, the issue for testing is how to make sure problems get caught and stopped as quickly as possible, preferably before wasting considerable time and effort on a bad direction.&lt;/p&gt;
&lt;p&gt;This sort of disconnect is surely one of the reasons for the rise of Behavior-Driven Development (BDD) as an evolution of Test-Driven Development (TDD). BDD has implications for testing at all levels, but the way it helps facilitate discussion and understanding has led the industry to a renewed focus on acceptance testing.&lt;/p&gt;
&lt;p&gt;Acceptance tests are often comparatively simple to exercise with web applications, particularly those built on the model-view-controller (MVC) paradigm, so they&amp;#8217;re a good fit for our sample. The point is to tie togetherthe business requirements with actual results through a simple, shared vocabulary.&lt;/p&gt;
&lt;p&gt;Those unfamiliar with BDD should expect to confront a given-when-then approach to acceptance tests. The approach assumes some well-known state of affairs (given), at which point something happens (when), in light of which a given set of outcomes should prevail (then). For example, consider this: &amp;#8220;Given a customer record on file, when a request comes in to update its password, then the database should be updated and the customer should be emailed a notification.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Breaking high-level functionality down in this tripartite manner facilitates communication between those writing the requirements and those writing the software, capturing behavioral expectations in simple language to avoid disconnect by keeping stakeholders on the same page.&lt;/p&gt;
&lt;p&gt;It also simplifies acceptance testing, which for our sample could easily be implemented in &lt;a href="http://www.fitnesse.org"&gt;FitNesse&lt;/a&gt;, &lt;a href="http://github.com/nbehave/NBehave"&gt;NBehave&lt;/a&gt;, &lt;a href="http://specflow.org"&gt;SpecFlow&amp;#8217;s Cucumber for .NET&lt;/a&gt;, &lt;a href="http://specsfor.com/SpecsForMvc/default.cshtml"&gt;SpecsFor.Mvc&lt;/a&gt;, etc. They all work a bit differently but provide essentially the same set of services. Again, the most important thing to remember is that they must bridge the gap between your key stakeholders to avoid wasting time building the wrong thing.&lt;/p&gt;
&lt;p&gt;The last sorts of testing it makes sense to consider here (for our sample) are load, stress, and performance testing. Web server technology has advanced to the point where standing up even non-trivial web applications is a generally simple thing.&lt;/p&gt;
&lt;p&gt;Keeping it up and running under adverse conditions, however, and responding to users in a timely fashion can be a different story. Products can falter in the market when organizations don&amp;#8217;t do load, stress, or performance testing prior to release.&lt;/p&gt;
&lt;p&gt;One of the up sides of creating a popular product is that you&amp;#8217;ll discover soon enough how well it performs under load and stress. The down side is that your users will be unhappy if they&amp;#8217;re the ones doing your testing rather than your QA personnel. Unlike your employees, your users aren&amp;#8217;t under any compunction to keep coming back for more.&lt;/p&gt;
&lt;p&gt;So do yourself a favor and discover how your product performs under load and stress before you release it to the general populace. For our sample application, a valid choice would be to rely upon the load-testing mechanisms built into Microsoft Visual Studio. The Microsoft Azure cloud in particular is a powerful ally in discovering how well a web application performs.&lt;/p&gt;
&lt;p&gt;But again, there are various third-party tools that can also be helpful. Popular options include &lt;a href="http://jmeter.apache.org"&gt;Apache&amp;#8217;s JMeter&lt;/a&gt;, &lt;a href="http://grinder.sourceforge.net"&gt;The Grinder&lt;/a&gt;, and &lt;a href="http://qatestingtools.com/testing-tool/pylt"&gt;Pylot&lt;/a&gt;. If you&amp;#8217;ve got the budget, there are also commercial offerings worth considering.&lt;/p&gt;
&lt;p&gt;No discussion of Continuous Testing (CT) would be complete without saying at least something about your test lab itself. That&amp;#8217;s because the state of our industry has advanced so quickly that the environments in which we test are almost always more complicated than the products being tested.&lt;/p&gt;
&lt;p&gt;Think about it for a moment. How many lines of code make up your product: tens of thousands, hundreds of thousands, millions? The operating systems on which our products execute these days are typically measured in tens of millions of lines of code. No matter how complicated your products are, the environment(s) in which they execute are likely more complicated, often by orders of magnitude.&lt;/p&gt;
&lt;p&gt;Software developers know how frustrating it is to keep receiving bug reports from the field that you simply can&amp;#8217;t reproduce. Something must be different; the question is always what. Crucial to answering that question is having repeatable environments.&lt;/p&gt;
&lt;p&gt;Fortunately, great progress has been made in the last decade in terms of infrastructure management tools. Tools like &lt;a href="http://puppet.com"&gt;Puppet&lt;/a&gt;, &lt;a href="http://www.chef.io"&gt;Chef&lt;/a&gt;, &lt;a href="http://www.ansible.com"&gt;Ansible&lt;/a&gt;, &lt;a href="http://saltstack.com"&gt;Salt&lt;/a&gt;, &lt;a href="http://www.fabfile.org"&gt;Fabric&lt;/a&gt;, and others produce repeatable environments in a highly automated way. Despite their differences, they all come down to specifying configuration data through a series of scripts and/or input flies.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll cover these tools in greater depth when we tackle Continuous Delivery but they can greatly simplify the process of standing up repeatable environments for testing as well. Small investments in surmounting their learning curves can pay huge dividends by making sure your tests execute under the same circumstances reliably and repeatably every time.&lt;/p&gt;
&lt;p&gt;Regardless of which strategies and tools you choose, tying it all together falls on the shoulders of your version control system (VCS). You&amp;#8217;ll store test scripts, sample input files and other data, infrastructure management details, and so forth. Any VCS worth the name can store these sorts of files, usually text and comparatively small.&lt;/p&gt;
&lt;p&gt;But only Perforce Helix gives you additional options, making it possible to store and version much larger data sets. Once you have a given set of test environments defined, Helix can store them as Docker images or even full virtual machines if needed. Infrastructure management tools can help you build well-defined environments, and Helix can help you maintain and recover them, skipping the time-consuming steps to rebuild them every time.&lt;/p&gt;
&lt;p&gt;And so ends our high-level survey of CT. The keys to getting the best value for your testing investments are (1) to identify the strategies, test types, and tools that make the most sense for your projects, and (2) build them on top of the repeatable foundation supplied by today&amp;#8217;s infrastructure management tools.&lt;/p&gt;
&lt;p&gt;Next time, we&amp;#8217;ll move on to CD and provide more specific details about those tools, their operation, and review some details to help you determine which of them best fit your organization. In the meantime, good luck getting your automated testing off the ground.&lt;/p&gt;
&lt;h2&gt;You Ask, We Answer&lt;/h2&gt;
&lt;p&gt;As previously mentioned, this is your roadmap to creating a successful DevOps pipeline. Don&amp;#8217;t understand something? Just ask. Need to dive a little deeper?&amp;#160;Send an email to&amp;#160;&lt;a href="mailto:info@perforce.com?subject=DevOps%20Digest%20Question"&gt;info@perforce.com&lt;/a&gt;&amp;#160;with your questions. Then, stay tuned for a live Q&amp;amp;A webinar at the end of this series.&lt;/p&gt;
&lt;h2&gt;Get DevOps Digest Sent to Your Inbox&lt;/h2&gt;
&lt;p&gt;You don&amp;#8217;t need to remember to check back with us each week. Instead, get the digest delivered directly to your inbox.&amp;#160;&lt;a href="http://info.perforce.com/devops_digest_reg.html"&gt;Subscribe&lt;/a&gt;&amp;#160;to our 25-week DevOps Digest and we&amp;#8217;ll get you where you need to go, one email at a time.&lt;/p&gt;
&lt;h2&gt;See Perforce Helix in Action!&lt;/h2&gt;
&lt;p&gt;Join us for a live demo every other Tuesday and see the best of Perforce Helix in 20 minutes.&amp;#160;&lt;a href="http://info.perforce.com/helix-live-demo-reg.html"&gt;Save your spot!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>The Epic Strength of Helix Defeats Complexity and Drives Efficiency</title><link href="http://ciandcd.github.io/ciandcd-web/the-epic-strength-of-helix-defeats-complexity-and-drives-efficiency.html" rel="alternate"></link><published>2017-02-23T21:11:59+00:00</published><updated>2017-02-23T21:11:59+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-02-23:/ciandcd-web/the-epic-strength-of-helix-defeats-complexity-and-drives-efficiency.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170223/epic-strength-helix-defeats-complexity-drives-efficiency"&gt;https://www.perforce.com/blog/170223/epic-strength-helix-defeats-complexity-drives-efficiency&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/gdbp-blog-epicgames.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Given the acclaim of long-running titles, including Gears of War, Infinity Blade, and Unreal Tournament, it&amp;#8217;s hard to deny the eponymous nature of Epic Games&amp;#8217; most lauded successes. In short: they too are epic.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s because the innovators at Epic Games, with more than 25 years of industry experience, remain on the cutting edge of first-person shooter (FPS) game rendering. How does Epic Games keep pushing their development in a market that grows more sophisticated each day? How do they replicate past success in iterative title releases? And how do they manage to captivate consumers in the face of swelling competition? &amp;#160;&lt;/p&gt;
&lt;p&gt;Through Helix version control, Epic Games has built an approach that keeps distributed teams productive through formerly complex workflows, sidesteps common bug delays, and ensures timely delivery of products.&lt;/p&gt;
&lt;p&gt;Below are just a few ways that Epic Games leverages Helix to bring to life their FPS environments.&lt;/p&gt;
&lt;h2&gt;Untangle Complex Branch Structures&lt;/h2&gt;
&lt;p&gt;The gaming development model asks studios to wield disparate assets together into a single, aesthetic creation. This amalgamation of source code, art files, and audio assets merge together to create an artistry of animations that are responsive to a gamer&amp;#8217;s commands.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s how lucky consumers are delivered an immersive online multiplayer experience, with sights and sounds to ensnare their focus for hours, with all the tedious work baked together seamlessly.&lt;/p&gt;
&lt;p&gt;It goes without saying, but gaming development from start to finish is a daunting effort. Complex branch structures fork in many directions, with many teams contributing, and ultimately these diverging branches need to marry together again into a finished product.&lt;/p&gt;
&lt;p&gt;Sometimes the biggest obstacle is seeing the forest through the trees.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Dealing with so many branches can be overwhelming,&amp;#8221; says Nick Penwarden, UE4 Development Manager, Epic Games. &amp;#8220;We use Perforce Streams to facilitate and help manage the complexity of our branching setup.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Perforce Streams is a first-rate tool that guides better, highly visible branch organization, pairing diverse elements together, including source code and binary files (an insurmountable challenge for other VCS tools in gaming).&lt;/p&gt;
&lt;p&gt;&amp;#8220;Streams allows us to manage our development branches in a way that makes it easy to visualize how code flows through the system and to enforce best practices for merging code between branches.&amp;#8221;&lt;/p&gt;
&lt;p&gt;From a variety of visualization tools, including Time-lapse View&amp;#8482;, Revision Graph, to P4Merge, Helix is the single source of truth for traceability and visibility in branch actions.&lt;/p&gt;
&lt;h2&gt;Greater Development Stability&amp;#160;&lt;/h2&gt;
&lt;p&gt;As games become more sophisticated, development studios push the boundaries of simulation and real-time graphics in Triple-A titles. This sprawl of capability means your enterprise must grow in personnel to meet your day-to-day needs. With more users contributing to your source code, adding digital media files, and overseeing aspects of a build, your title is exposed to a greater risk of common, human error. And these will invariably delay and degrade your product stability&lt;/p&gt;
&lt;p&gt;&amp;#8220;Programmers are human and even great programmers make mistakes,&amp;#8221; says Penwarden. &amp;#8220;If each programmer makes one mistake per month and you have thirty programmers, on average the build will be broken once a day.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Extrapolate that to your development workforce &amp;#8211; maybe you have 60, or even 100 programmers! Hey, we get it, to err is human. But to safeguard your product development is Helix.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Our solution with Helix was to have our sub-teams responsible for different areas of the build features and fixing bugs in their own branches. [Additionally] each of these team branches go through a QA process before the new code is pushed to the mainline development branch.&amp;#8221;&lt;/p&gt;
&lt;p&gt;This process supercharges the stability of the mainline branch, as every new change is vetted at the sub-team level and ensured to work before it gets pushed live. Similarly, the effect trickles down to team branches, too, as all changes merged in from the mainline are equally critiqued.&lt;/p&gt;
&lt;p&gt;This approach has reduced a great deal of workload friction in Epic Games&amp;#8217; growing enterprise&lt;/p&gt;
&lt;p&gt;&amp;#8220;With Helix in place, our content creators remain productive in the mainline development branch and programmers remain productive in their team branches.&amp;#8221;&lt;/p&gt;
&lt;h2&gt;Boost Product Efficiency&lt;/h2&gt;
&lt;p&gt;With a better picture of the complexity of their branching structure, and a foundational approach to support more stable branches, Epic Games was poised to parlay these best practices into greater efficiency across their enterprise. Implementing rules for merging up/copying down changes, which ultimately reduced errors and mitigated complications in the release stream.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Fast stream switching allows programmers to quickly switch between branches to fix a bug by syncing down the differences between the branches rather than the entire branch, further reducing the hassle of dealing with many branches.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Further, Epic Games reduced delays by predefining product cycles, with each team designated segmented workspaces that were still traceable into a whole project. This platform approach to greater efficiency is expertly catered to game development studios, as Helix is the industry standard for multimedia versioning in the enterprise. &amp;#8216;&lt;/p&gt;
&lt;p&gt;Ultimately, game studios can manage a broad, global team under a streamlined process. It&amp;#8217;s keeping many, many ducks in a row, across many, many ponds.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With the power of Helix versioning, Epic Games has enabled a number of processes that increase their ability to produce stable releases quicker and more efficiently. From dissecting complicated branch structures with better visibility, to creating more stable release streams, to enforcing best practices that require a solid VCS platform, Epic Games knows exactly what they&amp;#8217;re getting from each team in their enterprise.&lt;/p&gt;
&lt;p&gt;To learn even more about the innovative strategies employed by Helix customers in gaming, check out our Game Development Best Practices eBook to discover how to get more out of your development workflow.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll pull back the curtain on a handful of gaming&amp;#8217;s most lauded studios, including The Chinese Room, CD PROJEKT RED, and Cloud Imperium.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://info.perforce.com/game-dev-best-practices-ebook.html"&gt;Download it here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>DevOps Digest 401: A Prelude to Continuous Testing</title><link href="http://ciandcd.github.io/ciandcd-web/devops-digest-401-a-prelude-to-continuous-testing.html" rel="alternate"></link><published>2017-02-21T15:32:38+00:00</published><updated>2017-02-21T15:32:38+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-02-21:/ciandcd-web/devops-digest-401-a-prelude-to-continuous-testing.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170221/devops-digest-401-prelude-continuous-testing"&gt;https://www.perforce.com/blog/170221/devops-digest-401-prelude-continuous-testing&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/images/blog/DevOps_401.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s time to move past the nuts of bolts of builds and Continuous Integration (CI) and focus on closing an easily overlooked gap in the age of Agile: the gap between how things should work versus how they actually work.&lt;/p&gt;
&lt;p&gt;In recent years, a movement has been brewing to do away with Quality Assurance (QA) altogether, the argument generally being that the Agile focus on unit tests guarantees that shipping software works as intended. This is problematic on multiple counts, not the least of which being that unit tests check only what developers think to test. Sometimes, it can take a fresh set of eyes and a different perspective to catch defects.&lt;/p&gt;
&lt;p&gt;Further, unit tests can check many things, but are by nature designed to run in isolation and execute quickly, which means they often &amp;#8220;mock&amp;#8221; (e.g., simulate) database and other such connections. They&amp;#8217;re great &amp;#160;for validating individual bits of code, but are a lousy solution for other testing needs.&lt;/p&gt;
&lt;p&gt;Continuous Testing (CT) is such a broad field, often varying widely from industry to industry &amp;#8212; even project to project &amp;#8212;&amp;#160;that we&amp;#8217;re not going to build a lot of specific machinery. Instead, in this chapter, you&amp;#8217;ll select the strategies and tools best suited to your own circumstances.&lt;/p&gt;
&lt;h2&gt;High-level Testing Strategies&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s begin with the broadest outlines of high-level testing strategies. Your first line of defense is static testing, which takes its name from the fact that your code remains &amp;#8220;at rest.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Bringing a second pair of eyes to bear often catches things that the original developers didn&amp;#8217;t. Techniques such as pair programming, mandatory code reviews, static analysis tools, and so forth can be useful in verifying that the code &amp;#8220;looks right&amp;#8221; for its intended purpose. You may know this by another name, as static testing is often considered verification.&lt;/p&gt;
&lt;p&gt;But of course, any static testing is limited by the simple fact that it doesn&amp;#8217;t involve executing the code. Even the best musicians and composers gain a new understanding of a piece when it&amp;#8217;s performed, no matter how well their mind&amp;#8217;s eye (ear?) can translate sheet music, and the same is true of software.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s why executing code, or dynamic testing, is also critical for success. And again, you may know this by another name, as dynamic testing is often considered validation. In the end, your users don&amp;#8217;t care about the code, they want the software to work as expected.&lt;/p&gt;
&lt;h2&gt;Exploring Testing Types&lt;/h2&gt;
&lt;p&gt;Dynamic testing invariably leads to a variety of important questions, first among which is arguably from whose perspective do we test? The way you answer that question effectively tells you whether you&amp;#8217;re embracing:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;White-box Testing leverages detailed knowledge of internals&lt;/li&gt;
&lt;li&gt;Black-box Testing focuses wholly on the &amp;#8220;surface&amp;#8221;, avoiding any knowledge of internal details&lt;/li&gt;
&lt;li&gt;Gray-box Testing is a mix of white- and black-box testing&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;It may seem like a subtle or even useless distinction, but you&amp;#8217;ll easily find arguments for and against each choice.&lt;/p&gt;
&lt;p&gt;White-box testing can be particularly useful because it proceeds in full possession of detailed internal knowledge, which allows you to construct test cases to exercise relevant cases to execute all logical code paths. Black-box testing can be especially useful when dealing with software components, as in the end, what usually matters most is that they produce the proper outputs for a given set of inputs. And in some cases, gray-box testing may be necessary to ensure that a set of operations goes to completion correctly given some initial state (e.g., certain known or expected records in a database table or other storage).&lt;/p&gt;
&lt;p&gt;What your project does and how you want to verify that it&amp;#8217;s doing it correctly should guide your choice when it comes to these options. The one &amp;#8220;golden rule&amp;#8221; we can easily recommend is (1) to pay careful attention to how much knowledge of the system&amp;#8217;s operation is essential to constructing high-quality tests, and then (2) balance that against the expectations with which you intend to saddle your users. In a highly technical application it&amp;#8217;s not at all improper to require much of your users, but a dirt-simple app intended for all mobile phone users is a completely different story.&lt;/p&gt;
&lt;h3&gt;Testing in Layers&lt;/h3&gt;
&lt;p&gt;Speaking of different stories, layers of testing are also relevant. It doesn&amp;#8217;t make sense, for example, to test low-level driver code a user is never going to interact with the same way you test some custom-built user-interface element that users will &amp;#8220;abuse&amp;#8221; in all sorts of unexpected ways. In short, there are a number of different layers, levels, or scopes at which it can be relevant to test, enumerated here in order of increasing complexity:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Unit testing&lt;/li&gt;
&lt;li&gt;Integration testing&lt;/li&gt;
&lt;li&gt;Interface testing&lt;/li&gt;
&lt;li&gt;System testing&lt;/li&gt;
&lt;li&gt;Acceptance testing&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll talk about each of these in turn, beginning with unit testing. As already mentioned, unit tests are intended to exercise and validate the operation of some small bit of code as quickly as possible. Developers working with object-oriented languages, for example, often create a suite (or suites) of tests to exercise each individual &amp;#8220;class&amp;#8221; they create. Unit tests are often white-box in nature because these are bits of code expected to be used only by developers, though black-box and gray-box testing can also prove helpful. The key point is that unit tests ensure a single thing works as intended.&lt;/p&gt;
&lt;p&gt;In contrast, integration testing is inherently focused at a higher layer/level because it ensures that the classes, modules, components, etc. that comprise some larger logical unit of software work together. In effect, integration testing by definition seeks to ensure that multiple things work together as intended.&lt;/p&gt;
&lt;p&gt;Interface testing is similar to integration testing in that it typically involves exercising multiple things, but with a particular focus on making sure that any communications occurs correctly between larger units of software. In software, &amp;#8216;interface&amp;#8217;, in the field of software anyway, is typically defined as some shared boundary that divides separate units of software (often called components).&lt;a href="#_ftn1" name="_ftnref1" title="" id="_ftnref1"&gt;[1]&lt;/a&gt; The goal of interface testing is (unsurprisingly) to ensure that all data and operations shared between those larger units of software are correct.&lt;/p&gt;
&lt;p&gt;The next step up the ladder of testing complexity is system testing, which can be thought of as integration testing writ large. In other words, instead of talking about bringing several lower-level bits of code (often components) together and making sure they work, system testing aims at validating the operation of some higher-level unit of software that can be thought of a thing in its own right.&lt;/p&gt;
&lt;p&gt;The example of client-server software illustrates this. In such an architecture, a server program can typically be considered a complete system in its own right. It accepts commands or other interactions from a client, perhaps involving authentication and/or authorization to make sure those operations are allowed, and then carries out tasks and/or responds with the proper outputs. Clients that &amp;#8220;know&amp;#8221; how to utilize the server can also be thought of systems in their own right.&lt;/p&gt;
&lt;p&gt;Acceptance testing begins when you bring them together to verify that everything works properly at the very highest level possible: user interactions with the product as a whole. While system testing shows you defects in a server, only acceptance testing shows you whether the overall process is good enough, from a user perspective, to ship.&lt;/p&gt;
&lt;p&gt;It is rather common to leverage automated testing tools for the lowest three (unit, integration, and interface) testing levels. It&amp;#8217;s often harder (and generally more expensive) to acquire good tools for system and acceptance testing. Alhtough progress has been made in recent years, you&amp;#8217;ll still have to get your hands dirty if you commit to higher-level testing.&lt;/p&gt;
&lt;h3&gt;Types of Testing&lt;/h3&gt;
&lt;p&gt;We&amp;#8217;ll barely scratch the surface as we explore different types of testing. The following are ordered roughly in terms of commonality, highest to lowest, descending into testing obscurity as we go.&lt;/p&gt;
&lt;p&gt;The most commonly known types of testing are arguably alpha testing and beta testing. By software tradition, an alpha release is a feature-incomplete version of a product or service that is nevertheless ready for at least some review. Alpha testing is usually conducted internally and typically open only to those with the kind of high level of understanding and patience necessary to navigate the rough waters of unfinished software. It can be helpful in making sure the project is on the right path before getting too far along the development calendar.&lt;/p&gt;
&lt;p&gt;In contrast, a beta release is typically a feature-complete version of a product that is ready for at least some external review and perhaps even production use. Beta testing is usually conducted with a limited set of users, often important customers seeking special influence over product development. It provides a final gut-check of the planned feature set before a more general release of a given product or service.&lt;/p&gt;
&lt;p&gt;Next is smoke testing, or sanity testing, which is &amp;#160;almost the opposite of unit tests. For whereas unit tests often comprise highly specific suites that seek to exercise the individual bits that go into an application in a rigorous way, smoke testing is often involves limited high-level tests to ensure that nothing has gone horribly wrong &amp;#8212; usually implemented from the end-user&amp;#8217;s standpoint. Smoke testing is usually the most basic hurdle for a build to vault.&lt;/p&gt;
&lt;p&gt;Regression testing is another very common type, focusing on making sure that some new change hasn&amp;#8217;t broken features that were already working. This type of testing typically occurs right before a new release or when some crucial fix is performed after a disastrous report from the field. A one-line code change can cause chaos, and regression testing usually catches unintended consequences before release.&lt;/p&gt;
&lt;p&gt;Performance testing is also common, particularly with software designed for high-volume applications or real-time processing. This type of testing often includes sub-types such as load testing, to validate that software performs acceptably under some large amount of concurrent work in progress, or stress testing, to validate that the software&amp;#8217;s functionality will degrade gracefully under unexpected conditions (e.g., memory or storage scarcity). For the most demanding applications, real-time testing validates that a given system (often a hardware/software hybrid device) can execute tasks within a strict time limit. This can be crucial for medical devices, for example, or other high-risk products that must always deliver timely results.&lt;/p&gt;
&lt;p&gt;Especially popular today is A/B testing. The ubiquity of the web, and its ease of deployment, have made it possible for various web applications and services to offer multiple variants of a given page or function to users in a controlled environment. This allows organizations to collect data on usage, practicality, and utility of two different ways of doing something, easily retiring the less desirable once the data is gathered. This kind of testing improves perceived user value and prevents bad design and implementation decisions by utilizing real-time user feedback.&lt;/p&gt;
&lt;p&gt;And of course the list goes on. Install/uninstall testing verifies that a product may be added or removed to/from a computer or user account. Security testing comes in many shapes and forms, from checking for known exploits (e.g., SQL injection) to hammering randomly at various interfaces to see what breaks. Internationalization testing focuses on accurate linguistic translations as well as cultural norms and standards (e.g., currency formats, calendar representations, etc.).&lt;/p&gt;
&lt;h3&gt;The Reality of Testing&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s simply not possible to test everything thoroughly. Testing is often only partially directed at validating proper function. Its more important role , particularly in our increasingly litigious society, is often reducing risk of legal exposure and subsequently mitigating legal actions. Whatever your core concerns, do your homework and choose the testing most useful for assuaging them.&lt;/p&gt;
&lt;p&gt;A final caveat is relevant for those wondering how truly complete testing remains impossible, even in today&amp;#8217;s age of increasing computer automation. It&amp;#8217;s not difficult if you consider how thoroughly insurmountable the problem really is.&lt;/p&gt;
&lt;p&gt;Many lines of code involve potential logical branching; i.e., making a decision based on some data and choosing an alternate path of subsequent execution as a result. Even relatively trivial software can involve hundreds of thousands of lines of code, so the sheer number of total execution paths to test is enormous.&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s just execution. Consider also that for any input field on a user interface, a user can enter whatever characters are allowed. That often means the entire alphabet as well as numbers, symbols, and perhaps even extended characters or entire other character sets in the era of Unicode. In short, there is often an effectively infinite set of possible input data to test.&lt;/p&gt;
&lt;p&gt;And that doesn&amp;#8217;t include the variety of interactions possible between applications today or the complexity of the environments in which they execute. Cross-platform software these days operates on Windows, macOS, Linux/Unix, and even various mobile operating systems such as Android and/or iOS.&lt;/p&gt;
&lt;p&gt;Combinatorically speaking, you put all of this together and even the proverbial infinity of monkeys are not going to be able to test your software completely prior to the heat death of our universe. And besides, I&amp;#8217;ve yet to meet a company that has the budget for infinite monkeys and billions of monkey-years of testing.&lt;/p&gt;
&lt;p&gt;Testing is a bit like a software version of the famous Gordian knot. Unravelling all the threads is impossible, so your best bet is to trim off only the bits you care about with your own project-management version of the sword of Alexander. Choose what gives you the biggest-quality-value bang for your test-resources buck and expand from there as needed.&lt;/p&gt;
&lt;p&gt;Thus ends our prelude to tackling CT. Next time, we&amp;#8217;ll cover it a little more specifically, using our sample application as a guide, and discuss how managing testing environments is crucial for reliable, repeatable, high-quality results.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h2&gt;You Ask, We Answer&lt;/h2&gt;
&lt;p&gt;As previously mentioned, this is your roadmap to creating a successful DevOps pipeline. Don&amp;#8217;t understand something? Just ask. Need to dive a little deeper?&amp;#160;Send an email to&amp;#160;&lt;a href="mailto:info@perforce.com?subject=DevOps%20Digest%20Question"&gt;info@perforce.com&lt;/a&gt;&amp;#160;with your questions. Then, stay tuned for a live Q&amp;amp;A webinar at the end of this series.&lt;/p&gt;
&lt;h2&gt;Get DevOps Digest Sent to Your Inbox&lt;/h2&gt;
&lt;p&gt;You don&amp;#8217;t need to remember to check back with us each week. Instead, get the digest delivered directly to your inbox.&amp;#160;&lt;a href="http://info.perforce.com/devops_digest_reg.html"&gt;Subscribe&lt;/a&gt;&amp;#160;to our 25-week DevOps Digest and we&amp;#8217;ll get you where you need to go, one email at a time.&lt;/p&gt;
&lt;h2&gt;See Perforce Helix in Action!&lt;/h2&gt;
&lt;p&gt;Join us for a live demo every other Tuesday and see the best of Perforce Helix in 20 minutes.&amp;#160;&lt;a href="http://info.perforce.com/helix-live-demo-reg.html"&gt;Save your spot!&lt;/a&gt;&lt;/p&gt;
&lt;p id="ftn1"&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>DevOps Digest 310: Final CI Tasks</title><link href="http://ciandcd.github.io/ciandcd-web/devops-digest-310-final-ci-tasks.html" rel="alternate"></link><published>2017-02-14T15:30:30+00:00</published><updated>2017-02-14T15:30:30+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-02-14:/ciandcd-web/devops-digest-310-final-ci-tasks.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170214/devops-digest-310-final-ci-tasks"&gt;https://www.perforce.com/blog/170214/devops-digest-310-final-ci-tasks&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="DevOps Digest 310 main graphic" src="/sites/default/files/images/devops-hero-310.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In our last article, we looked at how to promote code automatically from lower-level, less stable streams to higher-level, more stable streams as a prelude to producing release builds for testing and distribution.&lt;/p&gt;
&lt;p&gt;However, organizations often need to (1) archive various build artifacts (and perhaps other data), and (2) label the files that went into producing said builds for future reference. In this article, we&amp;#8217;ll leverage Helix for those tasks as we end our chapter on Continuous Integration.&lt;/p&gt;
&lt;p&gt;Helix shines thanks to its unparalleled ability to store build artifacts that would choke other systems. For our purposes, the term &amp;#8220;build artifacts&amp;#8221; refers to any by-products of the process of assembling what you actually ship from various input files.&lt;/p&gt;
&lt;p&gt;For example, while the ultimate, desired result of compiling and linking legacy C++ source code is typically an executable, the larger process may also produce all sorts of things you may need in the future:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Symbol files&lt;/li&gt;
&lt;li&gt;Dictionary files&lt;/li&gt;
&lt;li&gt;Library files&lt;/li&gt;
&lt;li&gt;Hash signatures&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Unit test results&lt;/li&gt;
&lt;li&gt;Screenshots from UI tests&lt;/li&gt;
&lt;li&gt;Metrics&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Deciding what to keep is important. Bugs reported from older software can become more painful to fix than they should be, simply because the stack dump collected can&amp;#8217;t be matched against re-generated symbol files with time stamps that don&amp;#8217;t match the original build. Storing original symbols can mean the difference between a simple debugging session and telling your customers you can&amp;#8217;t find the problem.&lt;/p&gt;
&lt;p&gt;You should always store files you can&amp;#8217;t regenerate easily, files you must keep for compliance, or files that have important time stamps in your version control system. Less important or easily replaced data can be left in the folders of your CI tool or deleted altogether.&lt;/p&gt;
&lt;p&gt;With other version control systems, keeping such build artifacts can be painful, even impossible in the case of large, binary files. But Helix can easily handle files of all types and sizes, so storing them is a simple matter of submitting them after the build process. This is easily accomplished with commands like the following:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 rec

p4 submit -d &amp;#8220;Storing build artifacts.&amp;#8221;&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Those two commands reconcile new files in your Helix workspace, respecting the contents of the &lt;a href="https://www.perforce.com/blog/161010/devops-digest-203-creating-new-application-helix"&gt;ignore file&lt;/a&gt;&lt;a href="https://www.perforce.com/blog/161010/devops-digest-203-creating-new-application-helix"&gt;&amp;#160;&lt;/a&gt; and submit your work back to the server. If you use DVCS, then you&amp;#8217;ll need one more command:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 push&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;A traditional workspace sends content back to the server with a &amp;#8220;submit&amp;#8221; command, but DVCS lets you submit locally and requires you to &amp;#8220;push&amp;#8221; work back to the server as desired. Whichever approach you take, your build artifacts will be safely stored and versioned in perpetuity.&lt;/p&gt;
&lt;h2&gt;Label Strategy&lt;/h2&gt;
&lt;p&gt;Having talked about what to keep, let&amp;#8217;s now prepare for the need to regenerate other items at some future date. Implicit in that process is the assumption that you can somehow retrieve everything that went into a particular build in the first place. As you might expect by now, Helix offers a number of options to assist.&lt;/p&gt;
&lt;h3&gt;The Change List&lt;/h3&gt;
&lt;p&gt;The most simple, performant option is the humble change list. Those accustomed to using other systems often overlook how useful such a simple integer can be. But in Helix, a single submitted change list number is all you need to get back to a particular point in time. Consider the following command:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 sync @13&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve used the &amp;#8220;p4 sync&amp;#8221; many times; however, the use of the &amp;#8216;@&amp;#8216; symbol tells the command that we only want our workspace to include files from a particular submitted change list number (here, number 13).&lt;/p&gt;
&lt;p&gt;When users submit content to Helix Versioning Engine, it creates a new snapshot at that point in time that is forever linked with the submitted change list number. To retrieve the files for any build, we look in our Jenkins history and sync our workspace to the corresponding submitted change list number.&lt;/p&gt;
&lt;p&gt;Of course, numbers like &amp;#8220;13&amp;#8221; are much harder to remember than something more meaningful like &amp;#8220;ReleaseCandidate1&amp;#8221;. Thus, Helix offers a number of ways to tie more meaningful text to versions of content.&lt;/p&gt;
&lt;p&gt;The most lightweight method is to use a job. Jobs can be very helpful bringing together disparate tools for Application Lifecycle Management (ALM) since every submitted change list related to fulfilling the requirements for a fix or enhancement can be linked to a job.&lt;/p&gt;
&lt;p&gt;Because Helix jobs have both names and submitted change list numbers, they may effectively serve to link the two forever. It takes two commands to create a job and assign it a particular change list number:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 job ReleaseCandidate1

p4 fix -c13 ReleaseCandidate1&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;The first creates a new job named &amp;#8220;ReleaseCandiate1&amp;#8221; by invoking your editor with a sample job template. Save and exit your editor to create the job. Give it any description you like, to remember the details of the &amp;#8220;ReleaseCandidate1&amp;#8221; job. When you save and exit your editor, the job will be created. It will also be left in the &amp;#8220;open&amp;#8221; state, to indicate work on that job is still pending. &lt;a href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.jobspecs.html"&gt;Helix jobs&lt;/a&gt; are very powerful yet oft-underutilized for managing workflow.&lt;/p&gt;
&lt;p&gt;The second command changes the status of the newly-opened job to &amp;#8220;closed&amp;#8221;, forever linking it with submitted change list number &amp;#8220;13&amp;#8221;. Now you can determine the corresponding submitted change list number(s) from the job&amp;#8217;s name:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 fixes -j ReleaseCandidate1&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;That command produces output of the form &amp;#8220;[JobName] fixed by change [SubmittedChangeListNumber] on [Date] by [User]@[Workspace] (closed)&amp;#8221;. In other words, one command simplifies translating a given job name into the corresponding submitted change list number(s). Jobs are easily managed through automation, so they&amp;#8217;re a great tool to leverage.&lt;/p&gt;
&lt;p&gt;But they&amp;#8217;re also limited in function. A submitted change list is forever tied to a particular point in time, but you can&amp;#8217;t later update it, &lt;a href="https://www.perforce.com/perforce/doc.current/manuals/cmdref/p4_change.html"&gt;except in certain, rare instances&lt;/a&gt;. And while jobs are great for a variety of purposes, they can be associated with more than one submitted change list number and might offer either a little less or far more than what you&amp;#8217;re really after.&lt;/p&gt;
&lt;p&gt;This is why Helix also offers labels. Users can work with labels using several commands, two of which are all-too-easily conflated by new users, and have a higher overhead on the server than mechanisms we&amp;#8217;ve already discussed. For many use cases, labels may be used without ever running into any issues, but labelling millions of files can take time, so bear that in mind when using labels with automated systems.&lt;/p&gt;
&lt;h3&gt;The &amp;#8220;tag&amp;#8221; Command&lt;/h3&gt;
&lt;p&gt;The first way of working with Helix labels is via the tag command:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 tag -l ReleaseCandidate1 //DevOps/Main/...&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Like many Helix commands, this one creates a label specification on the server and associates it with the latest revision of all files in our &amp;#8220;Main&amp;#8221; stream. This is exactly the sort of operation one might perform as part of an automated release-build process. Just as we previously saw how to sync a workspace to a particular change list number, our new label may now be used in its place:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 sync @ReleaseCandidate1&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;That command syncs the workspace to the versions of files tagged with the &amp;#8220;ReleaseCandidate1&amp;#8221; label. It offers a more direct way to access those files compared to using a job to look up the number and then syncing to that number.&lt;/p&gt;
&lt;p&gt;Labels also offer other interesting functionality. Just as with other specifications stored on the Helix server, a label specification may later be examined and/or altered using the following command:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 label ReleaseCandidate1&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;This invokes your editor and shows you what the &amp;#8220;p4 tag&amp;#8221; command created behind the scenes. It also shows that the label is marked with the attributes &amp;#8220;unlocked&amp;#8221; and &amp;#8220;noautoreload&amp;#8221;. Unlike many systems, you can lock Helix labels to prevent future changes.&lt;/p&gt;
&lt;p&gt;If you update the label spec to &amp;#8220;locked&amp;#8221;, then the set of files/revisions associated with that label may no longer be changed by anyone, even the label owner. The label owner may later edit the spec and unlock the label, but until then it&amp;#8217;s effectively frozen. This is great for identifying content securely for compliance.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s set the &amp;#8220;noautoreload&amp;#8221; attribute aside for now and move on to other storage details. Helix labels offer greater functionality insofar as they may be limited with a view. If you open the label spec for the one we just created, for example, its view section reads:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;View:

      //DevOps/...

      //depot/...&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;That limits the scope of the label. Because we created it on the &amp;#8220;Main&amp;#8221; stream, both &amp;#8220;DevOps&amp;#8221; and the default depot were included in the label&amp;#8217;s view. Were we to try to apply that label elsewhere, we&amp;#8217;d meet with issues.&lt;/p&gt;
&lt;p&gt;Note: changing the view after the fact won&amp;#8217;t change the files already associated with that label, it merely restricts the scope of the label&amp;#8217;s use in future commands.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h3&gt;The &amp;#8220;labelsync&amp;#8221; Command&lt;/h3&gt;
&lt;p&gt;That offers a natural segue to another useful label-related command, &amp;#8220;labelsync&amp;#8221;:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 labelsync -l ReleaseCandidate1 //DevOps/Main/...&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;The best way to describe the differences between &amp;#8220;tag&amp;#8221; and &amp;#8220;labelsync&amp;#8221; is to say that &amp;#8220;tag&amp;#8221; always adds file revisions to a label, whereas &amp;#8220;labelsync&amp;#8221; replaces all the file revisions contained by the label. Though to be clear, &amp;#8220;labelsync&amp;#8221;, like &amp;#8220;tag&amp;#8221;, creates a new label specification if one doesn&amp;#8217;t already exist.&lt;/p&gt;
&lt;p&gt;One subtle difference, however, is that &amp;#8220;labelsync&amp;#8221;&amp;#160; doesn&amp;#8217;t select the head revisions of all the files. Rather, it associates the label with whatever revisions are in the current workspace. The &amp;#8220;labelsync&amp;#8221; command is also exclusive, meaning it removes the label from anything outside the current set of files, unlike &amp;#8220;tag&amp;#8221; which simply adds. In short, &amp;#8220;labelsync&amp;#8221; was intended to make it easy to define a label so it matches the content of the current workspace exactly.&lt;/p&gt;
&lt;p&gt;Clear as mud, right? An example should help illustrate the differences in intended use. Let&amp;#8217;s say that you&amp;#8217;re not exactly using Trunk-Based Development (TBD) and don&amp;#8217;t have the luxury of taking a known-good build from your &amp;#8220;Main&amp;#8221; stream at any moment.&lt;/p&gt;
&lt;p&gt;A common, alternate way of working is to let the release-build system &amp;#8220;float&amp;#8221; or &amp;#8220;roll&amp;#8221; a label like &amp;#8220;LastKnownGoodBuild&amp;#8221; forward at the conclusion of every successful test run. Testers tend to love this approach as they know they can always sync their workspaces to that floating label.&lt;/p&gt;
&lt;p&gt;One problem with this approach, however, is that every time that label rolls forward, the previous known-good build is lost. The most frequently used workaround is to copy the existing label to something more specific before rolling it forward:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 tag -l LastKnownGoodBuild_01_24_2017 @LastKnownGoodBuild&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;So here&amp;#8217;s the catch: what if the people relying on that floating label need to work with some previous known-good build? Or worse, what if your automated systems that rely on that floating label need to work with some previous known-good build? This is where the &amp;#8220;labelsync&amp;#8221; command shines:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 labelsync -l LastKnownGoodBuild @LastKnownGoodBuild_01_24_2017&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;That command replaces the contents of the floating label with the contents of the date-specific label, so you that when everyone syncs, they&amp;#8217;ll get exactly what you want them to get. In short, if you stick with the &amp;#8220;tag&amp;#8221; command to associate files with a label and the &amp;#8220;labelsync&amp;#8221; command to reset the contents of a label, you&amp;#8217;ll never go wrong.&lt;/p&gt;
&lt;p&gt;One last thing remains before we&amp;#8217;re done with labels, and that&amp;#8217;s a bit of advice for working with them at scale. That is, if you&amp;#8217;re working with millions of files, but absolutely must rely on lots of labels, how can you maintain good performance and manage the load on the server as time marches onward?&lt;/p&gt;
&lt;p&gt;Helix supplies a little-known feature that allows you to &amp;#8220;unload&amp;#8221; label data from the server, archiving what you no longer need:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 unload -l ReleaseCandidate1&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;What that does &amp;#8220;under the hood&amp;#8221; is move the details for the label to a special unload depot. Should you ever need that data back, it&amp;#8217;s a simple enough thing to undo:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 reload -l ReleaseCandidate1&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Of course, unloading labels one at a time could be just as painful as having too many in the first place, so the command (thankfully) can also unload anything older than a specified date:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;p4 unload -f -al -d 2017/01/01&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;That commandunloads all labels prior to the beginning of this current year, effectively starting with a blank slate. Helix provides some nice &amp;#8220;housekeeping&amp;#8221; abilities that both your server admin(s) and day-to-day users will appreciate. For more details, including information on the aforementioned &amp;#8220;noautoreload&amp;#8221; attribute, &lt;a href="https://www.perforce.com/perforce/doc.current/manuals/cmdref/p4_label.html"&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are other CI topics we could discuss, but we&amp;#8217;ve covered a lot, and it&amp;#8217;s time to move on to the next step in our DevOps pipeline: Continuous Testing.&lt;/p&gt;
&lt;h2&gt;You Ask, We Answer&lt;/h2&gt;
&lt;p&gt;As previously mentioned, this is your roadmap to creating a successful DevOps pipeline. Don&amp;#8217;t understand something? Just ask. Need to dive a little deeper?&amp;#160;Send an email to&amp;#160;&lt;a href="mailto:info@perforce.com?subject=DevOps%20Digest%20Question"&gt;info@perforce.com&lt;/a&gt;&amp;#160;with your questions. Then, stay tuned for a live Q&amp;amp;A webinar at the end of this series.&lt;/p&gt;
&lt;h2&gt;Get DevOps Digest Sent to Your Inbox&lt;/h2&gt;
&lt;p&gt;You don&amp;#8217;t need to remember to check back with us each week. Instead, get the digest delivered directly to your inbox.&amp;#160;&lt;a href="http://info.perforce.com/devops_digest_reg.html"&gt;Subscribe&lt;/a&gt;&amp;#160;to our 25-week DevOps Digest and we&amp;#8217;ll get you where you need to go, one email at a time.&lt;/p&gt;
&lt;h2&gt;See Perforce Helix in Action!&lt;/h2&gt;
&lt;p&gt;Join us for a live demo every other Tuesday and see the best of Perforce Helix in 20 minutes.&amp;#160;&lt;a href="http://info.perforce.com/helix-live-demo-reg.html"&gt;Save your spot!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>Creative Quickness in The Chinese Room</title><link href="http://ciandcd.github.io/ciandcd-web/creative-quickness-in-the-chinese-room.html" rel="alternate"></link><published>2017-02-09T21:35:02+00:00</published><updated>2017-02-09T21:35:02+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-02-09:/ciandcd-web/creative-quickness-in-the-chinese-room.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170209/creative-quickness-chinese-room"&gt;https://www.perforce.com/blog/170209/creative-quickness-chinese-room&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/gdbp-blog-thechineseroom.jpg"&gt;&lt;/p&gt;
&lt;p&gt;If given a choice on what movie to watch, would you choose a hotly-anticipated blockbuster or a plot-driven period piece? In cinema, you&amp;#8217;re hard-pressed to get both in one sitting.&lt;/p&gt;
&lt;p&gt;But in game design, where imagination and innovation have steadily ascended, you can truly deliver a user experience unlike any other, provided you have the tools to match your creative vision.&lt;/p&gt;
&lt;p&gt;The Chinese Room, an independent video game studio in Portsmouth, U.K., is an industry stalwart in game development. The studio, which specializes in experimental first-person narratives, is garnering accolades that surpass larger studios while producing a collection of critically-acclaimed gaming titles, including Dear Esther, Amnesia: A Machine for&amp;#160;Pigs, and Everybody&amp;#8217;s Gone to the Rapture.&lt;/p&gt;
&lt;p&gt;Each game is immensely detailed and, through evocative storytelling, offers gamers fully-realized worlds where mysteries can be confronted and resolved. It&amp;#8217;s no wonder the studio has been heaped with so much praise.&lt;/p&gt;
&lt;p&gt;Here at Perforce, we&amp;#8217;re proud to provide the best file versioning tool for game development customers. We love being a part of that success and relish having such visionary customers to support. What The Chinese Room has achieved (11 BAFTA award nominations, including 2016&amp;#8217;s BAFTA Winner for Best Game) is a testament to their studio&amp;#8217;s ability to implement game development best practices to foster greater creativity in their development projects. &amp;#160;&lt;/p&gt;
&lt;p&gt;Navigating the ever-changing landscape of game design, The Chinese Room relies on Perforce Helix to accommodate their workflows long-term, help streamline their asset management, and serve as a development platform that lets them focus on what they feel makes them great: their creative focus.&lt;/p&gt;
&lt;p&gt;Below are a few ways The Chinese Room uses Helix to unfurl their creative visions onto the gaming screen.&lt;/p&gt;
&lt;p&gt;PRODUCT ROADMAP FOR GAMING&lt;/p&gt;
&lt;p&gt;To the modern gamer, many retro arcade games seem antiquated. The exponential growth of gaming technology has accelerated the conceptual reach and aesthetic baseline for gaming titles. Sure, it&amp;#8217;ll always help having a riveting game narrative featuring complex characters, but that alone won&amp;#8217;t captivate broad audiences.&lt;/p&gt;
&lt;p&gt;Game studios have to keep one eye permanently fixed on the future. With near-term game features like face and voice recognition, augmented reality, and gesture control already being woven into game dev, it&amp;#8217;s imperative to have the right tools to help evolve with the industry.&lt;/p&gt;
&lt;p&gt;&amp;#8220;You might design something that is dependent on a feature that suddenly is no longer there,&amp;#8221; says The Chinese Room&amp;#8217;s Lead Programmer, Stuart Yarham.&lt;/p&gt;
&lt;p&gt;Most studios, especially smaller shops, don&amp;#8217;t have the resources to operate and manage home-grown versioning tools. And, besides, no other platform manages binary data (a staple in media design) better than Helix.&lt;/p&gt;
&lt;p&gt;&amp;#8220;You may worry your version management&amp;#8217;s product roadmap won&amp;#8217;t support your design features,&amp;#8221; says Yarham. &amp;#8220;We&amp;#8217;ve never had that problem with Perforce.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s because Helix continually aligns with the ongoing needs of game studios, as they manage complex projects of large and variable files across distributed teams.&lt;/p&gt;
&lt;p&gt;ASSET MANAGEMENT&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s fair to say, on balance, it&amp;#8217;s easier to make video games today than ever before, as specialized tools and technologies have become ubiquitous throughout the industry. However, for smaller studios with less bandwidth to focus on tooling management, the barrier of entry is still a hurdle to overcome.&lt;/p&gt;
&lt;p&gt;Like many start-up studios, with lofty ambitions and limited initial resources, managing assets through their development pipeline is often an ad hoc, &amp;#8220;make-it-happen&amp;#8221; approach. This can severely limit the progress of a gaming title, with smaller teams focused mostly on the end product, lacking the management overhead to optimize their day-to-day workflows.&lt;/p&gt;
&lt;p&gt;&amp;#8220;When I think back before we used Perforce, we would zip and share file data in our projects. It was a nightmare.&amp;#8221;&lt;/p&gt;
&lt;p&gt;With contributors working remotely and adding data 24/7, it can be hard to keep distributed teams on track and effectively managed without a tool to coordinate your efforts.&lt;/p&gt;
&lt;p&gt;&amp;#8220;With Perforce, we&amp;#8217;re able to connect all staff working remotely, syncing files and work together.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Perforce streamlines development collaboration and protects projects with industry-leading versioning of gaming assets.&lt;/p&gt;
&lt;p&gt;&amp;#8220;We might go back a version from two days ago to find something that is missing. It happens a lot in game development. You need to be able to roll back changes,&amp;#8221; says Yarham, adding &amp;#8221;A lot of our assets are binary. You can&amp;#8217;t just open them and debug like you can with code. Perforce can go back in time to get everything working.&amp;#8221;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s just one reason Perforce is the undisputed market leader in game versioning, as it handles large and variable files, ready to scale exponentially, better than anyone else.&lt;/p&gt;
&lt;p&gt;SUPPORTS CREATIVITY&lt;/p&gt;
&lt;p&gt;Even in a creative enterprise, you sometimes need to &amp;#8220;cut the fat.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Decision-makers at The Chinese Room understand the need to improve development agility and greater efficiency; it&amp;#8217;s a consideration that every studio grapples with to become more successful.&lt;/p&gt;
&lt;p&gt;But The Chinese Room isn&amp;#8217;t interested in distracting from their main goal of creating unique gaming experiences for their audience, even if they could.&lt;/p&gt;
&lt;p&gt;&amp;#8220;We don&amp;#8217;t have the resources to build our own technology and tools, we&amp;#8217;re a small team.&amp;#8221;&lt;/p&gt;
&lt;p&gt;The Helix Versioning Engine allows The Chinese Room to get development out the door quickly, so as not to stall their momentum. By being proactive in development, their team is able to paint on a canvas that doesn&amp;#8217;t need to be wiped clean&amp;#160;but can track history of each and every brush stroke.&lt;/p&gt;
&lt;p&gt;"Everyone talks about iterating fast&amp;#160; -- iterating and experimenting fast, trying stuff out &amp;#8211; which is important for us because we have such a creative focus.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Helix allows The Chinese Room to play fast and loose with the creative aspects of their build, all while ensuring a stable record of all changes that can be versioned back at a moment&amp;#8217;s notice.&lt;/p&gt;
&lt;p&gt;CONCLUSION&lt;/p&gt;
&lt;p&gt;The Chinese Room is one of many customers using Helix to drive their development best practices day-to-day.&lt;/p&gt;
&lt;p&gt;To learn more about how other game studios are leveraging Helix in their best practices, check out our Game Development Best Practices eBook and get helpful insights on how to get more out of your development workflow.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll get a glimpse at the proven processes of a handful of gaming&amp;#8217;s most lauded studios, including Epic Games, CD PROJEKT RED, and Cloud Imperium.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://info.perforce.com/game-dev-best-practices-ebook.html"&gt;Download it here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry><entry><title>Perforce Achieves Record Sales and New Customer Wins in 2016</title><link href="http://ciandcd.github.io/ciandcd-web/perforce-achieves-record-sales-and-new-customer-wins-in-2016.html" rel="alternate"></link><published>2017-02-08T22:20:54+00:00</published><updated>2017-02-08T22:20:54+00:00</updated><author><name>About The Author</name></author><id>tag:ciandcd.github.io,2017-02-08:/ciandcd-web/perforce-achieves-record-sales-and-new-customer-wins-in-2016.html</id><summary type="html"></summary><content type="html">From:&lt;a href="https://www.perforce.com/blog/170208/perforce-achieves-record-sales-new-customer-wins-2016"&gt;https://www.perforce.com/blog/170208/perforce-achieves-record-sales-new-customer-wins-2016&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p class="p1"&gt;&amp;#160;&lt;/p&gt;
&lt;p class="p1"&gt;&lt;img alt="Perforce Sets Up for Success 2017 Image Quote" src="/sites/default/files/images/blog/pf-social-pr-quote-blog.png"&gt;&lt;/p&gt;
&lt;p class="p1"&gt;&amp;#160;&lt;/p&gt;
&lt;p class="p1"&gt;If you&amp;#8217;re an avid Perforce follower (thank you), you may already know that 2016 was a year marked by change: new ownership, new leadership, and new product direction. While not always easy, change is sometimes necessary and, in this case, has provided us with a breath of fresh air, ultimately laying the groundwork for what&amp;#8217;s to come.&lt;/p&gt;
&lt;p class="p1"&gt;&amp;#160;&lt;/p&gt;
&lt;p class="p1"&gt;Perforce adopted, adapted, and shifted into high gear to round out the year with double-digit increases in growth of revenue and customer base.&lt;/p&gt;
&lt;p class="p1"&gt;&amp;#160;&lt;/p&gt;
&lt;p class="p1"&gt;Janet Dryer, CEO, takes a moment to reflect on the past year as well as what 2017 will bring for our customers.&amp;#160;&lt;/p&gt;
&lt;p class="p1"&gt;&amp;#160;&lt;/p&gt;
&lt;p class="p2"&gt;&lt;a href="https://www.perforce.com/press/perforce-achieves-record-sales-new-customer-wins-2016"&gt;Read the full press release.&lt;/a&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class="p4"&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</content><category term="perforce"></category></entry></feed>